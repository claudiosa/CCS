Orientações Gerais de ENTREGA das LISTAS DE EXERCICIOS

<<<<<< LEIA TUDO >>>>>>

Para entrega de listas de exercicios siga as regras basicas:

a) Leia um (qualquer) código de honra academico, vai servir como um guia de conduta.
Exemplo: http://www.baylor.edu/honorcode/index.php?id=44060

b) As listas serao postadas em CODIGO FONTE (ASCII) (extensoes da linguagem que usares .mzn, .pi, .c++, etc) no diretorio 
pessoal no https://dropitto.me/Programacao_por_Restricoes
A senha é: olpr2016

c) Entregas apos os prazos (com atraso) serão parcialmente consideradas, conforme disponibilidade na fila.

d) Listas individuais, ou no máximo: DUPLAS. No testes de I/Os de pgms coloque seu, sua data de nasc, etc, para autenticar a sua originalidade de código

e) Cada lista, é um código funcionando, as respostas desejadas
bem como SAIDAS devem estar comentadas neste arquivo. Caso faça, em mais de uma linguagem de programacao, crie um novo arquivo, indicando a lista e o problema.

f) Os nomes dos arquivos seguem um padrao:
Por exemplo se os codigos forem em MiniZinC: 
1a_lista_SEU_NOME_problema_01.mzn
1a_lista_SEU_NOME_problema_02.mzn
1a_lista_SEU_NOME_problema_03a.mzn
1a_lista_SEU_NOME_problema_03b.mzn 
1a_lista_SEU_NOME_problema_03c.mzn 
1a_lista_SEU_NOME_problema_04.mzn 
etc

PS: NESTES NOMES NAO USE ACENTUACAO e ESPACOS entre os nomes
use "_" ou "-" para separar nomes


g) Dificuldades, procure o prof ou poste na lista da disciplina

h) Dúvidas etc, se inscreva nas listas de EClipse, Picat, Gecode e Minizinc e poste suas dúvidas.  Há uma comunidade bem ativa em solidária em ajudar

i) As notas de cada lista são liberadas em 3 dias úteis.

j) Toda lista que contiver algo obscuro, assuma a sua interpretação,
e justifique-as. Alguns problemas são 100% originais e passíveis de 
falhas.


O QUE DEVE CONTER NO SEU ARQUIVO-FONTE:

1. Rápida/Resumo da descricao do problema ... copy-paste do enunciado se  for o caso   (apenas para o prof lembrar do problema enunciado)

2. Descricao da (SUA) estratégia de solucão (esta voce implementou)
     Usou variáveis simples? Usou arrays 1-d? Usou arrays 2-d?  Usou sets?   etc. 
     
3. Possíveis outras estratégias de solucão (alternativas).
   Quais alternativas de solução (clássica pergunta na apresentação)   
   
4.  Modelagem (na medida que fores ganhando experiencia ... isto vai 
    ficando rico, como complexidade etc ) e analise de complexidade
    
5. Resultados ESPERADOS   

6. O código comentado a cada restrição ... tornando-o LEGIVEL

7. Saída de VÁRIOS casos testes de I/O (ver obs acima)

8. Faça uma rápida análise sobre os valores de saída. Era esperado? 
   Sim? Não? PORQUÊ?

9. Possível melhorar esta implementação?

10.  Sugestões.

11. Habilite, colete e interprete os dados quando necessário
habilitando as opcoes \textit{verbose solving} e \textit{statitics for solving} no solver.


OBS: caso os itens acima nao sejam pertinentes ou nao saibas responder ....
inclua a sigla: ND (nada a declarar) ou NA (nada a acrescentar). 







