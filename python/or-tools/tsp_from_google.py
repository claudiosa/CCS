"""Simple travelling salesman problem between cities."""

from __future__ import print_function

from ortools.sat.python import cp_model


DISTANCE_MATRIX = [
    [0 ,291 ,794 ,629 ,850 ,806 ,882 ,973 ,991 ,437 ,1238 ,1187 ,903 ,508 ,903 ,1179 ,1197 ,1201 ,1205 ,902 ,760 ,1032 ,943 ,1106 ,999 ,1011 ,1527 ,1339 ,1059 ,1206 ,1794 ,1338 ,1714 ,1741 ,1498 ,1852 ,1625 ],
[291 ,0 ,513 ,342 ,564 ,515 ,591 ,683 ,701 ,457 ,947 ,896 ,622 ,484 ,625 ,891 ,910 ,914 ,919 ,661 ,811 ,779 ,718 ,848 ,775 ,792 ,1253 ,1083 ,966 ,1046 ,1534 ,1193 ,1472 ,1496 ,1308 ,1599 ,1413 ],
[794 ,513 ,0 ,175 ,69 ,167 ,182 ,300 ,312 ,883 ,492 ,464 ,371 ,866 ,391 ,503 ,522 ,531 ,536 ,592 ,1201 ,622 ,679 ,652 ,721 ,748 ,923 ,851 ,1154 ,1095 ,1246 ,1251 ,1252 ,1267 ,1252 ,1331 ,1288 ],
[629 ,342 ,175 ,0 ,223 ,200 ,266 ,376 ,393 ,714 ,621 ,578 ,375 ,703 ,389 ,592 ,612 ,619 ,623 ,535 ,1040 ,604 ,617 ,653 ,668 ,693 ,993 ,875 ,1040 ,1021 ,1301 ,1178 ,1279 ,1298 ,1217 ,1379 ,1279 ],
[850 ,564 ,69 ,223 ,0 ,139 ,127 ,239 ,250 ,912 ,423 ,395 ,329 ,890 ,351 ,436 ,455 ,464 ,470 ,564 ,1220 ,580 ,651 ,604 ,690 ,717 ,858 ,795 ,1145 ,1068 ,1182 ,1223 ,1194 ,1207 ,1210 ,1269 ,1239 ],
[806 ,515 ,167 ,200 ,139 ,0 ,77 ,176 ,194 ,808 ,432 ,383 ,206 ,777 ,225 ,393 ,412 ,419 ,424 ,427 ,1100 ,455 ,514 ,489 ,555 ,582 ,796 ,697 ,1006 ,931 ,1110 ,1087 ,1101 ,1117 ,1085 ,1191 ,1125 ],
[882 ,591 ,182 ,266 ,127 ,77 ,0 ,119 ,134 ,882 ,357 ,312 ,207 ,847 ,229 ,332 ,351 ,359 ,364 ,451 ,1166 ,456 ,537 ,477 ,573 ,600 ,746 ,670 ,1048 ,953 ,1066 ,1107 ,1070 ,1085 ,1085 ,1150 ,1112 ],
[973 ,683 ,300 ,376 ,239 ,176 ,119 ,0 ,18 ,926 ,273 ,215 ,154 ,882 ,176 ,216 ,236 ,243 ,248 ,404 ,1186 ,375 ,485 ,382 ,511 ,538 ,627 ,558 ,1016 ,890 ,947 ,1041 ,955 ,969 ,994 ,1032 ,1009 ],
[991 ,701 ,312 ,393 ,250 ,194 ,134 ,18 ,0 ,943 ,255 ,197 ,165 ,898 ,186 ,199 ,219 ,226 ,231 ,412 ,1200 ,376 ,491 ,379 ,516 ,543 ,612 ,550 ,1025 ,894 ,933 ,1044 ,945 ,958 ,992 ,1019 ,1003 ],
[437 ,457 ,883 ,714 ,912 ,808 ,882 ,926 ,943 ,0 ,1196 ,1131 ,801 ,88 ,789 ,1087 ,1102 ,1102 ,1105 ,678 ,355 ,819 ,681 ,897 ,726 ,729 ,1340 ,1107 ,635 ,826 ,1551 ,940 ,1432 ,1462 ,1141 ,1591 ,1292 ],
[1238 ,947 ,492 ,621 ,423 ,432 ,357 ,273 ,255 ,1196 ,0 ,70 ,400 ,1147 ,415 ,159 ,160 ,170 ,173 ,611 ,1439 ,526 ,676 ,491 ,683 ,707 ,503 ,560 ,1214 ,1037 ,832 ,1173 ,900 ,904 ,1060 ,929 ,1025 ],
[1187 ,896 ,464 ,578 ,395 ,383 ,312 ,215 ,197 ,1131 ,70 ,0 ,332 ,1081 ,347 ,98 ,105 ,116 ,120 ,541 ,1371 ,458 ,606 ,426 ,614 ,639 ,489 ,513 ,1145 ,972 ,819 ,1110 ,871 ,878 ,1007 ,913 ,980 ],
[903 ,622 ,371 ,375 ,329 ,206 ,207 ,154 ,165 ,801 ,400 ,332 ,0 ,749 ,23 ,289 ,305 ,307 ,310 ,252 ,1041 ,251 ,336 ,284 ,368 ,395 ,633 ,500 ,862 ,749 ,930 ,902 ,904 ,923 ,882 ,1005 ,919 ],
[508 ,484 ,866 ,703 ,890 ,777 ,847 ,882 ,898 ,88 ,1147 ,1081 ,749 ,0 ,736 ,1032 ,1046 ,1045 ,1047 ,607 ,339 ,748 ,604 ,825 ,647 ,648 ,1267 ,1029 ,554 ,738 ,1470 ,854 ,1347 ,1378 ,1053 ,1508 ,1205 ],
[903 ,625 ,391 ,389 ,351 ,225 ,229 ,176 ,186 ,789 ,415 ,347 ,23 ,736 ,0 ,298 ,314 ,315 ,318 ,229 ,1024 ,231 ,312 ,266 ,344 ,372 ,629 ,487 ,840 ,725 ,921 ,879 ,891 ,910 ,861 ,995 ,901 ],
[1179 ,891 ,503 ,592 ,436 ,393 ,332 ,216 ,199 ,1087 ,159 ,98 ,289 ,1032 ,298 ,0 ,19 ,28 ,33 ,466 ,1309 ,370 ,525 ,332 ,528 ,551 ,423 ,418 ,1061 ,878 ,750 ,1014 ,787 ,796 ,909 ,841 ,886 ],
[1197 ,910 ,522 ,612 ,455 ,412 ,351 ,236 ,219 ,1102 ,160 ,105 ,305 ,1046 ,314 ,19 ,0 ,12 ,17 ,476 ,1321 ,375 ,532 ,334 ,533 ,556 ,405 ,409 ,1066 ,879 ,733 ,1014 ,773 ,781 ,903 ,824 ,876 ],
[1201 ,914 ,531 ,619 ,464 ,419 ,359 ,243 ,226 ,1102 ,170 ,116 ,307 ,1045 ,315 ,28 ,12 ,0 ,5 ,471 ,1317 ,368 ,526 ,325 ,526 ,549 ,395 ,397 ,1059 ,870 ,722 ,1004 ,761 ,769 ,892 ,813 ,864 ],
[1205 ,919 ,536 ,623 ,470 ,424 ,364 ,248 ,231 ,1105 ,173 ,120 ,310 ,1047 ,318 ,33 ,17 ,5 ,0 ,472 ,1319 ,368 ,526 ,324 ,526 ,548 ,389 ,393 ,1059 ,868 ,717 ,1002 ,756 ,764 ,889 ,808 ,860 ],
[902 ,661 ,592 ,535 ,564 ,427 ,451 ,404 ,412 ,678 ,611 ,541 ,252 ,607 ,229 ,466 ,476 ,471 ,472 ,0 ,851 ,141 ,87 ,219 ,133 ,159 ,663 ,442 ,614 ,504 ,896 ,660 ,814 ,840 ,683 ,951 ,760 ],
[760 ,811 ,1201 ,1040 ,1220 ,1100 ,1166 ,1186 ,1200 ,355 ,1439 ,1371 ,1041 ,339 ,1024 ,1309 ,1321 ,1317 ,1319 ,851 ,0 ,979 ,818 ,1051 ,844 ,835 ,1475 ,1217 ,496 ,774 ,1623 ,835 ,1467 ,1500 ,1094 ,1642 ,1273 ],
[1032 ,779 ,622 ,604 ,580 ,455 ,456 ,375 ,376 ,819 ,526 ,458 ,251 ,748 ,231 ,370 ,375 ,368 ,368 ,141 ,979 ,0 ,164 ,78 ,158 ,181 ,521 ,307 ,691 ,522 ,762 ,668 ,695 ,718 ,630 ,821 ,675 ],
[943 ,718 ,679 ,617 ,651 ,514 ,537 ,485 ,491 ,681 ,676 ,606 ,336 ,604 ,312 ,525 ,532 ,526 ,526 ,87 ,818 ,164 ,0 ,233 ,57 ,77 ,667 ,426 ,540 ,417 ,873 ,573 ,773 ,800 ,605 ,920 ,695 ],
[1106 ,848 ,652 ,653 ,604 ,489 ,477 ,382 ,379 ,897 ,491 ,426 ,284 ,825 ,266 ,332 ,334 ,325 ,324 ,219 ,1051 ,78 ,233 ,0 ,214 ,232 ,443 ,235 ,741 ,546 ,688 ,684 ,632 ,653 ,612 ,751 ,636 ],
[999 ,775 ,721 ,668 ,690 ,555 ,573 ,511 ,516 ,726 ,683 ,614 ,368 ,647 ,344 ,528 ,533 ,526 ,526 ,133 ,844 ,158 ,57 ,214 ,0 ,27 ,633 ,383 ,533 ,381 ,825 ,534 ,719 ,747 ,551 ,869 ,639 ],
[1011 ,792 ,748 ,693 ,717 ,582 ,600 ,538 ,543 ,729 ,707 ,639 ,395 ,648 ,372 ,551 ,556 ,549 ,548 ,159 ,835 ,181 ,77 ,232 ,27 ,0 ,641 ,387 ,511 ,354 ,823 ,507 ,711 ,739 ,528 ,864 ,621 ],
[1527 ,1253 ,923 ,993 ,858 ,796 ,746 ,627 ,612 ,1340 ,503 ,489 ,633 ,1267 ,629 ,423 ,405 ,395 ,389 ,663 ,1475 ,521 ,667 ,443 ,633 ,641 ,0 ,265 ,1099 ,834 ,330 ,921 ,415 ,413 ,709 ,426 ,605 ],
[1339 ,1083 ,851 ,875 ,795 ,697 ,670 ,558 ,550 ,1107 ,560 ,513 ,500 ,1029 ,487 ,418 ,409 ,397 ,393 ,442 ,1217 ,307 ,426 ,235 ,383 ,387 ,265 ,0 ,835 ,576 ,455 ,677 ,404 ,423 ,509 ,516 ,467 ],
[1059 ,966 ,1154 ,1040 ,1145 ,1006 ,1048 ,1016 ,1025 ,635 ,1214 ,1145 ,862 ,554 ,840 ,1061 ,1066 ,1059 ,1059 ,614 ,496 ,691 ,540 ,741 ,533 ,511 ,1099 ,835 ,0 ,296 ,1182 ,339 ,1006 ,1039 ,604 ,1186 ,789 ],
[1206 ,1046 ,1095 ,1021 ,1068 ,931 ,953 ,890 ,894 ,826 ,1037 ,972 ,749 ,738 ,725 ,878 ,879 ,870 ,868 ,504 ,774 ,522 ,417 ,546 ,381 ,354 ,834 ,576 ,296 ,0 ,889 ,157 ,710 ,743 ,323 ,889 ,499 ],
[1794 ,1534 ,1246 ,1301 ,1182 ,1110 ,1066 ,947 ,933 ,1551 ,832 ,819 ,930 ,1470 ,921 ,750 ,733 ,722 ,717 ,896 ,1623 ,762 ,873 ,688 ,825 ,823 ,330 ,455 ,1182 ,889 ,0 ,922 ,211 ,183 ,650 ,102 ,479 ],
[1338 ,1193 ,1251 ,1178 ,1223 ,1087 ,1107 ,1041 ,1044 ,940 ,1173 ,1110 ,902 ,854 ,879 ,1014 ,1014 ,1004 ,1002 ,660 ,835 ,668 ,573 ,684 ,534 ,507 ,921 ,677 ,339 ,157 ,922 ,0 ,725 ,758 ,287 ,906 ,478 ],
[1714 ,1472 ,1252 ,1279 ,1194 ,1101 ,1070 ,955 ,945 ,1432 ,900 ,871 ,904 ,1347 ,891 ,787 ,773 ,761 ,756 ,814 ,1467 ,695 ,773 ,632 ,719 ,711 ,415 ,404 ,1006 ,710 ,211 ,725 ,0 ,34 ,445 ,181 ,269 ],
[1741 ,1496 ,1267 ,1298 ,1207 ,1117 ,1085 ,969 ,958 ,1462 ,904 ,878 ,923 ,1378 ,910 ,796 ,781 ,769 ,764 ,840 ,1500 ,718 ,800 ,653 ,747 ,739 ,413 ,423 ,1039 ,743 ,183 ,758 ,34 ,0 ,478 ,147 ,299 ],
[1498 ,1308 ,1252 ,1217 ,1210 ,1085 ,1085 ,994 ,992 ,1141 ,1060 ,1007 ,882 ,1053 ,861 ,909 ,903 ,892 ,889 ,683 ,1094 ,630 ,605 ,612 ,551 ,528 ,709 ,509 ,604 ,323 ,650 ,287 ,445 ,478 ,0 ,623 ,191 ],
[1852 ,1599 ,1331 ,1379 ,1269 ,1191 ,1150 ,1032 ,1019 ,1591 ,929 ,913 ,1005 ,1508 ,995 ,841 ,824 ,813 ,808 ,951 ,1642 ,821 ,920 ,751 ,869 ,864 ,426 ,516 ,1186 ,889 ,102 ,906 ,181 ,147 ,623 ,0 ,441 ],
[1625 ,1413 ,1288 ,1279 ,1239 ,1125 ,1112 ,1009 ,1003 ,1292 ,1025 ,980 ,919 ,1205 ,901 ,886 ,876 ,864 ,860 ,760 ,1273 ,675 ,695 ,636 ,639 ,621 ,605 ,467 ,789 ,499 ,479 ,478 ,269 ,299 ,191 ,441 ,0 ]
 ] # yapf: disable


def main():
    """Entry point of the program."""
    num_nodes = len(DISTANCE_MATRIX)
    all_nodes = range(num_nodes)
    print('Num nodes =', num_nodes)

    # Model.
    model = cp_model.CpModel()

    obj_vars = []
    obj_coeffs = []

    # Create the circuit constraint.
    arcs = []
    arc_literals = {}
    for i in all_nodes:
        for j in all_nodes:
            if i == j:
                continue

            lit = model.NewBoolVar('%i follows %i' % (j, i))
            arcs.append([i, j, lit])
            arc_literals[i, j] = lit

            obj_vars.append(lit)
            obj_coeffs.append(DISTANCE_MATRIX[i][j])

    model.AddCircuit(arcs)

    # Minimize weighted sum of arcs. Because this s
    model.Minimize(
        sum(obj_vars[i] * obj_coeffs[i] for i in range(len(obj_vars))))

    # Solve and print out the solution.
    solver = cp_model.CpSolver()
    solver.parameters.log_search_progress = True
    # To benefit from the linearization of the circuit constraint.
    solver.parameters.linearization_level = 2

    solver.Solve(model)
    print(solver.ResponseStats())

    current_node = 0
    str_route = '%i' % current_node
    route_is_finished = False
    route_distance = 0
    while not route_is_finished:
        for i in all_nodes:
            if i == current_node:
                continue
            if solver.BooleanValue(arc_literals[current_node, i]):
                str_route += ' -> %i' % i
                route_distance += DISTANCE_MATRIX[current_node][i]
                current_node = i
                if current_node == 0:
                    route_is_finished = True
                break

    print('Route/sequence/cycle (0..N-1):', str_route)
    print('Travelled distance:', route_distance)


if __name__ == '__main__':
    main()
