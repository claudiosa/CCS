
input_data() = D  =>
Services_id = ['a001', 'a002', 'a003', 'a004', 'a005', 'a006', 'a007', 'a008', 'a009', 'a010', 'b001', 'b002', 'b003', 'b004', 'b005', 'c001', 'c002', 'c003', 'c004', 'c005', 'c006', 'c007', 'c008', 'c009', 'c010', 'c011', 'c012', 'c013', 'd001', 'd002', 'd003', 'd004', 'd005', 'd006', 'd007', 'd008', 'd009', 'e001', 'e002', 'e003', 'e004', 'e005', 'e006', 'f001', 'f002', 'f003', 'f004', 'f005', 'f006', 'f007', 'f008', 'f009', 'f010', 'f011', 'f012', 'f013', 'f014', 'f015', 'g001', 'g002', 'g003', 'g004', 'g005', 'g006', 'g007', 'g008', 'g009', 'g010', 'h001', 'h002', 'h003', 'h004', 'h005', 'h006', 'h007', 'h008', 'h009', 'h010', 'i001', 'i002', 'i003', 'i004', 'i005', 'i006', 'i007', 'i008', 'i009', 'i010', 'j001', 'j002', 'j003', 'j004', 'j005', 'j006', 'j007', 'j008', 'j009', 'j010', 'j011', 'j012'],
Start_location = ['ahroo', 'dro', 'bno', 'dro', 'bss u', 'dro', 'am n', 'ahroo', 'dro', 'ahroo', 'bwur', 'lks', 'hclg', 'un', 'hclp', 'bwur', 'wkgw', 'bhc', 'bwur', 'bruh', 'bwur', 'bruh', 'bwur', 'bruh', 'bwur', 'lfg', 'hwid', 'lgs', 'bwur', 'bhc', 'wcor', 'bwur', 'lgs', 'hcn', 'hwum', 'hsr', 'hcn', 'lqb', 'hhar', 'hlat', 'hhar', 'lqb', 'hv', 'bwur', 'bspj', 'bwur', 'lmuk', 'lbrw', 'hsr o', 'hoch', 'hoch', 'hoch', 'lbrw', 'lmuk', 'hsr o', 'hold', 'hsr o', 'lbrw', 'hgrd', 'hesh', 'hcn', 'lqb', 'hwtt', 'hbwk', 'hgrd', 'hbwk', 'hgrd', 'hsan', 'hp', 'habz', 'un', 'hlerw', 'uim', 'uei g', 'uim', 'uei g', 'bwur', 'wak', 'wpl', 'dsut', 'dbw', 'daf', 'wrs', 'bwur', 'dust', 'daf', 'lf', 'wn', 'hli', 'fwki', 'hg', 'fwki', 'hg', 'ala', 'ls', 'bhc', 'bno', 'lgs', 'wlst', 'wcor'],
Start_time = [1684710900, 1684814400, 1684867200, 1684927200, 1684973940, 1685055600, 1685087640, 1685142000, 1685226960, 1685322600, 1684728720, 1684786800, 1684886400, 1684969200, 1685048700, 1684726200, 1684806900, 1684890000, 1684909200, 1684912200, 1684933200, 1684939500, 1684972980, 1684978920, 1684989240, 1685063640, 1685131200, 1685221140, 1684728000, 1684800900, 1684871280, 1684900800, 1684971000, 1685025600, 1685043600, 1685047500, 1685062800, 1684709700, 1684767480, 1684924380, 1684965000, 1685054820, 1685149800, 1684706400, 1684710900, 1684728000, 1684791600, 1684791901, 1684821001, 1684836600, 1684866180, 1684881000, 1684917301, 1684968000, 1684999501, 1685052840, 1685060701, 1685084401, 1684697100, 1684786500, 1684810200, 1684884600, 1684956000, 1685046900, 1685050801, 1685053500, 1685069700, 1685139900, 1684718100, 1684786200, 1684889340, 1684983000, 1685025000, 1685031300, 1685042100, 1685049000, 1685084100, 1685142180, 1684804200, 1684858500, 1684863001, 1684877100, 1684976640, 1684996200, 1685040300, 1685054700, 1685068800, 1685145540, 1684641300, 1684770840, 1684780620, 1684789500, 1684801020, 1684870800, 1684895100, 1684981620, 1685070000, 1685148000, 1685177700, 1685220900],
End_location = ['dro', 'bno', 'dro', 'brc', 'dro', 'am n', 'ahroo', 'dro', 'ahroo', 'dro', 'lks', 'hclp', 'un', 'hclp', 'bwur', 'wkgw', 'bhc', 'bwur', 'bruh', 'bwur', 'bruh', 'bwur', 'bruh', 'bwur', 'lfg', 'awi', 'lgs', 'bwur', 'bhc', 'wcor', 'bwur', 'lgs', 'hcn', 'hwum', 'hsr', 'hcn', 'bwur', 'hhar', 'hlat', 'hhar', 'lqb', 'hv', 'lqb', 'bspj', 'bwur', 'lmuk', 'lbrw', 'hsr o', 'hoch', 'hoch', 'hoch', 'lbrw', 'lmuk', 'hsr o', 'hold', 'hsr o', 'lbrw', 'lmuk', 'hesh', 'hcn', 'lqb', 'hwtt', 'hbwk', 'hgrd', 'hwbk', 'hgrd', 'hsan', 'hgrd', 'habz', 'un', 'awlb', 'uim', 'uei g', 'uim', 'uei g', 'bwur', 'wak', 'bwur', 'dsut', 'dbw', 'daf', 'wrs', 'bwur', 'dsut', 'daf', 'lf', 'wn', 'bwur', 'fwki', 'hg', 'fwki', 'hg', 'ala', 'bwur', 'bhc', 'bno', 'lgs', 'wsgr', 'wcor', 'bwur'],
End_time = [1684738800, 1684828800, 1684884600, 1684941900, 1684987260, 1685084760, 1685090220, 1685166600, 1685254500, 1685345700, 1684746900, 1684826100, 1684915200, 1684996500, 1685084580, 1684740300, 1684833600, 1684904400, 1684911000, 1684913400, 1684935000, 1684940700, 1684973640, 1684979880, 1684996440, 1685076300, 1685172360, 1685232300, 1684742400, 1684839780, 1684883700, 1684917000, 1685013600, 1685034000, 1685046600, 1685050200, 1685151000, 1684750320, 1684768020, 1684925100, 1685002140, 1685083740, 1685175300, 1684709100, 1684714500, 1684747200, 1684791900, 1684821000, 1684830060, 1684839600, 1684869780, 1684917300, 1684918200, 1684999500, 1685008800, 1685060700, 1685084400, 1685085720, 1684711200, 1684805700, 1684836000, 1684914000, 1684974480, 1685050800, 1685052420, 1685055120, 1685086800, 1685158800, 1684742400, 1684831080, 1684914600, 1685002200, 1685028600, 1685034900, 1685045700, 1685070000, 1685096160, 1685155800, 1684832400, 1684863000, 1684863900, 1684921560, 1684991460, 1685016000, 1685044800, 1685063400, 1685083500, 1685155380, 1684653900, 1684778880, 1684785780, 1684796400, 1684825500, 1684886100, 1684910400, 1684990080, 1685081400, 1685171100, 1685178600, 1685231400],
D = [Services_id,Start_location, Start_time, End_location, End_time] .


locomotives(['159-008', '159-002', '159-219', '159-010', '159-004', '159-003', '159-007', '159-005', '159-244', '250-009', '159-006']).
init_location(['ahroo', 'bwur', 'bwur', 'bwur', 'lqb', 'bspj', 'hesh', 'habz', 'wak', 'dsut', 'fwki']).

input_tuples([('a001', 'ahroo', 1684710900, 'dro', 1684738800), ('a002', 'dro', 1684814400, 'bno', 1684828800), ('a003', 'bno', 1684867200, 'dro', 1684884600), ('a004', 'dro', 1684927200, 'brc', 1684941900), ('a005', 'bss u', 1684973940, 'dro', 1684987260), ('a006', 'dro', 1685055600, 'am n', 1685084760), ('a007', 'am n', 1685087640, 'ahroo', 1685090220), ('a008', 'ahroo', 1685142000, 'dro', 1685166600), ('a009', 'dro', 1685226960, 'ahroo', 1685254500), ('a010', 'ahroo', 1685322600, 'dro', 1685345700), ('b001', 'bwur', 1684728720, 'lks', 1684746900), ('b002', 'lks', 1684786800, 'hclp', 1684826100), ('b003', 'hclg', 1684886400, 'un', 1684915200), ('b004', 'un', 1684969200, 'hclp', 1684996500), ('b005', 'hclp', 1685048700, 'bwur', 1685084580), ('c001', 'bwur', 1684726200, 'wkgw', 1684740300), ('c002', 'wkgw', 1684806900, 'bhc', 1684833600), ('c003', 'bhc', 1684890000, 'bwur', 1684904400), ('c004', 'bwur', 1684909200, 'bruh', 1684911000), ('c005', 'bruh', 1684912200, 'bwur', 1684913400), ('c006', 'bwur', 1684933200, 'bruh', 1684935000), ('c007', 'bruh', 1684939500, 'bwur', 1684940700), ('c008', 'bwur', 1684972980, 'bruh', 1684973640), ('c009', 'bruh', 1684978920, 'bwur', 1684979880), ('c010', 'bwur', 1684989240, 'lfg', 1684996440), ('c011', 'lfg', 1685063640, 'awi', 1685076300), ('c012', 'hwid', 1685131200, 'lgs', 1685172360), ('c013', 'lgs', 1685221140, 'bwur', 1685232300), ('d001', 'bwur', 1684728000, 'bhc', 1684742400), ('d002', 'bhc', 1684800900, 'wcor', 1684839780), ('d003', 'wcor', 1684871280, 'bwur', 1684883700), ('d004', 'bwur', 1684900800, 'lgs', 1684917000), ('d005', 'lgs', 1684971000, 'hcn', 1685013600), ('d006', 'hcn', 1685025600, 'hwum', 1685034000), ('d007', 'hwum', 1685043600, 'hsr', 1685046600), ('d008', 'hsr', 1685047500, 'hcn', 1685050200), ('d009', 'hcn', 1685062800, 'bwur', 1685151000), ('e001', 'lqb', 1684709700, 'hhar', 1684750320), ('e002', 'hhar', 1684767480, 'hlat', 1684768020), ('e003', 'hlat', 1684924380, 'hhar', 1684925100), ('e004', 'hhar', 1684965000, 'lqb', 1685002140), ('e005', 'lqb', 1685054820, 'hv', 1685083740), ('e006', 'hv', 1685149800, 'lqb', 1685175300), ('f001', 'bwur', 1684706400, 'bspj', 1684709100), ('f002', 'bspj', 1684710900, 'bwur', 1684714500), ('f003', 'bwur', 1684728000, 'lmuk', 1684747200), ('f004', 'lmuk', 1684791600, 'lbrw', 1684791900), ('f005', 'lbrw', 1684791901, 'hsr o', 1684821000), ('f006', 'hsr o', 1684821001, 'hoch', 1684830060), ('f007', 'hoch', 1684836600, 'hoch', 1684839600), ('f008', 'hoch', 1684866180, 'hoch', 1684869780), ('f009', 'hoch', 1684881000, 'lbrw', 1684917300), ('f010', 'lbrw', 1684917301, 'lmuk', 1684918200), ('f011', 'lmuk', 1684968000, 'hsr o', 1684999500), ('f012', 'hsr o', 1684999501, 'hold', 1685008800), ('f013', 'hold', 1685052840, 'hsr o', 1685060700), ('f014', 'hsr o', 1685060701, 'lbrw', 1685084400), ('f015', 'lbrw', 1685084401, 'lmuk', 1685085720), ('g001', 'hgrd', 1684697100, 'hesh', 1684711200), ('g002', 'hesh', 1684786500, 'hcn', 1684805700), ('g003', 'hcn', 1684810200, 'lqb', 1684836000), ('g004', 'lqb', 1684884600, 'hwtt', 1684914000), ('g005', 'hwtt', 1684956000, 'hbwk', 1684974480), ('g006', 'hbwk', 1685046900, 'hgrd', 1685050800), ('g007', 'hgrd', 1685050801, 'hwbk', 1685052420), ('g008', 'hbwk', 1685053500, 'hgrd', 1685055120), ('g009', 'hgrd', 1685069700, 'hsan', 1685086800), ('g010', 'hsan', 1685139900, 'hgrd', 1685158800), ('h001', 'hp', 1684718100, 'habz', 1684742400), ('h002', 'habz', 1684786200, 'un', 1684831080), ('h003', 'un', 1684889340, 'awlb', 1684914600), ('h004', 'hlerw', 1684983000, 'uim', 1685002200), ('h005', 'uim', 1685025000, 'uei g', 1685028600), ('h006', 'uei g', 1685031300, 'uim', 1685034900), ('h007', 'uim', 1685042100, 'uei g', 1685045700), ('h008', 'uei g', 1685049000, 'bwur', 1685070000), ('h009', 'bwur', 1685084100, 'wak', 1685096160), ('h010', 'wak', 1685142180, 'bwur', 1685155800), ('i001', 'wpl', 1684804200, 'dsut', 1684832400), ('i002', 'dsut', 1684858500, 'dbw', 1684863000), ('i003', 'dbw', 1684863001, 'daf', 1684863900), ('i004', 'daf', 1684877100, 'wrs', 1684921560), ('i005', 'wrs', 1684976640, 'bwur', 1684991460), ('i006', 'bwur', 1684996200, 'dsut', 1685016000), ('i007', 'dust', 1685040300, 'daf', 1685044800), ('i008', 'daf', 1685054700, 'lf', 1685063400), ('i009', 'lf', 1685068800, 'wn', 1685083500), ('i010', 'wn', 1685145540, 'bwur', 1685155380), ('j001', 'hli', 1684641300, 'fwki', 1684653900), ('j002', 'fwki', 1684770840, 'hg', 1684778880), ('j003', 'hg', 1684780620, 'fwki', 1684785780), ('j004', 'fwki', 1684789500, 'hg', 1684796400), ('j005', 'hg', 1684801020, 'ala', 1684825500), ('j006', 'ala', 1684870800, 'bwur', 1684886100), ('j007', 'ls', 1684895100, 'bhc', 1684910400), ('j008', 'bhc', 1684981620, 'bno', 1684990080), ('j009', 'bno', 1685070000, 'lgs', 1685081400), ('j010', 'lgs', 1685148000, 'wsgr', 1685171100), ('j011', 'wlst', 1685177700, 'wcor', 1685178600), ('j012', 'wcor', 1685220900, 'bwur', 1685231400)]
). 


/*
main => X = input_data(), print(X),
init_location(P),nl, print(P),
locomotives(L), nl, print(L).
Picat> X = [(1,2), (a,b)], [(X1,X2)|L] = X, print(X2). .
2X = [(1,2),(a,b)]
X1 = 1
X2 = 2
L = [(a,b)]
yes

*/

/*
table(+,+,-,min)
shortest_path(X,Y,Path,W) ?=>
Path = [(X,Y)],
edge(X,Y,W),
shortest_path(X,Y,Path,W) =>
Path = [(X,Z)|PathR],
edge(X,Z,W1),
shortest_path(Z,Y,PathR,W2),
W = W1+W2.
*/

main => %input_tuplas(X),  print(X).
    input_tuples(L),
    L = [(Service, Start, T1, End, T2)| Others_Services], 
    printf("\n Num de servicos: %w\n", len(L)),

    locomotives(Loc),
    init_location(Init_Location),  
    Loc_Place = build_tuple(Loc, Init_Location ),
    print(Loc_Place),
    printf("\n ..............."),
    assign(L, Loc_Place, [], Plan),nl,nl,
    printf("\n Plano:\n"),
    print(reverse(Plan)).

%table(+,+,-, min)
%%% always with current position of ALL locomotives 
assign([], Loc_Place, Current, All_Serv) ?=>
        All_Serv = Current.
       % printf("\n acabou a lista de servicos %w\n\n", Current),
       
%%% always with current position of ALL locomotives  in Loc_Places
assign([(Service, Start, T1, End, T2)| Others_Services], 
       Loc_Place, Current, All_Serv) =>
    !,
    %%% with backtracking here 
    find_a_locomotive(Start, Loc_Place, A_Locomotive),
    printf("\n =>Serv:%w Loc:%w Where:%w Current:%w", Service, A_Locomotive, Start, Current),
    %A_Locomotive = find_a_L(Start, Loc_Place), 
    %%  encontra locomotiva naquela partida
    %%  atribui servico a esta locomotiva e atualiza a sua posição
    New_Loc_Place = update_position(A_Locomotive, End, Loc_Place),
    printf("=> End in: %w", End),
    append([(Service , A_Locomotive)], Current, New_Current),    

    assign(Others_Services, New_Loc_Place, New_Current, All_Serv).
    


build_tuple([],[])  = [].
    %build_tuple([A],[]) => print("\n L1 > L2 (%w)", A).
    %build_tuple([],[B]) => print("\n L1 < L2 (%w)", B).
build_tuple([A|L1], [B|L2]) = Ys =>
            Ys = [ (A,B) | build_tuple(L1,L2)]. 


%find_a_locomotive(Start, [], Answer) ?=> Answer = 'NOT MORE LOCOMOTIVES'.
%%% PREDICATIVE CLAUSE
find_a_locomotive(Start, [(Loc,Where_is)|Rest], Answer) ?=>   Where_is == Start, Answer = Loc .
find_a_locomotive(Start, [(_,Where_is) |Rest], Answer)  =>   find_a_locomotive(Start, Rest, Answer).
               
%% FUNCTIONAL CLAUSE .... of find_a_locomotive
% Função que encontra uma locomotiva 
find_a_L(_ , []) = 'NOT FOUND LOCOMOTIVE'.
find_a_L(Start, [(Loc, Where_is) | Rest])= Train , (Where_is == Start) => Train = Loc.
find_a_L(Start, [(_, Where_is) | Rest]) = 
       Train,
       (Where_is \= Start) => Train = find_a_L(Start, Rest).

%%%Picat> locomotives(X), init_location(Y), T= build_tuple(X,Y), find_a_L(ahroo, T)= Z.
update_position(Locomotive , Final, [] ) = [].
update_position(Locomotive , Final, [(Loc_CURR, Where_is) | Rest]) =  New_Loc_Place
              , (Locomotive == Loc_CURR) =>
               New_Loc_Place = [(Locomotive, Final) | Rest].

update_position(Locomotive , Final, [(Loc_CURR, Where_is) | Rest]) = New_Loc_Place
        , (Locomotive \= Loc_CURR) => 
        New_Loc_Place = [(Loc_CURR, Where_is) | update_position( Locomotive, Final, Rest )].

/*
% Picat> [-2,2,-1] = X, X.menor() = Y.
menor([]) = R, len([])==0 => R = [].
menor([A]) = R, len([A])==1 => R = A.              
menor([A, B|L]) = R, A<B => R = menor([A|L]).    
menor([A, B|L]) = R, B=<A => R = menor([B|L]).  
*/

retorna_3o_da_tupla((_, _, X, _, _)) = X.

menor([]) = R, len([]) == 0 => R = '()'.
menor([A]) = R, len([A]) == 1 => R = A.              
menor([A, B | L]) = R, retorna_3o_da_tupla(A) < retorna_3o_da_tupla(B) => R = menor([A | L]).    
menor([A, B | L]) = R, retorna_3o_da_tupla(B) =< retorna_3o_da_tupla(A) => R = menor([B | L]).

% Função que encontra a tupla com o menor elemento na terceira posição
encontra_menor_tupla(Lista) = Resultado =>
    Resultado = menor(Lista).

x => L = [('a001', 'ahroo', 16, 'dro', 168), 
     ('a002', 'dro', 18, 'bno', 184),
     ('a003', 'bno', 10, 'dro', 1800), 
     ('a002', 'dro', 1400, 'bno', 8800)],

    Resultado = encontra_menor_tupla(L),
    print(Resultado),
    delete(L, Resultado) = Y,
    printf("\n NEW: %w", Y).