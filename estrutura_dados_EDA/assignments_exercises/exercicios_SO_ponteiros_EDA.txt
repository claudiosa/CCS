Ponteiros

Revisao e  Aplicação

Suponha que precisamos de uma função que troque os valores de duas variáveis inteiras, digamos i e j.  É claro que a função

void troca (int i, int j) { // errado!
   int temp;
   temp = i; i = j; j = temp;
}
não produz o efeito desejado, pois recebe apenas os valores das variáveis e não as variáveis propriamente ditas.  A função recebe cópias das variáveis e troca os valores dessas cópias, enquanto as variáveis originais permanecem inalteradas.  Para obter o efeito desejado, é preciso passar à função os endereços das variáveis:

void troca (int *p, int *q)
{
   int temp;
   temp = *p; *p = *q; *q = temp;
}
Para aplicar essa função às variáveis i e j basta dizer

troca (&i, &j);
ou talvez

int *p, *q;
p = &i; q = &j;
troca (p, q);


Exercicios -- TODOS USANDO PONTEIROS e FUNCOES 

1. Verifique que a troca de valores de variáveis discutida acima se poderia ser 
obtida por meio de uma macro do pré-processador:
#define troca (X, Y) { int t = X; X = Y; Y = t; }
. . . 
troca (i, j);
Por que o código abaixo está errado?
void troca (int *i, int *j) {
   int *temp;
   *temp = *i; *i = *j; *j = *temp;
}

2. Um ponteiro pode ser usado para dizer a uma função onde ela deve depositar o resultado de seus cálculos. Escreva uma função hm que converta minutos em horas-e-minutos. A função recebe um inteiro mnts e os endereços de duas variáveis inteiras, digamos h e m, e atribui valores a essas variáveis de modo que m seja menor que 60 e que 60*h + m seja igual a mnts.   Escreva também uma função main que use a função hm.

3. Escreva uma função mm que receba um vetor inteiro v[0..n-1] e os endereços de duas variáveis inteiras, digamos min e max, e deposite nessas variáveis o valor de um elemento mínimo e o valor de um elemento máximo do vetor.   Escreva também uma função main que use a função mm.

4. Faça uma função que verifique se a expressão apontada por substr está presente na cadeia apontada por str. A função possui o protótipo abaixo:
int posicao(char *substr, char *str);
e retorna a posição em que a sub-cadeia aparece em cadeia. 

5. Escreva um programa que leia duas cadeias de caracteres e concatene a segunda cadeia ao final da primeira. 

6.  Escreva um programa que procure em uma matriz elementos que sejam ao mesmo tempo o maior da linha e o menor coluna. 
    As dimensões da matriz e seus dados devem vir de um arquivo texto.
    (Este problema seria um classico para prova -- BOCA)
    
7.  Pointers and arrays
    a) Define variables named jack and jill that are of type pointer-to-int.
    b) Using jack, dynamically allocate an array of 100 ints.
    c) Without using array indexing and without changing what jack points to, 
    write code that will set the 100 elements of the array you just allocated to hold the values 1 through 100, respectively.
    
8. Expanding an array
   a) Using jack, dynamically allocate an array of 500 ints and copy the elements of the array of the previous part into the new array.
   b) Fill the remaining elements of the new jack array with the value 0.
   c) Deallocate the array that was allocated in part 7(b).
   
9. Usando Alocacao Dinamica, leia um arquivo texto de com N (arbitrario) valores inteiros.
   Feita a leitura e alocacao dos mesmos e alocados dinamicamente, faça
   duas funções que encontre o maior e o menor valor.
   Estas retornam os valores a ponteiros.
   
10.  Considere o vetor de ponteiros definidos por:
 char *digit_array[10] = {
          "111101101101111", 
          "001001001001001",
          "111001111100111",
          "111001111001111",
          "101101111001001",
          "111100111001111",
          "111100111101111",
          "111001001001001",
          "111101111101111",
          "111101111001111"};

   Usando individualmente cada ponteiro, totalize o número de 1's  
   nesta matriz. Veja, temos 10 ponteiros acima.
   
11. Write a C function to sort an array of ten integer values in ascending order.
The function will accept two arguments -- a pointer that points to the array and the array size. 
The function returns a pointer that points to the sorted array. 
Prototipo: int *sortAsc(int *p, int size);  

12. Explain the error:
char c = 'A';
double *p = &c; 

13. Write a function that returns a pointer to the maximum value of an array of double's. 
 If the array is empty, return NULL.
 double* maximum(double* a, int size);
 
14. We want to show string repeatedly by shifting top character of string to right. Refer to a below execution example. Write a below source code, complement the expression hidden by "******" to meet this requirement.
Veja a saida desejada: 
$ ./a.out < entrada.txt
Entrada com uma string de 10 caracteres: (o 10 pode ser lido tambem)
abcd1234EFGH
abcd1234EFGH
bcd1234EFGH
cd1234EFGH
d1234EFGH
1234EFGH
234EFGH
34EFGH
4EFGH
EFGH
FGH
GH
H

$       
  
15. Faça a impressao em ordem contraria a anterior  
$ ./a.out < entrada.txt
Entrada com uma string de 10 caracteres: (o 10 pode ser lido tambem)
abcd1234EFGH
H
GH
FGH
EFGH
4EFGH
34EFGH
234EFGH
1234EFGH
d1234EFGH
cd1234EFGH
bcd1234EFGH
abcd1234EFGH

$    
    
16. Verifique a diferença entre o "malloc" e "calloc". Comprove SE o calloc pode inicializar diretamente
    um vetor e o "malloc" nao.
    
17.	    
	    
	  HERE A FEW TIPS TO REMEMBER TO AVOID CONFUSION WITH POINTERS:
	  
	1. Never forget to initialize pointers. This is a simple rule, but it is very confusing when a pointer uses old values.
	
	2. Using array syntax with pointers can be a lot clearer than pointer syntax. This is especially true of multidimensional arrays and array spaces.
	
	3. Be painfully clear when using pointer arithmetic. Using shortcut arithmetic with dereferencing can be very confusing, as we see in the examples above.
	
	4. When using memory allocation, always use the most flexible and meaningful expressions. Calling malloc(16) is not very expressive, but using malloc( 4 * sizeof(int) ) is much more informative.
	 
	  
    
