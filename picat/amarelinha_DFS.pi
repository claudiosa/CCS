/*
By CCS
Busca em Profundidade com Prolog
	Onde a posicao inicial era: b,a,c,_,_,_,_ 
	 A posicao final era: _,_,_,_,c,a,b
	 Total de estados: 29
	 Total de movimentos: 28
	 T1: 24.480552 	 T2: 24.481631  msec
	 Tempo total: 0.0010792490  msec
	true.

	Busca em Largura OTIMO com Prolog
	 A posicao final era: _,_,_,_,c,a,b
	 Total de estados: 9
	 Total de movimentos: 8
	 T1: 2.290018 	 T2: 24.449603  msec
	 Tempo total: 22.1595845060  msec
 ======================
*/

import datetime.

/* pontos iniciais e finais do problema */
index(-)
pt_origem(  [  b ,  a ,  c , o , o , o , o ]  ).

index(-)
pt_destino([o,o,o,o,c,b,a] ).


/* movimentos permitidos  ===> veja o diagrama*/
/*
      X2        X5
    /    \    /    \
  X1       X4       X7
   \     /    \     /
    X3           X6
*/
% means: X2 <--> X4 
move( [ X1,X2,X3,X4,X5,X6,X7 ]  , L) ?=> 
	printf("\t 1"), 
	((X2 == o, X4 !=o) ;  (X4 == o, X2 != o)), 
	L = [ X1,X4,X3,X2,X5,X6,X7 ]. 
	
move( [ X1,X2,X3,X4,X5,X6,X7 ] , L) ?=> 
	printf("\t 2"), 
	((X3 == o, X4 !=o) ;  (X4 == o, X3 != o)), 
	L =  [ X1,X2,X4,X3,X5,X6,X7 ] .
	
move( [ X1,X2,X3,X4,X5,X6,X7 ] , L) ?=> 
	printf("\t 3"), 
       	(X2 == o, X1 !=o),
	%%%  (X1 == o, X2 != o)), 
       	L = [ X2,X1,X3,X4,X5,X6,X7 ] .
       
move( [ X1,X2,X3,X4,X5,X6,X7 ], L) ?=>  
	printf("\t 4"), 
	(X3 == o, X1 != o),
       	L = [ X3,X2,X1,X4,X5,X6,X7 ].

move( [ X1,X2,X3,X4,X5,X6,X7 ],  L) ?=>  
	printf("\t 5"), 
	((X6 == o, X4 !=o) ;  (X4 == o, X6 != o)), 
	L =  [ X1,X2,X3,X6,X5,X4,X7 ] .

move( [ X1,X2,X3,X4,X5,X6,X7 ] , L) ?=> 
	printf("\t 6"), 
	((X5 == o, X4 !=o) ;  (X4 == o, X5 != o)), 
        	L =  [ X1,X2,X3,X5,X4,X6,X7 ].
			
move( [ X1,X2,X3,X4,X5,X6,X7 ], L) ?=> 
	printf("\t 7"), 
	(X5 == o, X7 !=o)  ,
	%%; (X7 == o, X5 != o)), 
	L =  [ X1,X2,X3,X4,X7,X6,X5] .
 
 move( [ X1,X2,X3,X4,X5,X6,X7 ]  , L) => 
	 printf("\t 8"), 
      	%((X6 == o, X7 !=o) ; 
      	 (X7 == o, X6 != o), 
         	 L =  [X1,X2,X3,X4,X5,X7,X6].

move( _ , _) => 
         printf("\n NONE RULES WERE MATCHED  -- Houston problem").

main  ?=>  
    pt_origem(X),    %%%write([X]),
    pt_destino(Y),
    T1 = current_time(),
     time(busca_DFS( [X] , Solucao)), %%% CPU TIME
     T2 = current_time(), 
    /* X  é o nó inicial, logo entra na lista inicial */

    %%Sol_invertida = reverse(  Solucao ), %% OR
    reverse_2(Solucao, Sol_invertida),
    write_L(Sol_invertida),
    length(Solucao) = Total,
    Num_Movts := (Total -1),
   % T_CPU :=T2-T1,
    printf("\n Initial Position (state): %w ", X),
    printf("\n Final  Position (state): %w", Y),
    printf("\n Total of states: %d", Total), 
    printf("\n Total of moviments: %w", Num_Movts),
    printf("\n CPU TIME INIC: %w  FIM %w",     T1, T2),
    printf(" \n =========================================\n ")
    .

main => nl, write('No solution in the model  ... Houston we have a trouble!!!!' ) .

/*************************************************************/

%% cond. de parada.... o nó corrente é o desejado
busca_DFS( [ No_corrente | Caminho] , L) ?=>
           pt_destino(No_final),
%       the halting conditions
	   No_corrente == No_final,
 %       printf(" \n  == TESTE de PARADA passou   ==  "),
	   L = [ No_corrente | Caminho ],
	   printf(" \n PARADA ....: OK"),
	   write(L). 

busca_DFS(  [Nodo | Caminho], Solucao) =>
            move(Nodo , Novo_nodo), 
            not( member(Novo_nodo, [Nodo|Caminho]) ),
           %printf(" \n novo %w %w %w", Novo_nodo, Nodo, Caminho),
           busca_DFS(  [Novo_nodo , Nodo | Caminho ] , Solucao).

/*************************************************************/
/*
   X2    X5
X1    X4    X7
   X3    X6
*/
/************************************************************/
w_amarelinha( [ X1,X2,X3,X4,X5,X6,X7 ] ) ?=>
       write(' ') , write(X2), write('   ' ) , write(X5), nl,
       write(X1), write('   ' ) , write(X4),  write('  ') , write(X7) , nl, 
       write(' ' ), write(X3), write('   ' ) , write(X6).

w_amarelinha(  _ )   => printf("\n  ===================\n").   
 
 write_L([])  ?=> true.
 write_L([X|L]) =>  w_amarelinha( X ), nl, nl, write_L(L).
					  					  
/***********************************************************/

reverse_2([],R) => R=[].
reverse_2([A|B], Inverted) => reverse_2(B, X),
                                                 append(X, [A], Inverted).
/***********************************************************/                                                 