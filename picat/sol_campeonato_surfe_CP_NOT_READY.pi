/*
Campeonato de Surf do RACHA-CUCA INCOMPLETO

para rodar: $ picat  sol_campeonato_surf_CP.pi
*/
import cp.
main => 
       modelo.
/*       Lista = 
[
 [Cor_1, Surf_1, Praia_1, Tam_1, Gent_1, Rank_1] , %%% SURFISTA 1
 [Cor_2, Surf_2, Praia_2, Tam_2, Gent_2, Rank_2] ,
 [Cor_3, Surf_3, Praia_3, Tam_3, Gent_3, Rank_3] ,
 [Cor_4, Surf_4, Praia_4, Tam_4, Gent_4, Rank_4] ,
 [Cor_5, Surf_5, Praia_5, Tam_5, Gent_5, Rank_5]  %%% SURFISTA 5
],  
    % modelo( Lista  ),
     %imprime( Lista ),
*/     
  	 
%main => nl, 
%       printf("\n==================================================== \n"). 
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% AQUI COMEÇA O PROGRAMA ....
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

modelo =>
     N=5,   
     printf("\n ....."),  
	%%%%%%%%%%%%% LISTA %%%%%%%%%%%%%
% NOMES
Nomes = [Surf_1, Surf_2, Surf_3, Surf_4, Surf_5],
Nomes_Surfistas = new_map([flavio=1, fernando=2, igor=3, rogerio=4, tomas=5]),
Nomes :: 1..N,
%Vars :: Exp: This predicate restricts the domain or domains of V ars to Exp. V ars can be either a single variable, a list of variables, or an array of variables. For integer-domain variables, Exp must result in a list of integer values. For real-domain variables for the mip module, Exp must be an interval in the form L..U, where L and U are real values.
%Domain variables, when being created, are usually represented internally by using intervals. An interval turns to a bit vector when a hole occurs in the interval. The following built-in predicate can be used to reset the range or access the current range.

%%%%%%%%%%%%% TODAS Cor_ES %%%%%%%%%%%%%
Cores = [Cor_1, Cor_2, Cor_3, Cor_4, Cor_5],
Nome_Cores = new_map([amarela=1, azul=2, branca=3, verde=4, vermelha=5]),
Cores :: 1..N,
%%%%%%%%%%%%%%%%%%%

all_different(Cores),
all_different(Nomes),

%COMPLETAR AQUI'

%%% regras aqui ...
get(Nome_Cores, amarela) = X, 
X #!= Cor_1,
get(Nomes_Surfistas, igor)  = Y ,
Y #= Surf_1, 
%map_to_list(Nomes_Surfistas) = PairsList,
%printf("\n PAIRLIST : %w", PairsList),
%index_do_mapa(Nomes_Surfistas, igor) #= Surf_1,

%printf("\n Cores : %w \n %w", Cores, Nome_Cores),
solve([Nomes++Cores]),
printf("\n Nomes: %w \n Cores: %w", Nomes, Cores).


index_do_mapa(Mapa, Chave) = R  =>
       %keys(Mapa) = Lista_Chaves,
        %printf("\n CHAVES %w", Lista_Chaves),
       values(Mapa) = Lista_Valores,
       printf("\n Valores %w", Lista_Valores),
       get(Mapa, Chave) = Valor,
       printf("\n Valor %w", [Valor]),
      /*
       if not(member(Valor,Lista_Valores))  then
           printf("\n Erro de chave no mapa"),
          exit()
       end,
       */
       R = to_int(Valor).
           
               



/*


%%%%%%%%%%%%% REGRAS  que envolvam APENAS CORES %%%%%%%%%%%%%

%% EXEMPLO
 Cor_1==azul,

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%% TODOS NOMES %%%%%%%%%%%%%

surf(Surf_1),
surf(Surf_2),
surf(Surf_3),
surf(Surf_4),
surf(Surf_5),
alldifferent(),

%%%%%%%%%%%%% REGRAS  que envolvam APENAS CORES + NOMES %%%%%%%%%%%%%

%% EXEMPLO
 (Surf_2==igor, Cor_3==verde),


%%% ALUNO ... voce aqui ...
%%%% NADA DAQUI PODE SER UMA CONTRADICAO COM O QUE FOI PREVIAMENTE DEFINIDO em regras anteriores
%%%%%%%%%%%%% TODAS PRAIAS %%%%%%%%%%%%%

praia(Praia_1),
praia(Praia_2),
praia(Praia_3),
praia(Praia_4),
praia(Praia_5),
       



%% EXEMPLO
 
 Praia_3 == maresias, 
 Cor_5==branca,
 Surf_5==fernando, 
%%%% NADA DAQUI PODE SER UMA CONTRADICAO COM O QUE FOI PREVIAMENTE DEFINIDO em regras anteriores

%%%%%%%%%%%% TODOS TAMANHOS DAS PRANCHAS %%%%%%%%%%%%%

tam(Tam_1),
tam(Tam_2),
tam(Tam_3),
tam(Tam_4),
tam(Tam_5),
alldifferent([Tam_1, Tam_2, Tam_3, Tam_4, Tam_5]),

%%%%%%%%%%%%% REGRAS  OBVIAS %%%%%%%%%%%%%

%%%%%%%11 O surfita da prancha de 6'0" está na quinta posição.

(Tam_5 == '6_0'),%%% ATENCAO NOS APOSTROFOS
%%%%%%%%%%%%% REGRAS  que envolvam APENAS CORES + NOMES + PRAIAS + TAMANHO %%%%%%%%%%%%%

%% EXEMPLO
( Tam_1 == '5_7' ) , %%% ATENCAO NOS APOSTROFOS
 %%%% NADA DAQUI PODE SER UMA CONTRADICAO
 Praia_3 == maresias, 
 Cor_4==amarela,
 Surf_5==fernando, 


%%%%%%%%%%%% GENTÍLICO %%%%%%%%%%%%%
%%%% EM NENHUM MOMENTO anterior (ACIM) PODIA APARECER REGRAS com RANK + GENT 
gent(Gent_1),
gent(Gent_2),
gent(Gent_3),
gent(Gent_4),
gent(Gent_5),
alldifferent([Gent_1, Gent_2, Gent_3, Gent_4, Gent_5]),

%%%%%%%%%%%%% REGRAS  que envolvam APENAS CORES + NOMES + PRAIAS + TAMANHO + GENTILICO %%%%%%%%%%%%%

%%%%%%%12 O Gaúcho está na Quarta posição.

(Gent_4==gaucho),

%%%% NADA DAQUI PODE SER UMA CONTRADICAO COM O QUE FOI PREVIAMENTE DEFINIDO em regras anteriores

(Gent_2==paulista),
( Tam_4 == '5_11' ) , %%% ATENCAO NOS APOSTROFOS
 %%%% NADA DAQUI PODE SER UMA CONTRADICAO
 Praia_3 == maresias, 
 Cor_4==amarela,
 Surf_5==fernando, 

%%%% NADA DAQUI PODE SER UMA CONTRADICAO COM O QUE FOI PREVIAMENTE DEFINIDO

	%%%%%%%%%%%%% RANKING %%%%%%%%%%%%%
%%%% EM NENHUM MOMENTO anterior (ACIM) PODIA APARECER REGRAS com RANK 
rank(Rank_1),
rank(Rank_2),
rank(Rank_3),
rank(Rank_4),
rank(Rank_5),
alldifferent([Rank_1, Rank_2, Rank_3, Rank_4, Rank_5]),

%%%% REGRAS  que envolvam  CORES + NOMES + PRAIAS + TAMANHO + GENTILICO + RANK %%%%%%%%%%%

%%%%%%%16 O surfista que está no Quinto lugar do ranking está na quarta posição.

 ( Rank_4==quin_5 ),
(Gent_2==paulista),
( Tam_4 == '5_11' ) , %%% ATENCAO NOS APOSTROFOS
 Praia_2 == itaguare, 
 Cor_4==amarela,
 Surf_5==fernando, 
 Rank_3== oit_8 , 
%%%% NADA DAQUI PODE SER UMA CONTRADICAO COM O QUE FOI PREVIAMENTE DEFINIDO em regras anteriores 

 
 NESTE PONTO TODAS AS VARIAVEIS DOS FATOS FORAM INSTANCIADAS ...
 ASSIM falta apenas ir construindo as regras
 de acordo com o texto
 
 */

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

%% quase terminado 
%printf("\n==> Atingiu o Final do Modelo : UFA !!!! =====\n"). 
 	 
/** quando estiver imprimindo a mensagem acima e esta ... comente esta 	 
modelo(_) =>	 
   printf("\n==> Inconsistencia no MODELO passo anterior: REVISE TODA REGRA <== \n"). 
**/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
imprime([]) ?=> true. 
imprime([[Cor_, Surf_, Praia_, Tam_, Gent_, Rank_]|T]) => 
       printf("COR: %w || Surfista: %w || Praia: %w || Tam: %w || Natural: %w || Rank: %w\n" , 
       Cor_, Surf_, Praia_, Tam_, Gent_, Rank_),
        %%%%%writeln([Cor_, Surf_, Praia_, Tam_, Gent_, Rank_]),
        imprime(T).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%% BANCO DE DADOS ou FATOS %%%%%%%%%%%%%

	% Cores


	% PRAIA
index(-)
praia(areado).
praia(brava).
praia(itaguare).
praia(itamambuca).
praia(maresias).

	% TAMANHO
index(-)
tam('5_6').
tam('5_7').
tam('5_8').
tam('5_11').
tam('6_0').

	% GENTILICO
index(-)
gent(gaucho).
gent(baiano).
gent(fluminense).
gent(mineiro).
gent(paulista).

	% RANKING
index(-)
rank(prim_1).
rank(seg_2).
rank(terc_3).
rank(quin_5).
rank(oit_8).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
