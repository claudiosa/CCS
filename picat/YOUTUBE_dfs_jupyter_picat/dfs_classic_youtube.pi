%%picat
%%%%%%%%%%%%%%%%%% CCS
import util.
import ordset.
%%% 'import' must appear before all definitions.
/*
Grafo orientado ciclico - NAO EH UM DAG
       1
      /|\ 
     / | \
    /  |  \
   /   |   \
->2    3    4
 |\    |   /|
|  \   |  / |
|   \  | /  | 
|      5    |
|     / \  |
|    /   \|
|   /     7----> 1
|  /     (volta ao 1) 
| /
|/
6     
*/
index (-,-,-)
% arco(origem, destino, peso)
arc(1, 2, 1). 
arc(1, 3, 1). 
arc(1, 4, 1). 
arc(2, 5, 1). 
arc(2, 6, 1). 
arc(3, 5, 1). 
arc(4, 5, 1). 
arc(5, 6, 1). 
arc(5, 7, 1). 
arc(7, 1, 1). 

%%% varias maneiras para esta função -- exibindo o findall
%%% ilustra o findall e a biblioteca de conjuntos
all_nodes() = Set => 
    L1 = findall(X, arc(X,Y,_)),
    L2 = findall(Y, arc(X,Y,_)),
    new_ordset(L1) = Set_1,
    new_ordset(L2) = Set_2,
    Set = union(Set_1, Set_2).
/****************************************/

main ?=>
    Init_Node = 2, /*** ficou mais interessante */
    %%End_Node =  vira do foreach,
    
    Nodes = all_nodes(), %%%%
    
    foreach(End_Node in Nodes)
        printf("\n\n Início: %w\t  Fim: %w",Init_Node, End_Node),
        dfs_classico(Init_Node, End_Node, [Init_Node], [], Sol),
        printf("\n Caminho: %w", reverse(Sol[1]))
        %printf("\n Valores das Arestas: %w\n", reverse(Sol[2]))
    end,

    /**** Caminho com mais opcoes ****/
    Todas_SOL = findall(Um_Cam, (dfs_classico(Graph, 2, 6, [2], Sol), Um_Cam = Sol[1] )),
    printf("\n\n Caminhos de 2 a 6 (findall): %w", Todas_SOL ),
    
    printf("\n FIM do main: OK\n"). 

main => printf("\n Fim do main com falha em alguma busca ... NO SOLUTION").   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

dfs_classico(Node, End_Node, Visitados, Arestas, Sol) ?=>
    Node == End_Node,
    Sol = {Visitados, Arestas}. %%%% UM BOM "TRUQUE" ...
    %printf("\n Há um caminho (cláusula aterrada -- parada da recursão)").

dfs_classico(Node, End_Node, Partial_Caminho, Partial_Arestas, Sol) =>
    
        arc(Node, Prox, Valor),
        not membchk(Prox,Partial_Caminho), %%%% faster 
        %append([Prox], Partial_Caminho,  L_Visitados),
        %append([Aresta], Partial_Arestas, L_Arestas),
        % OU
        Visitados = [Prox] ++ Partial_Caminho,
        Arestas = [Valor] ++ Partial_Arestas,
    dfs_classico(Prox, End_Node, Visitados, Arestas, Sol).

/* =============================== */