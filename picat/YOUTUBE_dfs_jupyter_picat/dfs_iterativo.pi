%%picat
%%%%%%%%%%%%%%%%%% CCS
%% FUNCIONA BEM ....MAS PRECISA SER MELHORADO 
import util.
import ordset.
%%% 'import' must appear before all definitions.
/*
Grafo orientado ciclico - NAO EH UM DAG
       1
      /|\ 
     / | \
    /  |  \
   /   |   \
->2    3    4
 |\    |   /|
|  \   |  / |
|   \  | /  | 
|     5    |
|    / \  |
|   /   \|
|   /     7----------------> 1
|  /     (volta ao 1) 
| /
|/
6     
*/

grafo() = G =>
    G = [
        {1,[2,3,4]},
        {2,[5,6]},
        {3,[5]},
        {4,[5,7]},
        {5,[6,7]},
        {6,[]},
        {7,[1]}
    ].

/****************************************/

le_pilha(P) = first(P).
desempilha(Topo, [T|R], New) =>
    Topo = T,
    New = R.

empilha(Elemento, Pilha) = New =>
    New = [Elemento|Pilha].

/*
Valido ... também
desempilha(Pilha) = New =>
    length(Pilha) > 0,
    Pilha = [T|R], 
    New = (T, R).

desempilha(Pilha)  = New =>
    length(Pilha) == 0,
    New = (9999,[]).
*/
main ?=>
    
    Grafo = grafo(),
    Init_Node = 2, %%%% ficou mais interessante 
    %% End_Node =  vira do foreach,
    Nodes = all_nodes(Grafo), %%%%
    
    foreach(End_Node in Nodes)
        printf("\n\n Start Node: %w\t  End Node: %w",Init_Node, End_Node),
        Sol = dfs_iterative(Grafo, Init_Node, End_Node),
        printf("\n Caminho SOL: %w", Sol)
        %printf("\n Valores das Arestas: %w\n", reverse(Sol[2]))
    end,
    printf("\n NÓS FOLHAS: %w", all_leaves(Grafo)),
    printf("\n FIM do main: OK\n"). 

main => printf("\n Fim do main com falha em alguma busca ... NO SOLUTION").   
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

dfs_iterative(Grafo, Init_Node, End_Node) = Sol =>
    Pilha := [Init_Node],
    Visitados := [Init_Node],
    
    while (Pilha != [] ) do
       
       %(Topo, Pilha) := desempilha(Pilha) , NAO FUNCIONA devido a atribuição de TUPLAS
       desempilha(Topo, Pilha, Nova),
       printf("\n Desempilha: %w %w %w ",Topo, Pilha, Nova),
       Pilha := Nova,
       %    Visitados := [Topo] ++ Visitados  
       % Se era um noh aberto ... agora sera visitado ou fechado
       % end,
        if (Topo == End_Node) then
            printf("\n Pilha FINAL: %w ", Pilha),
            Visitados := diff_A_B( Visitados, Pilha ),
            Pilha := []   %% A parada mesmo
        else 
            next_nodes(Grafo, Topo, Vizinhos),
        
            %Reverse := reverse(Vizinhos),
            %% nos vizinhos do nó topo ... serão empilhados
            foreach (Next in Vizinhos)
                if ( not membchk(Next, Visitados) )  then 
                    Visitados := [Next] ++ Visitados,
                    Pilha := empilha(Next,Pilha)
                    %printf("\n Empilha: %w %w %w ", Next, Pilha, Nova),
                    %empilha(Next, Pilha, Nova ),  %%% CUIDAR IDEM OBS ACIMA            
                end %%% if interno
            end %%% foreach
        end, %%% if 
        printf("\n Pilha antes do While:  %w ", Pilha)
    end, %%% while      

    printf("\n Todos os NÓS Visitados: %w", reverse(Visitados)),
    
    %%%%% MELHORAR .....acima para eliminar estas verificacoes
    Visitados := achou_fim_com_nos_a_visitar(Visitados, End_Node),
    Nos_Folhas := all_leaves(Grafo),
    if (not membchk(End_Node, Nos_Folhas)) then 
        Visitados := diff_A_B(Visitados, Nos_Folhas)
    end,

    Sol = reverse(Visitados)
    %%%%%% Here
    % printf("\n Visitados: %w", Sol)
    ;  %% caso de falha acima
    printf("\n Entrada errada do Grafo:  %w", Visitados ).   
  
/* =============================== */

diff_A_B(A,B) = [X : X in A, not membchk(X, B)]. 
%%% diferença entre DUAS LISTAS  : A - B

%%% não testado
diff_SIMETRICA(A,B) = [X : X in A, not membchk(X, B)] ++ 
                      [Y : Y in B, not membchk(Y, A)].  


%%% TODOS NOS FOLHAS -- COOL
all_leaves(Grafo) = [Node : {Node, Neighbours} in Grafo,  Neighbours == [] ].
%%% varias maneiras para esta função -- exibindo o findall
all_nodes( Grafo ) = Nodes =>
    %Nodes = sort( [N : Termo in Grafo, {N, _} = Termo ]) . 
    Nodes = [N : Termo in Grafo, {N, _} = Termo ] .   

/*  TRUQUE é ... how to represent the Grafo and nodes */
/* algo veloz e simples */

next_nodes([ {Node, Neighbours} | _ ], N, R) ?=> 
    N == Node, 
    R = Neighbours.
    
next_nodes([ _ | Grafo], Node, Neighbours) => 
        next_nodes(Grafo, Node, Neighbours).


%%% MELHORAR ISTO ......
achou_fim_com_nos_a_visitar(Visitados, End_Node) = R =>
    nth(Index,Visitados,End_Node), 
    R = slice(Visitados,Index,Visitados.length).
    
/*****************************************************************************/
