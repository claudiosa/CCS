"NP-complete problems arise in diverse domains: Boolean

logic, graphs, arithmetic, network design, sets and
partitions, storage and retrieval, sequencing and scheduling,
mathematical programming, algebra and number theory, games
and puzzles, automata and language theory, program
optimization, biology, chemistry, physics, and more."
The book "Introduction to Algorithms' (Third Edition) by T. H.
Cormen, C. E. Leiserson, R. L. Rivest and C. Stein lists
eight examples of NP-complete problems. This is a collection
of programs in Picat for these problems. All of these programs
use the sat module, which outperforms CP and MIP for most
of the problems.



SAT

The SAT problem is the first problem that was shown to be
NP-complete. Given a Boolean formula that is composed of Boolean
variables, connectives, and parentheses, the problem is to
determine if the formula is satisfiable. If the formula is
satisfiable, it finds an assignment for the variables that makes
the formula satisfiable; otherwise, it reports "unsatisfiable".

The following gives an example instance of SAT encoded in Picat.
A Boolean variable is an integer-domain variable with the domain
[0,1], and the following connectives are provided:
#~ (not), #/\ (and), #^ (xor), #\/ (or), #=>(imply), #<=> (equiv).



import sat.

main =>
   Vars = [X1,X2,X3,X4],
   Vars :: 0..1,
   ((X1 #=> X2) #\/ #~ ((#~X1 #<=> X3) #\/ X4)) #/\ #~X2,
   solve(Vars),
   println(Vars).

CLIQUE

A clique in an undirected graph G = (V,E) is a subset V' of
V, where each pair of vertices is connected by an edge in E.
The clique problem is the optimization problem of finding a
clique of maximum size in the graph.

In the following program, a Boolean variable is used for each
vertex to indicate if the vertex is included in a maximum
clique: it is included if the value is 1, and it is not if
the value is 0.


import sat.

main =>
    G = graph(),
    N = len(G),
    Vars = new_list(N),
    Vars :: 0..1,
    foreach (U in 1..N-1, V in U+1..N)
       Vars[U] #/\ Vars[V] #=> G[U,V]
    end,
    solve($[max(sum(Vars))],Vars),
    print(Vars).

graph = 
    {{0,1,0,0,1,0},
     {1,0,1,0,1,0},
     {0,1,0,1,0,0},
     {0,0,1,0,1,1},
     {1,1,0,1,0,0},
     {0,0,0,1,0,0}}.
    

VERTEX-COVER

A vertex cover of an undirected graph G = (V,E) is a subset
V' of V such that if (u,v) is in E, then u in V' or v in V'
(or both). The vertex-cover problem is the optimization
problem of finding a smallest vertex cover.


import sat.

main =>
    G = graph(),
    N = len(G),
    Vars = new_list(N),
    Vars :: 0..1,
    foreach (U in 1..N-1, V in U+1..N)
       if G[U,V] == 1 then
           Vars[U] #\/ Vars[V]
       end
    end,
    solve($[min(sum(Vars))],Vars),
    print(Vars).

graph = 
    {{0,1,0,0,1,0},
     {1,0,1,0,1,0},
     {0,1,0,1,0,0},
     {0,0,1,0,1,1},
     {1,1,0,1,0,0},
     {0,0,0,1,0,0}}.

HAM-CYCLE

A Hamiltonian cycle of an undirected graph G = (V,E) is a
simple cycle that contains each vertex in V. The Hamiltonian-
cycle problem asks if a graph G has a Hamiltonian cycle. The
traveling-salesman problem (TSP) is a closed related problem,
which finds a tour with the minimum total cost.

The following program encodes one instance of the problem.
A domain variable is used for each vertex in the graph, where
the domain is a set of adjacent vertices. The global constraint
circuit enforces that an assignment for the
variables forms a Hamiltonian cycle. A Picat program for the
TSP can be found at:

http://picat-lang.org/picatbook2015/codes/ch7/tsp_sat.pi


import sat.

main =>
    Vars = [V1,V2,V3,V4,V5,V6],
    V1 :: [2,5,6],
    V2 :: [1,3,6],
    V3 :: [2,4,6],
    V4 :: [3,5,6],
    V5 :: [1,4,6],
    V6 :: [1,2,3,4,5],
    circuit(Vars),
    solve(Vars),
    println(Vars).

SUBSET-SUM

Given a finite set S of positive integers and an integer
target, the subset-sum problem is to find a subset of
S whose elements sum to the target.

In the following program, a Boolean variable is used for
each element in the given set that indicates if the element
is included in the subset.


import sat.

main =>
    S = [1,2,7,14,49,98,343,686,2409,2793,16808,17206,117705,117993],
    T = 138457,
    N = len(S),
    Vars = new_list(N),
    Vars :: 0..1,
    sum([B*Elm : {B,Elm} in zip(Vars,S)]) #= T,
    solve(Vars),
    println(Vars).



