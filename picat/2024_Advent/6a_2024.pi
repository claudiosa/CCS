
import util.

main([File]) =>
    InputLines = read_file_lines(File),
    NumRows = length(InputLines),
    NumCols = length(first(InputLines)),
    Array2D = new_array(NumRows, NumCols),
    CurrentRow = 1,
    List_ALL := [],
    foreach(Line in InputLines)
        Array2D[CurrentRow] = to_array(Line),
        List_ALL := List_ALL ++ [Line],
        CurrentRow := CurrentRow + 1
    end,
    printf("\n MAP, GRID = Array2D: %w\n", Array2D),
    [I,J] = find_robot(Array2D),
    printf("\n Initial Position Robot: [%w %w]", I,J),
   %%% 
   % path((I,J), Array2D, 0, {Steps, Grid}),
   %%%
    printf("\n Steps: %w\n Grid %w", Steps, Grid),
    printf("\n THE END").

find_robot(M) = R =>
    [N_Rows, N_Cols] = [M.length, M[1].length],
    X := 0, Y := 0,
    foreach(I in 1..N_Rows, J in 1..N_Cols)
        Cel = M[I,J],
        if ((Cel == '>') || (Cel == '<') || (Cel == '^') || (Cel == 'v')) then
            X := I,
            Y := J
        end
    end,
    if (var(X) || var(Y)) then
        printf("The robot was not found .... ")
    end,
    R = [X,Y].

path((I,J), M, Steps, R) ?=>
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (
        (I+1 > N_Rows && M[I,J] == 'v');
        (I-1 < 1 && M[I,J] == '^');
        (J+1 > N_Cols && M[I,J] == '>');
        (J-1 < 1 && M[I,J] == '<')
    ),
    M[I,J] = '*', /**** EXIT *****/
    D = Steps + 1,
    printf("\n Total of Steps: %w", D),
    R = {D, M}.

path((I,J), M, Step, R) =>
    next_move((I,J), M, Next),
    Next = {(I_new, J_new), M2, D},
    Step2 = Step + D,
    path((I_new, J_new), M2, Step2, R).

next_move((I,J), M, R) ?=>
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == '>' && M[I,J+1] != '#' && (J+1) =< N_Cols),
    M[I,J] = 'x',
    M[I,J+1] = '>',
    R = {(I, J+1), M, 1}.

next_move((I,J), M, R) ?=>
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == '<' && M[I,J-1] != '#' && (J-1) >= 1),
    M[I,J] = 'x',
    M[I,J-1] = '<',
    R = {(I, J-1), M, 1}.

next_move((I,J), M, R) ?=>
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == 'v' && M[I+1,J] != '#' && (I+1) =< N_Rows),
    M[I,J] = 'x',
    M[I+1,J] = 'v',
    R = {(I+1, J), M, 1}.

next_move((I,J), M, R) ?=>
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == '^' && M[I-1,J] != '#' && (I-1) >= 1),
    M[I,J] = 'x',
    M[I-1,J] = '^',
    R = {(I-1, J), M, 1}.

next_move((I,J), M, R) ?=>
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == '>' && M[I,J+1] == '#'),
    M[I,J] = 'v',
    R = {(I,J), M, 0}.

next_move((I,J), M, R) ?=>
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == 'v' && M[I+1,J] == '#'),
    M[I,J] = '<',
    R = {(I,J), M, 0}.

next_move((I,J), M, R) ?=>
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == '<' && M[I,J-1] == '#'),
    M[I,J] = '^',
    R = {(I,J), M, 0}.

next_move((I,J), M, R) =>
    printf("\n Robot was in: [%w %w] Direction: %w", I, J, M[I,J]),
    printf("\n No movement neither .... ERROR"),
    R = {(I,J), M, 0}.


%% printing the GRID ....

print_map( M ) =>
    L = M.length,
    C = M[1].length,
     nl,
      foreach(I in 1  .. L)
        foreach(J in 1  ..  C)
         printf("%w " , M[I,J] )
        end,
        nl,
    end.   
   