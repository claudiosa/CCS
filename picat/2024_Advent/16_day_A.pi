%import os.
import util.
%import math.
import datetime.
import planner.

%% to stop the planner
final({[X,Y],[X_e,Y_e], [N_Rows,N_Cols], Final_Grid}) =>
    D := abs(X-X_e) + abs(Y-Y_e),
    (D == 0),
   

    printf("\nSolution Found!\n"),
    print_map(Final_Grid).

%final(_) => printf("\n ................ fail in final").

%%%%%%%%%%%%%%%%%% ACOES

%%% actions NON ROTATING -- up movement
% Move to UP
action({[X,Y],[X_e,Y_e], [N_Rows,N_Cols], Grid}, New_State, Action, Action_Cost) ?=>
    (X > 1, 
        Grid[X,Y] = '^', Grid[X-1,Y] != '#'), %% Verifica se há espaço livre acima
        % Grid[X-1,Y] == '.'
    Grid_TEMP = copy_term(Grid),
    Action_Cost = 1,              %% Define o custo da ação
    Action = '^',                 %% Direção para cima
    
    X_new := X-1,
    Y_new := Y,
    Grid_TEMP[X_new,Y_new] := '^',   %% Atualiza a nova posição do robô
  
    printf("===^==="),
    print_map(Grid_TEMP),
  
    %% Atualiza o novo estado
    New_State = {[X_new,Y_new],[X_e,Y_e],[N_Rows,N_Cols], Grid_TEMP}.

% Ação para mover para a direita -- move to right
% 
action({[X,Y],[X_e,Y_e], [N_Rows,N_Cols], Grid}, New_State, Action, Action_Cost) ?=>
   
    (Y < N_Cols, 
     Grid[X,Y] = '>', Grid[X,Y+1] != '#'),
    %%== '.'), %% Verifica se há espaço livre à direita
    Grid_TEMP = copy_term(Grid),
    
    Action_Cost = 1,              %% Define o custo da ação
    Action = '>',                 %% Direção para a direita
    
    X_new := X,
    Y_new := Y+1,
    Grid_TEMP[X_new,Y_new] := '>',   %% Atualiza a nova posição do robô
    %% Atualiza o novo estado
    New_State = {[X_new,Y_new],[X_e,Y_e],[N_Rows,N_Cols], Grid_TEMP}.

% Ação para mover para a esquerda -- move to left
action({[X,Y],[X_e,Y_e], [N_Rows,N_Cols], Grid}, New_State, Action, Action_Cost) ?=>
    (Y > 1 , 
    Grid[X,Y] = '<', Grid[X,Y-1] != '#'),
    % oR == '.'), %% Verifica se há espaço livre à esquerda
    Grid_TEMP = copy_term(Grid),
    
    Action_Cost = 1,              %% Define o custo da ação
    Action = '<',                 %% Direção para a esquerda - left
    
    X_new := X,
    Y_new := Y-1,
    Grid_TEMP[X_new,Y_new] := '<',   %% Atualiza a nova posição do robô
    %% Atualiza o novo estado
    New_State = {[X_new,Y_new],[X_e,Y_e],[N_Rows,N_Cols], Grid_TEMP}.

% Ação para mover para baixo
%% move to down
action({[X,Y],[X_e,Y_e], [N_Rows,N_Cols], Grid}, New_State, Action, Action_Cost) ?=>
   
    (X < N_Rows, 
        Grid[X,Y] = 'v', Grid[X+1,Y]  != '#'),
    % OR == '.' ), %% Verifica se há espaço livre abaixo
    Grid_TEMP = copy_term(Grid),
    
    Action_Cost = 1,              %% Define o custo da ação
    Action = 'v',                 %% Direção para baixo
    X_new := X+1,
    Y_new := Y,
    
    Grid_TEMP[X_new,Y_new] := 'v',   %% Atualiza a nova posição do robô
    %% Atualiza o novo estado
    New_State = {[X_new,Y_new],[X_e,Y_e],[N_Rows,N_Cols], Grid_TEMP}.

%%% actions WITH ROTATING
%% moving to down ... SO ROTATING
action({[X,Y],[X_e,Y_e], [N_Rows,N_Cols], Grid}, New_State, Action, Action_Cost) ?=>
 
    ( X < N_Rows, Y < N_Cols, Y > 1,
      Grid[X,Y] == 'v', (Grid[X+1,Y] == '#'; Grid[X+1,Y] == '.')),
      % Grid[X+1,Y] != '.'),
   
    Grid_TEMP = copy_term(Grid),
    
    if ( Grid[X,Y+1] == '.' ) then %% free to right
        Grid_TEMP[X,Y] := '>'
    elseif ( Grid[X,Y-1] == '.' ) then %% free to left
        Grid_TEMP[X,Y] := '<'
    end,
    Action_Cost = 1000,         %% Define o custo da ação
    Action = '@1',               %% Rotação como a direita de +90 (baixo)
    
    New_State = {[X,Y],[X_e,Y_e],[N_Rows,N_Cols], Grid_TEMP}.

% Ao mover para cima e encontrar um obstáculo, rotaciona 90 graus
%% to up and rotate to left or right
action({[X,Y],[X_e,Y_e], [N_Rows,N_Cols], Grid}, New_State, Action, Action_Cost) ?=>
  
    (X > 1 , Y > 1, Y < N_Cols, 
         Grid[X,Y] == '^', (Grid[X-1,Y] == '#' ; Grid[X-1,Y] == '.')),
        %Grid[X-1,Y] != '.'), 
        %
    Grid_TEMP = copy_term(Grid),
     
    if ( Grid[X,Y+1] == '.' ) then %% free to right
        Grid_TEMP[X,Y] := '>'
    elseif ( Grid[X,Y-1] == '.' ) then %% free to left
        Grid_TEMP[X,Y] := '<'
    end,
    Action_Cost = 1000,         %% Define o custo da ação
    Action = '@2',               %% Rotação como sentido horário de cima
 
    New_State = {[X,Y],[X_e,Y_e],[N_Rows,N_Cols], Grid_TEMP}.


% Ao mover para a direita e encontrar um obstáculo, 
%% to right and rotate to up or down
action({[X,Y],[X_e,Y_e], [N_Rows,N_Cols], Grid}, New_State, Action, Action_Cost) ?=>
    (Y < N_Cols,  X < N_Rows,  X > 1,
        Grid[X,Y] == '>' , (Grid[X,Y+1] == '#' ; Grid[X,Y+1] == '.') ),
    Grid_TEMP = copy_term(Grid),
   
    if ( Grid[X-1,Y] == '.' ) then %% free to up
        Grid_TEMP[X,Y] := '^'
    elseif ( Grid[X+1,Y] == '.' ) then  %%%free to down
        Grid_TEMP[X,Y] := 'v'
    end,
    Action_Cost = 1000,         %% Define o custo da ação
    Action = '@3',               %% Rotação como sentido horário de cima
 
    New_State = {[X,Y],[X_e,Y_e],[N_Rows,N_Cols], Grid_TEMP}.

% Ao mover para a esquerda e encontrar um obstáculo, 
%% to left and rotate to up or down
action({[X,Y],[X_e,Y_e], [N_Rows,N_Cols], Grid}, New_State, Action, Action_Cost) =>
    (Y < N_Cols,  X < N_Rows,  Y > 1,
        Grid[X,Y] == '<' , (Grid[X,Y-1] == '#'; Grid[X,Y-1] == '.')  ),
    Grid_TEMP = copy_term(Grid),
    
    if ( Grid[X-1,Y] == '.' ) then %% free to up
        Grid_TEMP[X,Y] := '^'
    elseif ( Grid[X+1,Y] == '.' ) then  %%%free to down
        Grid_TEMP[X,Y] := 'v'
    end,
    Action_Cost = 1000,         %% Define o custo da ação
    Action = '@4',               %% Rotação como sentido horário de cima
    
    New_State = {[X,Y],[X_e,Y_e],[N_Rows,N_Cols], Grid_TEMP}.
        
%% just inverting the direction
    /*
action({[X,Y],[X_e,Y_e], [N_Rows,N_Cols], Grid}, New_State, Action, Action_Cost) =>
    

    (Y < N_Cols,  X < N_Rows,  Y > 1, X > 1),
    
    Grid_TEMP = copy_term(Grid),
    
    if (Grid[X,Y] == '^', Grid[X,Y-1] == '#', Grid[X,Y+1] == '#' ) then
        %Grid_TEMP[X,Y] := '#',
        Grid_TEMP[X,Y] := 'v'  
    end,

    if (Grid[X,Y] == 'v', Grid[X,Y-1] == '#', Grid[X,Y+1] == '#') then
        %Grid_TEMP[X,Y] := '#',
        Grid_TEMP[X,Y] := '^'  
    end,

    if (Grid[X,Y] == '>', Grid[X-1,Y] == '#', Grid[X+1,Y] == '#') then
        Grid_TEMP[X,Y] := '<' 
    end,

    if (Grid[X,Y] == '<', Grid[X-1,Y] == '#', Grid[X+1,Y] == '#') then
        Grid_TEMP[X,Y] := '>' 
    end,

    Action_Cost = 1000,         %% Define o custo da ação
    Action = '@5',               %% Rotação como sentido horário de cima
 
    print_map(Grid_TEMP),
    New_State = {[X,Y],[X_e,Y_e],[N_Rows,N_Cols], Grid_TEMP}.
    %printf("ERROR\n").
*/
%%%%%%%%%%%%%%%%%%
main([File]) ?=>
%main ?=>    
    %File = "16_A_sample.txt",
    InputLines = read_file_lines(File),
    N_Rows = length(InputLines),
    N_Cols = length(first(InputLines)),

    /* to do not forget it */
    Grid_2D = new_array(N_Rows, N_Cols),
    CurrentRow := 1,
    foreach(Line in InputLines)
        Grid_2D[CurrentRow] = to_array(Line),
        CurrentRow := CurrentRow + 1
    end,
    [X_s,Y_s] = find_symbol(Grid_2D,'S'), %%% Initial position
    [X_e,Y_e] = find_symbol(Grid_2D,'E'), %%% Initial position
    Grid_2D[X_s,Y_s] := '^',     /* just to modified the robot symbol */
   % Grid_2D[X_e,Y_e] := '.',
  
    % OK ALSO print_map(InputLines),
    print_map(Grid_2D),
    Initial = {[X_s,Y_s], [X_e,Y_e], [N_Rows,N_Cols], Grid_2D },
    println(Initial),

   % Initial ....
    T1 = current_time(),
    time(best_plan( Initial , Plan, Cost)), %%% CPU TIME ===> FIRST ANSWER
    %time(best_plan_unbounded( Initial , Plan, Cost)), %%% CPU TIME
    %plan_unbounded(Initial, Plan, Cost),
    %time(best_plan_unbounded(Initial,10000,Plan,Cost)),
    T2 = current_time(), 
   
    printf("\n Plan:%w\n Steps: %w \t Cost: %w\n", Plan, length(Plan), Cost),
    printf("\n CPU TIME INIC: %w  FIM %w",     T1, T2),
    printf(" \n =========================================\n "),
    print("THE END").

main => println("NO").
%% printing the GRID ....

print_map( M ) =>
    L = M.length,
    C = M[1].length,
     nl,
      foreach(I in 1  .. L)
        foreach(J in 1  ..  C)
         printf("%w " , M[I,J] )
        end,
        nl
    end.   

count_char(M, C) = Count =>
    Count = sum([1 : I in 1..M.length, J in 1..M[I].length, M[I,J] == C]).

find_symbol(M, Symbol) = R =>
    [N_Rows, N_Cols] = [M.length, M[1].length],
    X := 0, 
    Y := 0,
    foreach(I in 1..N_Rows, J in 1..N_Cols)
        if member(M[I,J], [Symbol]) then
            X := I,
            Y := J
        end
    end,
    if (var(X) || var(Y)|| (X == 0 && Y == 0) ) then
        printf("The symbol  %w  was not found .... ", [Symbol])
    end,
    R = [X,Y].

/*
        ((Key == 1) -> R = true ; R = false ).   %%% FUNCAO RETORNA TRUE OU FALSE
        Picat> Key = 1, ((Key == 1) -> R = true ; R = false ).
    Key = 1
    R = true
    yes
 */    

get_next_move((I,J), M) = R =>
    Dir = M[I,J],
    if Dir == '>' && J+1 =< M[1].length && M[I,J+1] != '#' && M[I,J+1] != 'O' then
        R =  (I, J+1)
    elseif Dir == '<' && J-1 >= 1 && M[I,J-1] != '#' && M[I,J-1] != 'O' then
        R =  (I, J-1)
    elseif Dir == 'v' && I+1 =< M.length && M[I+1,J] != '#' && M[I+1,J] != 'O' then
        R =   (I+1, J)
    elseif Dir == '^' && I-1 >= 1 && M[I-1,J] != '#' && M[I-1,J] != 'O' then
        R =   (I-1, J)
    else
        R =  (0,0)
    end.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%