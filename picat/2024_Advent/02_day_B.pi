% https://adventofcode.com/2024/day/2, part1
import util.
import cp.


main([File]) =>
    %%% adatpted from HAKAN
    Lines = [Line.map(to_int): Line in read_file_lines(File).map(split)],
    Safe := 0,
    foreach(Line in Lines)
      Safe := safe(Line)  + Safe
    end,
    printf("\n Day 2 Part B Safe: %w" , Safe).

safe(Line) = R =>  
    
    N_Rows = Line.length,
 
   %%% Which the sequences are increasing(Temp[I]) || decreasing(Temp[I]
   if not (increasing(Line) || decreasing(Line)) then  %%% _strict ... 
   %if not (increasing_strict(Line) || decreasing_strict(Line)) then  %%% _strict ... 
          Sol := 0
        else
          Sol := 1
    end,
            
    printf("\n\n Line: %w \t Inc or decr: %w", Line,  Sol),
    %printf("...OK..."),   

%%% Which sequence are not respect the criteria of adjacencies    
    Diff = new_array( N_Rows-1),
    foreach(J in 1..(N_Rows-1))
         Diff[J] = abs((Line[J+1] - Line[J]))
        end,
        Bigger := max(Diff),
        Lowest := min(Diff),
        printf("\n Diff: %w \t B: %w \t L: %w", Diff, Bigger, Lowest  ),
        %IS MISSING TEST FOR ZERO ...
        if  (membchk(0, Diff)) then   %%% has zero
            Sol := Sol + 1
        end,

        if not ((Lowest >= 1) ) then %%% out of limit
            Sol := Sol + 1
        end ,
    
        if not ( (Bigger <= 3) ) then %%% out of limit 
            Sol := Sol + 1
        end ,


    %%% Evaluating Sol     
    if (Sol >= 1 && Sol < 2) then %% SAFE ... just increase_strict and decrease_strict perfect
        R = 1  
    elseif (Sol == 0) then %% ONE POSSIBILITY to change to safe
        R = 1
    else  
         R = 0
    end
    ,    printf("\n Sol: %w  => 1: Accept 0: NO  %w", Sol, R)     
    .


/*
cat> X = new_array(2,2), X :: 0..19, X[1,1] #=2, X[1,2] #= 11,X[2,1] #=2, X[2,2] #= 11, increasing(X[1]),  print(X).
{{2,11},{2,11}}X = {{2,11},{2,11}}
yes

Picat> X = new_array(2,2), X :: 0..19, X[1,1] #=12, X[1,2] #= 11,X[2,1] #=2, X[2,2] #= 11, increasing(X[1]),  print(X).

 Picat> X = new_array(2), X :: 0..9, X[1] #=2, X[2] #= 1, decreasing(X),  print(X).
{2,1}X = {2,1}
yes

*/