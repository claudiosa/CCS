
import util.

main([File]) =>
    InputLines = read_file_lines(File),
    NumRows = length(InputLines),
    NumCols = length(first(InputLines)),
    Array2D = new_array(NumRows, NumCols),
    CurrentRow = 1,
    List_ALL := [],
    foreach(Line in InputLines)
        Array2D[CurrentRow] = to_array(Line),
        List_ALL := List_ALL ++ [Line],
        CurrentRow := CurrentRow + 1
    end,
    print_map( Array2D),
    % printf("\n MAP, GRID = Array2D: %w\n", Array2D),
    [I,J] = find_robot(Array2D),
    printf("\n Initial Position Robot: [%w %w]", I,J),
    path((I,J), Array2D, 0, {Steps, Grid}),
    print_map(Grid),
    printf("\n All Steps: %w\t Number cells with 'x': %w\n", Steps, count_char(Grid,'x')),
    printf("\n THE END").

find_robot(M) = R =>
    [N_Rows, N_Cols] = [M.length, M[1].length],
    X := 0, Y := 0,
    foreach(I in 1..N_Rows, J in 1..N_Cols)
        Cel = M[I,J],
        if ((Cel == '>') || (Cel == '<') || (Cel == '^') || (Cel == 'v')) then
            X := I,
            Y := J
        end
    end,
    if (var(X) || var(Y)) then
        printf("The robot was not found .... ")
    end,
    R = [X,Y].

path((I,J), M, Steps, R) ?=>
    %println($path1=I=J),
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (
        (I+1 > N_Rows &&   M[I,J] == 'v');
        (I-1 < 1      &&   M[I,J] == '^');
        (J+1 > N_Cols &&   M[I,J] == '>');
        (J-1 < 1      &&   M[I,J] == '<')
    ),
    
    % M[I,J] := '*', /**** EXIT *****/
    M[I,J] := 'x', /**** EXITING CELL *****/ % hakank
    D := Steps + 1,
    %printf("\n Total of Steps: %w", D),
    %printf("\n I: %w \t J: %w", I,J),
    R = {D, M}.

path((I,J), M, Step_1, R) ?=>
    % println($path2=I=J),
    % print_map(M),
    next_move((I,J), M, Next),
    % println(next=Next),
    Next = {(I_new, J_new), M2, D},
    Step = Step_1 + D,
    path((I_new, J_new), M2, Step, R).

next_move((I,J), M, R) ?=>
    %println("testing >"),
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == '>' && M[I,J+1] != '#' && (J+1) =< N_Cols),
    M[I,J] := 'x',
    M[I,J+1] := '>',
    R = {(I, J+1), M, 1}.

next_move((I,J), M, R) ?=>
    %println("testing <"),
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == '<' && M[I,J-1] != '#' && (J-1) >= 1),
    M[I,J] := 'x',
    M[I,J-1] := '<',
    R = {(I, J-1), M, 1}.

next_move((I,J), M, R) ?=>
    %println("testing v"),
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == 'v' && M[I+1,J] != '#' && (I+1) =< N_Rows),
    M[I,J] := 'x',
    M[I+1,J] := 'v',
    R = {(I+1, J), M, 1}.

next_move((I,J), M, R) ?=>
    %println("testing ^"),
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == '^' && M[I-1,J] != '#' && (I-1) >= 1),
    M[I,J] := 'x',
    M[I-1,J] := '^',
    R = {(I-1, J), M, 1}.

next_move((I,J), M, R) ?=>
    %println("testing ^ 2"),
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == '>' && M[I,J+1] == '#'),
    M[I,J] := 'v',
    R = {(I,J), M, 0}.

next_move((I,J), M, R) ?=>
    %println("testing v 2"),
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == 'v' && M[I+1,J] == '#'),
    M[I,J] := '<',
    R = {(I,J), M, 0}.

next_move((I,J), M, R) ?=>
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == '<' && M[I,J-1] == '#'),
    M[I,J] := '^',
    R = {(I,J), M, 0}.

% hakank: added this
next_move((I,J), M, R) ?=>
    [N_Rows, N_Cols] = [M.length, M[1].length],
    (M[I,J] == '^' && M[I-1,J] == '#'),
    M[I,J] := '>',
    R = {(I,J), M, 0}.

next_move((I,J), M, R) =>
    printf("\n Robot was in: [%w %w] Direction: %w", I, J, M[I,J]),
    printf("\n No movement neither .... ERROR"),
    R = {(I,J), M, 0}.


%% printing the GRID ....

print_map( M ) =>
    L = M.length,
    C = M[1].length,
     nl,
      foreach(I in 1  .. L)
        foreach(J in 1  ..  C)
         printf("%w " , M[I,J] )
        end,
        nl,
    end.   
   
    count_char(M, C) = Count =>
        Count = sum([1 : I in 1..M.length, J in 1..M[I].length, M[I,J] == C]).



print_map_color(M) =>
        L = M.length,
        C = M[1].length,
        nl,
        foreach(I in 1..L)
            foreach(J in 1..C)
                Symbol = M[I,J],
                if Symbol == '#' then
                    printf("\u001b[31m#\u001b[0m ") % Vermelho para obst√°culos
                elseif Symbol == 'x' then
                    printf("\u001b[32mx\u001b[0m ") % Verde para passos
                else
                    printf("%w ", Symbol)
                end
            end,
            nl
        end.
