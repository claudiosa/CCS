% https://adventofcode.com/2024/day/2, part1
import util.
import cp.    %% CP VERSION


main([File]) =>
    %%% from HAKAN
    Lines = [Line.map(to_int): Line in read_file_lines(File).map(split)],
    Safe := 0,
    foreach(Line in Lines)
      Safe := safe(Line)  + Safe
    end,
    printf("\n All Safes: %w" , Safe).

safe(Line) = R =>  
    
    N_Rows = Line.length,
   % Upper = max(Line),
   % Lower = min(Line),
   
    Sol_1  :: 0..1,
    Sol_2  :: 0..1,
    Safe   :: 0..1,

   %%% Which the sequences are increasing(Temp[I]) || decreasing(Temp[I]
    if (increasing(Line) || decreasing(Line)) then  
          Sol_1 #= 1
        else
          Sol_1 #= 0
    end,
            
    %printf("\n Inc or decr: %w", Sol_1),
    %printf("...OK..."),   

%%% Which sequence are not respect the criteria of adjacencies    
    Diff = new_array( N_Rows-1),
    foreach(J in 1..(N_Rows-1))
         Diff[J] = abs((Line[J+1] - Line[J]))
        end,
        Bigger := max(Diff),
        Lowest := min(Diff),
        %IS MISSING TEST FOR ZERO ...
        if (Lowest >= 1 && Bigger =< 3 && not membchk(0, Diff)) then
                Sol_2 #= 1
            else
                Sol_2 #= 0
            end, 
     %   printf("\n  Diff: %w",  Diff),
     %   printf("\t less %w \t hight %w" , Lowest, Bigger ),
 
    %printf("\n How many OUT of these criteria: %w", Sol_2),
    %printf("...OK..."),   
  
    %%% COMBINING BOTH REQUIREMENTS 
    Safe #= ((Sol_1 #/\ Sol_2) #<=> 1) ,  
    solve(Safe),
    printf("\n Result of this line : %w" , Safe),
    R = Safe
    .


/*
cat> X = new_array(2,2), X :: 0..19, X[1,1] #=2, X[1,2] #= 11,X[2,1] #=2, X[2,2] #= 11, increasing(X[1]),  print(X).
{{2,11},{2,11}}X = {{2,11},{2,11}}
yes

Picat> X = new_array(2,2), X :: 0..19, X[1,1] #=12, X[1,2] #= 11,X[2,1] #=2, X[2,2] #= 11, increasing(X[1]),  print(X).

 Picat> X = new_array(2), X :: 0..9, X[1] #=2, X[2] #= 1, decreasing(X),  print(X).
{2,1}X = {2,1}
yes

*/
