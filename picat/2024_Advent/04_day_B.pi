% DAY 04 - B
import util.

main([File]) =>
    % Reading from file
    InputLines = read_file_lines(File),
    
    NumRows = length(InputLines),
    NumCols = length(first(InputLines)),
    %printf("\n Formato de INPUTLINES: %w \n", InputLines),
    % Exibe dimensÃµes da matriz
    printf("\n Dimensions: Rows = %d, Columns = %d\n", NumRows, NumCols),

    Inp_X = InputLines.map(to_lowercase),
    %printf("\n Inp_X\n %w", Inp_X),

    %Inp_X_transp = Inp_X.transpose(),
    %printf("\n Input_transpose\n %w", Inp_X_transp),
    %%%print(Inp_X[2,2]),nl, usefull later
    %Matrix2D = new_array(NumRows, NumCols),

    CurrentRow := 1,  % VariÃ¡vel para rastrear a linha atual

    % Preenche a matriz bidimensional
    XMAS := 0,
 
    foreach(I in 1..NumRows, J in 1..NumCols)  %%%% DIAGONAL RIGHT => LEFT-
    % OR  if( I>=2 && J>=2 && (I+1 =< NumRows) && (J+1=< NumCols) && Inp_X[I,J] == 'a') then
    if ( I>1 && J>1 && (I < NumRows) && (J < NumCols) && Inp_X[I,J] == 'a') then
  
           A = Inp_X[I-1, J-1],   
           B = Inp_X[I+1, J+1],
           C = Inp_X[I+1, J-1],
           D = Inp_X[I-1, J+1],

           if ( better(A,B) && better(C,D) ) then 
        % OR if (test_XaY(A,B)==true) && (test_XaY(C,D)==true) then 
            /*
                Pattern = [[Inp_X[I-1,J-1],          Inp_X[I-1,J+1]],
                                            Inp_X[I,J],     
                            [Inp_X[I+1,J-1],           Inp_X[I+1,J+1]]
                           ],
            */               
                Pattern = [[A,          D ],
                              Inp_X[I,J],     
                          [C,           B]],               
                %printf("\n %w %w %w %w Pattern:%w", A,B, C,D, Pattern),
                XMAS:= XMAS + 1    
            end,
        end,
    end, 

    printf("\n Final XMAS: %w\n", XMAS).    

/*
test_XaY(A,B) =
    (((A=='m', B=='s') || (A=='s', B=='m')), true ; false).
???
*/

test_XaY(A,B) = R =>
    if ((A=='m', B=='s') || (A=='s', B=='m'))  then 
        R = true
        else 
        R = false
        end.

better('m','s') ?=> true.
better('s','m') => true.    

/************************************************************************/