% DAY 04 - A
import util.

main([File]) =>
    % Reading from file
    InputLines = read_file_lines(File),
    
    NumRows = length(InputLines),
    NumCols = length(first(InputLines)),
    %printf("\n Formato de INPUTLINES: %w \n", InputLines),
    % Exibe dimensões da matriz
    printf("\n Dimensions: Rows = %d, Columns = %d\n", NumRows, NumCols),

    Inp_lower = InputLines.map(to_lowercase),
    printf("\n Inp_lower\n %w", Inp_lower),

    Inp_lower_transp = Inp_lower.transpose(),
    %printf("\n Input_transpose\n %w", Inp_lower_transp),
    %%%print(Inp_lower[2,2]),nl, usefull later

    Matrix2D = new_array(NumRows, NumCols),
    CurrentRow := 1,  % Variável para rastrear a linha atual

    % Preenche a matriz bidimensional
    XMAS := 0,
    foreach(Line in Inp_lower)
        %printf("\n%w: => %w", Line, qt01( to_string(Line)  ,"xmas") + qt02( to_string(Line)  ,"xmas") ),
        %printf(" OR => %w", qt01( to_string(Line),"XMAS")),
        XMAS := XMAS + qt01( to_string(Line),"xmas") + qt02( to_string(Line),"xmas") ,
        Matrix2D[CurrentRow] = to_array(Line),
        CurrentRow := CurrentRow + 1
    end,

    foreach(Line in Inp_lower_transp)  %%% Line from transpose ... vertical
        %printf(" OR => %w", qt01( to_string(Line),"XMAS")),
        XMAS := XMAS + qt01(to_string(Line), "xmas") + qt02( to_string(Line), "xmas") ,
    end,

    printf("\n 2. XMAS %w\n", XMAS),

    foreach(I in 1..NumRows, J in 1..NumCols)  %%%% DIAGONAL LEFT-> RIGHT
        if( I>=1 && J>=1 && (I+3 =< NumRows) && (J+3 =< NumCols)) then 
           Diag := [Inp_lower[I,J], Inp_lower[I+1,J+1], Inp_lower[I+2,J+2] , Inp_lower[I+3,J+3]],
           XMAS := XMAS + qt01( to_string(Diag),"xmas") + qt02( to_string(Diag),"xmas") ,
        end,   
    end, 

    printf("\n 3. XMAS %w\n", XMAS),
    foreach(I in 1..NumRows, J in 1..NumCols) %%%% DIAGONAL LEFT-> RIGHT of TRANSPOSE ....
        if( I>=1 && J>=1 && (I+3 =< NumRows) && (J+3 =< NumCols)) then 
        Diag2 := [Inp_lower_transp[I,J], Inp_lower_transp[I+1,J+1],Inp_lower_transp[I+2,J+2],Inp_lower_transp[I+3,J+3]],
        XMAS := XMAS + qt01(to_string(Diag2),"xmas") + qt02(to_string(Diag2),"xmas") ,
        end,   
    end, 
    printf("\n Final XMAS %w\n", XMAS).
%    print(Matrix2D).

%%% NORMAL normal quantity
    qt01(S,Sub_String) = R =>
        %to_string(Term) = String
        string(S),
        string(Sub_String),
        R = count_all(find(S, Sub_String,_,_));
        printf("\n S or Sub_String are not strings\n").
    
%%% REVERSE    quantity
    qt02(S,Sub_String) = R =>
            %to_string(Term) = String
            string(S),
            string(Sub_String),
            R = count_all(find(reverse(S), Sub_String,_,_));
            printf("\n S or Sub_String are not strings\n").
/************************************************************************/