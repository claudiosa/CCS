/*
cl('vetor_CP_01').
*/

import cp.


main => go.

go =>
   N = 10,
   Vector = new_array(N),  
   %Vector :: 1..N,
     
   printf("\n v ===> %w", index_test(Vector)),
   print_V(Vector).


   %L = findall(_, $graceful_graph(Graph, M,N,_Nodes,_Edges)),
   %writef("Number of solutions: %d\n", L.length).
   

index_test(V) = Ret =>

   %new_array
   V_aux = new_array(V.length),  
   V_aux  :: 1..V.length,
   Index  :: 1..V.length,
   MAX = V.length + 1,
   foreach(I in 1..1..V.length)
   %%, J in 1..1..V.length)
       %%printf("\t  %d" , I ),
       %%%V[I] #= Index 
       %SIndex #= 11 - I,
       V_aux[I] #=  V[MAX-I] 
       % #<=> I #!= Index 
       % I #!= Index
   end,

   all_different(V_aux),
  
   Vars = V_aux++V,

   %%%% append([V_aux],[Index],Vars),
   solve(Vars),
   printf("\n =============IN THE SOLVE ============="),
   print_V( V_aux ), nl,
   print_V( V ),
   printf("\n =======OUT of ===================")
   ,   
   Ret = V 
   .
 
print_V( V ) =>
 Size = V.length,  
  nl,
   foreach(I in 1  .. Size)
      printf("v[%d]:%w  ||" ,I, V[I] )
   end.
