%% TO RUN
% Picat> cl('graph_community').
% $ picat graph_community.pi 
module graph_community.
import dist_vertex.   %%% module CONEXION of extern NODES 
import util.

/*
main => go.

go =>
   
   K_com = 10 , %%% Number of Community
   Size_K = 5 , %% Size Community
   Graph = build_graph(Size_K, K_com),
   print_matrix( Graph ).
*/

build_graph(Size_K, K_com) = Res =>   

   Size =  K_com * Size_K , %% ALL NODES 
   N_Neigh = (Size_K - 1), %%% Neighbours -- connections
   Graph = new_array( Size, N_Neigh ),

   X2_CN = new_array(K_com), %% CENTER NODES of each communityt
   Extern_Nodes = new_array( Size ),
  % all_different(X1_Graph),
  
  % THE CENTRAL NODE ARE INITILIZED
  foreach(I in 1..K_com)
       X2_CN[I] = ((Size_K * I) - 4)
       %%% see the community topology
   end,

  rows(X2_CN) = L2,
  printf("\n CENTRAL NODES (L2): %w", L2),
%%% NEIGHBOURS OF CENTRAL NODE IN EACH COMMUNITY
  foreach(I in L2)
     (
       Graph[I, 1] = (I+1),
       Graph[I, 2] = (I+2),
       Graph[I, 3] = (I+3),
       Graph[I, 4] = (I+4)
     ) 
  end,

%%% NEIGHBOURS IN EACH COMMUNITY -- see the figure
 foreach(I in L2)
   ( %% left most corner 
      Graph[(I+1), 1] =  (I+2),
      Graph[(I+1), 2] =  I,
      Graph[(I+1), 3] =  (I+3), 

      Graph[(I+2), 1] =  (I+1),
      Graph[(I+2), 2] =  I,
      Graph[(I+2), 3] =  (I+4), 

      Graph[(I+3), 1] =  (I+1),
      Graph[(I+3), 2] =  I,
      Graph[(I+3), 3] =  (I+4), 
      
      %% right most corner 
      Graph[(I+4), 1] =  (I+2),
      Graph[(I+4), 2] =  I,
      Graph[(I+4), 3] =  (I+3) 
     ) 
   end,
 
 %%% module CONEXION of extern NODES 
 Extern_Nodes = dist_vertex(K_com, Size_K),      
 % printf("\n Dist Vertex -- Extern : %w", Extern_Nodes),

 foreach(I in 1..Size)
 %if( not( member(Extern_Nodes[I], L2)) ) then 
  if( Extern_Nodes[I] != I) then
  (
    Graph[I, 4] = Extern_Nodes[I]
  ) 
  end
 end,  
  %printf("\n Quantity of Extern Nodes (L3): %d", L3.length),

   Res = Graph.  
   
   %printf("\n Neighbours Central: %w", Graph),
   %printf("\n Central Nodes of each graph-5: %w", X2_CN),
   %print_matrix( Graph ).


%% increasing constraint
increasing(List, N) =>
  foreach(I in 2..N) 
  List[I-1] #=< List[I] 
  end.

print_matrix( M ) =>
  L = M.length,
  C = M[1].length,
  printf("\n \n NEIGHBOURS:\n     "),
  foreach(J in 1  .. C)
    printf(" : %d ", J)
  end,
  nl,
  foreach(I in 1  .. L)
   printf("NODE %d : ", I),
    foreach(J in 1  ..  C)
      printf("%d " , M[I,J] )
    %% printf("(%d,%d): %w " , I, J, M[I,J] ) -- OK
      end,
    nl
  end.   

%%%%%%%%%%%%%%%%%%%%%%%%%% AUX functions %%%%%%%%%%%%%%%%%%%%%%  
which_community(I, Size_K) = X =>
         X = round((I-1) div (Size_K))+1.

aux_vet_with_zero(N) = X =>
   X = new_array(N),
   foreach(I in 1 .. N)
    X[I] := 0
   end.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%