import datetime.
import util.
%% time( picat hamiltoniano_DFS.pi)
%% CAMINHO HAMILTONIANO: passar por todos nós 
%% UMA UNICA VEZ
/* NOS iniciais e finais do problema */
index(-)
destino( blumenau ).
%destino( brusque ).

index(-)
origem( joinville ).

%% MAPA da região do vale do Itajai
index(-,-)
arco(joinville, sao_bento)  .
arco(joinville, itajai)     .
arco(joinville, jaragua)     .
arco(joinville, luiz_alves)     .
arco(jaragua, sao_bento)    .
arco(jaragua, blumenau)     .
%%arco(sao_bento, blumenau)     .
arco(jaragua, luiz_alves)   .
arco(itajai, luiz_alves)    . 
arco(blumenau, luiz_alves)    . 
arco(blumenau, itajai)      .
arco(brusque, itajai)       .
arco(brusque, blumenau)     .

index(-) %% lista de todas cidade do mapa
as_cidades([brusque, blumenau, itajai, luiz_alves,
            jaragua, sao_bento,joinville ]).
%%% para facilitar uma parada

/* BI-DIRECIONALIDADE DOS ARCOS */
move_no(X,Y) ?=> arco(X,Y).
move_no(X,Y)  => arco(Y,X).
%move_no( _ , _) => 
%       printf("\n move_no: NONE RULES WERE MATCHED ").
/************************************************************/
main ?=>  
    %%%_ = statistics_all(), % inicializa todas estatísticas
    statistics(runtime,_), % faz uma marca do 1o. statistics
    statistics(backtracks, Backtracks1), % marca para o BACK
    origem(X),   
    destino(Y),
    %printf(" %w ", $current_time(H1,M1,S1)) ,
    
    busca_DFS( [X] , Solucao), %%% CPU TIME
    /* X  é o nó inicial, logo entra na lista inicial */

    %% Sol_invertida = reverse(  Solucao ),  OU
    reverse_2(Solucao, Sol_invertida),
    
    write_L( Sol_invertida ),
    length( Solucao ) = Total,
    
    printf("\n Cidade Inicial: %w ", X),
    printf("\n Cidade Final: %w", Y),
    printf("\n Total de cidades visitadas: %d", Total), 
    
    statistics(runtime, [T_Picat_ON, T_final]),
    statistics(backtracks, Backtracks2),
    T = (T_final) / 1000.0, %%% está em milisegundos
    printf("\n CPU time %f em SEGUNDOS ", T),
    printf("\n OVERALL PICAT CPU time %f em SEGUNDOS ", T_Picat_ON/1000.0),
    Backtracks = Backtracks2 - Backtracks1,
    printf("\n Backtrackings total %d ", Backtracks ),
        
    printf(" \n =========================================\n ")
    .

main => nl, write('... Houston we have a trouble!!!!' ) .

/*************************************************************/
%% cond. de parada.... o nó corrente é o desejado
busca_DFS( [ No_corrente | Caminho] , L_sol) ?=>

     %%% condicao de parada 1
     destino(No_final),
	   No_corrente == No_final,
     L_sol = [ No_corrente | Caminho ],
     %%% condicao de parada 2
     as_cidades(L_Todas_Cidades),
     %% TODAS CIDADES FORAM VISITADAS
	   length (L_sol) ==  length(L_Todas_Cidades),
     write(L_sol),
     printf(" \n UMA SOLUCAO ....: OK\n ==>"). 

busca_DFS(  [NoH | Caminho], Solucao) =>
           %%% explorar um novo movimento ou um novo noh
           move_no(NoH , Novo_NoH), 
           %% testar se este novo noh nao foi visitado ainda
           %% ou novo_NOH eh permitido
           not( member(Novo_NoH, [NoH|Caminho]) ),
           %printf(" \n novo %w %w %w", Novo_NoH, NoH, Caminho),
           busca_DFS(  [Novo_NoH , NoH | Caminho ] , Solucao).

/*************************************************************/
 write_L([])  ?=> true.
 write_L([X|L]) =>  printf("%w : ", X ),  write_L(L).
		  					  
/***********************************************************/
%% funcional
reverse_2([],R) => R=[].
reverse_2([A|B], Inverted) => reverse_2(B, X),
                              append(X, [A], Inverted).
/***********************************************************/                                                 

