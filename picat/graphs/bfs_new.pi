% BFS recursivo com funções
import util.
/*
Sample of BFS
  
       1
      / \
     2   3  -------
    / \ / \        \
   4   5   6       ------> 12  
  / \ /     \
 7   8       9
 |           |
 10         11

Expected Starting from 1: [1,2,3,4,5,6,12,7,8,9,10,11]

*/

graph(3) = [
        [1, [2, 3, 4]],
        [2, [5, 6]],
        [3, [7, 8, 9]],
        [4, [10, 11]],
        [5, [12]],
        [6, [13, 14]],
        [7, []],
        [8, [15]],
        [9, [16, 17]],
        [10, []],
        [11, [18]],
        [12, [19]],
        [13, [20]],
        [14, []],
        [15, []],
        [16, []],
        [17, []],
        [18, [21]],
        [19, []],
        [20, []],
        [21, []]
    ].

                            
main =>
        Graph = graph(3), 
        Start = 1, 
        End = 21,
        
% Teste 1: Caminho do nó 1 para o nó 21
% Caminho esperado: [1, 4, 11, 18, 21]

% Teste 2: Caminho do nó 1 para o nó 19
% Caminho esperado: [1, 2, 5, 12, 19]

% Teste 3: Caminho do nó 1 para o nó 15
% Caminho esperado: [1, 3, 8, 15]

        print(Graph),
        bfs(Graph, [Start], End, Result),  
    
        printf("\n Start: %w \t End: %w \n Visiting order %w\n", Start, End, Result),
        printf("\n Size: %w", len(Result)).
       
        
bfs(Graph, All_Paths, End, Result) ?=> 
    % , Node == End   
    Result = reverse([One : One in All_Paths, membchk(End,[One]) ]), !.

bfs(Graph, [[Node|Path]|Rest], End, Path) => 
    
    %%printf("\n Node: %w Path: %w", Node, Path ),
    expansion(Graph, [[Node|Path]|Rest], Paths_Expanded),

    printf("\n Top or Curr: %w Path %w\t Path: \t REST: %w ", Node,  Path, Rest),
    bfs(Graph, Rest, End ,TempPath),
    Path = Paths_Expanded ++ TempPath .

expansion(Graph, X [[]], Paths_Expanded), 
    (X == [[]] ; X==[]) ?=>  Paths_Expanded = [].

expansion(Graph, [[Node|Path]|Rest], Paths_Expanded) =>

    Neighbors = get_neighbors(Node, Graph),
    printf("\n Node: %w Neighbors: %w", Node, Neighbors ),
    %%% varias ramificacoes em Node .... branches
    NewPaths = [[N, Node|Path] : N in Neighbors, not member(N, Path)],
    
    expansion(Graph, [Rest],  TempPath),
    Paths_Expanded = NewPaths ++ TempPath.
/*

A construção [[N, Node|Path] : N in Neighbors] desempenha papel semelhante ao findall ao gerar todas as novas combinações de caminhos. Com essa abordagem, você deve obter o caminho mais curto corretamente, preservando o comportamento típico do BFS. 
*/

%%% FUNCTIONAL
%get_neighbors(Node, Graph) = Neighbors =>
    %Neighbors = {Second : [First, Second] in Graph, First == Node}.
%    [Neighbors] = [Second : [First, Second] in Graph, First == Node].

%%% take the NEIGHBOURS from NODE in Graph
get_neighbors(_,[]) = [].
get_neighbors(Node, [[Node, Neighbours] | _] ) = Neighbours.
get_neighbors(Node, [_ | Rest]) = get_neighbors(Node, Rest).

%%% PREDICATIVE    
get_neighbors(_Node, [], R) ?=> R = [].
get_neighbors(Node, [[First, Second]|Rest], R), First == Node ?=>
    R = Second, !.

get_neighbors(Node, [[First, Second]|Rest], R), First != Node =>
    get_neighbors(Node, Rest, R).


%%% BFS FUNCTIONAL ....
/*
bfs(Graph, [Node|Queue], End, Visited) = Result,  Node == End =>
    printf("\n Node: %w \t End: %w ", Node, End),
    Result =  reverse(Visited)++[End].

bfs(Graph, [Node|Queue], End, Visited) = Result,   membchk(Node, Visited) =>
    Result = bfs(Graph, Queue, End, Visited). % Nó já visitado, continue

bfs(Graph, [Node|Queue], End, Visited) = Result,  not( membchk(Node, Visited)) =>
        Neighbors = get_neighbors(Node, Graph),
        %get_neighbors(Node, Graph, Neighbors), 
        %printf("\n Node: %w Neighbors %w", Node, Neighbors),
        NewNodes = [N : N in Neighbors, not membchk(N, Visited), not membchk(N, Queue) ], % Filtra os já visitados
        %NewNodes = [N : member(N, Neighbors), not member(N, Visited),  not membchk(N, Queue) ], % Filtra os já visitados
        NewQueue = Queue ++ NewNodes, % Atualiza a fila
        Path = [Node|Visited],
        printf("\n Top or Curr: %w \t Queue: %w\t Path: %w ", Node, Queue, Path),
        Result = bfs(Graph, NewQueue, End, Path). % Adicione à lista visitada


bfs_search(Graph, [], _, _, []) ?=> true.
bfs_search(Graph, [EndNode | _], _, EndNode, Path) ?=> Path = [EndNode].
bfs_search(Graph, [Node | Rest], Visited, EndNode, Path) =>
        Neighbours = [N : N in get_neighbors( Node, Graph ), not membchk(N, Visited)],
        NewVisited = Visited ++ Neighbours,
        NewQueue = Rest ++ Neighbours,
        printf("\n Top or Curr: %w \t Queue: %w\t NewVisited: %w ", Node, NewQueue, NewVisited),
        bfs_search(Graph, NewQueue, NewVisited, EndNode, TempPath),
        printf("\n Back the right path: %w", TempPath),
        Path = [Node | TempPath].



OK
bfs(Graph, [Node|Queue], End, Visited) = Result =>
    printf("...\n"),
    printf("Node: %w \t Queue: %w \t End: %w\n  ", Node, Queue, End),

    %%%if Node in Visited then  PICAT has not in yet in if ...
    %% I would keep in separeted function clause
    %trace,
    if ( Node == End ) then
        printf("STOP: Node: %w  \t End: %w\n  ", Node, End),
        Result =  reverse(Visited)++[End]
    elseif  membchk(Node, Visited) then %%% Node already visited
       %printf("\n Node: %w Visited %w", Node, Visited),
        Result = bfs(Graph, Queue, End, Visited) % Nó já visitado, continue
    else
        %Neighbors = get_neighbors(Node, Graph),
        get_neighbors(Node, Graph, Neighbors), 
        %printf("\n Node: %w Neighbors %w", Node, Neighbors),
        NewNodes = [N : N in Neighbors, not membchk(N, Visited)], % Filtra os já visitados
        %NewNodes = [N : member(N, Neighbors), not member(N, Visited)], % Filtra os já visitados
        NewQueue = Queue ++ NewNodes, % Atualiza a fila
        Result = bfs(Graph, NewQueue, End, [Node|Visited]) % Adicione à lista visitada
    end.
*/
