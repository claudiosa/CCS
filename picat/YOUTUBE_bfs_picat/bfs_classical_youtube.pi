%% BFS by CCS - jan/2025
/*
Grafo orientado ciclico - NAO EH UM DAG
                     1
                    /|\ 
                   / | \
                 /  |   \
                /   |   \
            ->2    3    4
             |\    |   /|
            |  \   |  / |
            |   \  | /  | 
            |     5     |
            |     / \  |
            |    /   \|
            |   /     7----------------> 1
            |  /     (volta ao nó 1 - ciclo) 
            | /
            |/
            6 --------------> 3    (volta ao nó 3 - ciclo) 
*/
graph(1) = G =>
    G = [
        [1,[2,3,4]],
        [2,[5,6]],
        [3,[5]],
        [4,[5,7]],
        [5,[6,7]],
        [6,[3]],
        [7,[1]]
    ].

/*
Sample of BFS -- EH UM DAG
  
       1 ---------------
      / \               \
     2   3  -------      \
    / \ / \        \      \
   4   5   6       ------> 12  
  / \ /     \
 7   8       9
 |           |
 10         11

*/
     % Definindo um grafo simples
graph(2) = G =>
    G =  [
    [1, [2, 3, 12]],
    [2, [4, 5]],
    [3, [5, 6, 12]],
    [4, [5, 7]],
    [5, [8]],
    [6, [9]],
    [7, [10]],
    [8, []],
    [9, [11]],
    [10, []],
    [11, []],
    [12, []]
].


main =>

 % Testando o BFS Classico
    InitNode = 1,
    %% uma atribuição multi-valorada de Graphs
    Graphs = [ graph(1) , graph(2) ],  %%% uma lista de grafos=matriz de adjacencias
    Nodes = [ all_nodes( graph(1) ), all_nodes( graph(2) )], %% uma lista dos nos em cada grafo
   
    N_Graphs = Graphs.len,  %% total de Grafos

    %% ilustra o foreach e imprime o grafo
    foreach(I in 1..N_Graphs) 
        printf("\n Graph(%w): %w\n Nodes: %w", I,  Graphs[I], Nodes[I])
    end,     

    %%%% Apenas para CHAMAR TODOS os TESTES por aqui 

    foreach(I in 1..N_Graphs)  
        foreach(EndNode in Nodes[I])
            bfs_search(Graphs[I], [InitNode], [InitNode], EndNode, Sol),
            printf("\n\n INPUT DATA: graph(%w) ", I), 
            printf("\n Init Node:%w  End Node:%w  ", InitNode, EndNode),
            printf("\n Visiting order ('a transversal'): %w ", Sol),
            printf("\n The Shortest  Path: %w", 
                    reverse(get_path_F(EndNode, InitNode, Sol, Graphs[I])))
        end
    end,
 
    printf("\n End of main: OK\n").   

main => printf("\n End of main with fail ... NO SOLUTION").     

/*  
    EndNode = 8,
    printf("\n Start: %w\t  End: %w \t", InitNode, EndNode),
      bfs_search(Graph, [InitNode], [InitNode], EndNode, Sol),
    printf("Nós Visitados: %w \n", Sol).
*/

%%%%%%%% CLASSICAL VERSION ... just a TRANSVERSAL.... 
bfs_search(Graph, [], _, _, []) ?=> true.
bfs_search(Graph, [EndNode | _], _, EndNode, Path) ?=> Path = [EndNode].
bfs_search(Graph, [Node | Rest], Visited, EndNode, Path) =>
    Neighbours = [N : N in get_neighbors(Graph, Node), not membchk(N, Visited), not membchk(N, Rest)],
    NewVisited = Visited ++ Neighbours,
    NewQueue = Rest ++ Neighbours,
    printf("\n First/Curr: %w \t Queue/Rest: %w\t New_Queue: %w ", Node, Rest, NewQueue),
    bfs_search(Graph, NewQueue, NewVisited, EndNode, TempPath),
    Path = [Node | TempPath].

/* ********************************************* */

/* MUITO TOP ESTA VERSAO FUNCIONAL */
get_neighbors([], _) = [].
%get_neighbors([{Node, Neighbours} | _], Node) = Neighbours.  %% caso fosse {} -- arrays
get_neighbors([[Node, Neighbours] | _], Node) = Neighbours.
get_neighbors([_ | Rest], Node) = get_neighbors(Rest, Node).

all_nodes( Graph ) = Nodes =>
    %Nodes = sort( [N : Termo in Graph, {N, _} = Termo ]) . 
    %Nodes = [N : Termo in Graph, {N, _} = Termo ] .   
    Nodes = [N : Termo in Graph, [N, _] = Termo ] .   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% pega todos os nós predecessores de um Node
get_Predecessors( Node,  Graph ) = Pred =>
    Pred = [ N : Termo in Graph, [N , L_adj] = Termo , membchk(Node, L_adj) ].

%% Apenas o primeiro predecessor ....
get_One( Node,  Graph ) = first(get_Predecessors( Node,  Graph )).

%%% obtem um menor caminho a partir da folha até a  raiz
get_path(_, _, Visited, _, Path), Visited ==[] ?=> Path=[].
get_path(Node, Start, L_Visited, Graph, Path), Node == Start ?=> Path=[Start].
get_path(Node, Start, L_Visited, Graph, Path) =>
    membchk(Node, L_Visited), %%% OK
    delete(L_Visited, Node) = L2, 
    Pred = get_One(Node, Graph),
    get_path(Pred, Start, L2, Graph, Partial),
    %%% sempre recursão pela cauda é mais fácil de visualizar
    Path = [Node|Partial].
   

%%%% Uma versao funcional de pegar um caminho da folha a raiz (origem)
%%% na versao funcional ... coloque as condicoes de parada/aterramento antes de =>
get_path_F(Node, Start, L_Visited, Graph) = R , L_Visited == [] => 
     R = [] .
get_path_F(Node, Start, _, _) = R , Node == Start =>  
     R = [Start].
get_path_F(Node, Start, L_Visited, Graph) = Path =>
    membchk(Node, L_Visited),
    L2 = delete(L_Visited, Node),
    Pred = get_One(Node, Graph),   %%% apenas o primeiro, UM, que aparecer já visitado.
    Path = [Node | get_path_F(Pred, Start, L2, Graph)].
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% TESTES durante o codigo
/*            
    %%%% Testes  para estas funcoes diversas

    printf("\n Pred: %w", get_Predecessors(5, Graphs[1])),
    printf("\n One: %w", get_One(7, Graphs[1])),
    get_path(5, 1, [1,2,3,4,5], Graphs[1], Path),
    printf("\n One Path: %w", reverse(Path)),
    printf("\n A Path FUNCTIONAL: %w", reverse(get_path_F(5, 1, [1,2,3,4,5], Graphs[1]))),
*/    



    % Definindo um grafo simples
/*    Graph = [
        {1, [2, 3]},
        {2, [4]},
        {3, [4]},
        {4, [5]},
        {5, []}
    ],
    printf("
1 --> 2 --> 4 --> 5
 \\--> 3 ---/
 or \n
    1
   / \\
  2   3
   \\ /
    4
    |
    5
   \n"),
Picat> X := {2}, X:=X++{3}.
X = {2,3}
yes

Picat> X := {2}, X:= {3}++X.
X = {3,2}
yes
Picat> X={}, Y = slice(X,3,X.length), Y=={}. 
X = '{}'
Y = '{}'
yes

*/