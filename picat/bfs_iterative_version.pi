
%%% Functional or Procedural Version of BFS -- By CCS
%%% There's a small error.
/*
  
       1
      / \
     2   3  ---------- 12
    / \ / \
   4   5   6 
  / \ /     \
 7   8       9
 |           |
 10         11

*/
bfs_iterative(Graph, InitNode, EndNode) = Sol =>
    Queue := [InitNode],  %%%% I did a queue using a list ... could be an array
    Visited := [InitNode], %%% List
    printf("\n Queue:%w  Visited:%w  EndNode: %w", Queue, Visited, EndNode),

    while ( Queue != [] ) do
        
        %printf("\n Get_front: %w", get_front(Queue)),
        printf(" Queue: %w \n ", Queue),
        Front := get_front(Queue), % take it before of dequeue
        Queue := dequeue(Queue), %% departure ... remove front of queue
        
        printf(" New_Queue: %w  + Front: %w = QUEUE\t ", Queue, Front),
        if (Front == EndNode) then
           
            %%% Ha alguns na pilha que não foram VISITADOS ainda
            %%% serão descartados da pilha com esta ação
            %%% Mas constam em listados ... 
            %%% Logo é remover todos da lista de visitados que estão na fila 
            % A differente between 2 lists with the same subsequences
            nth(Index,Visited,EndNode), 
            Visited := slice(Visited, Index, Visited.length),
            Queue := []      %%% like a return inside of this while
        else
            next_nodes(Graph, Front, NextNodes),
            println(nextNODES = NextNodes),

            foreach (Next in NextNodes )
                if (not membchk(Next, Visited) )  then
                    Visited := [Next] ++ Visited,
                    Queue := enqueue(Next, Queue)
                    
                end
            end %% foreach
        end %%% if
    end, %%% while
      
    Sol = reverse(Visited),
    %%%%%% Here
    printf("\n Visited: %w", Sol)

    ;
    printf("\n Wrong INPUT in the Graph...stopped in:  %w", Visited )   
    .
/******************* AUX PREDICATES for queue operations **********/
membchk_array(Element, Array) => 
    List = to_list(Array),
    membchk(Element,List).

get_front(Queue) = R =>
    R = last(Queue).

enqueue(V,Queue) = R => 
    R = [V] ++ Queue.

dequeue(Queue) = R =>
    if (len(Queue) > 0) then
        Front = last(Queue),
        append(New_Queue, [Front], Queue),
        R = New_Queue
    else
        printf("\n The queue is empty"),
        %exit()
        R = []
    end.

/*  kernel of BFS ... how to represent the graph and nodes */
next_nodes([ {Node, Neighbours} | _], N, R) ?=> 
    N == Node, 
    R = Neighbours.
    
next_nodes([ _ | Graph], Node, Neighbours) => 
        next_nodes(Graph, Node, Neighbours).

all_nodes( Graph ) = Nodes =>
        %Nodes = sort( [N : Termo in Graph, {N, _} = Termo ]) . 
        Nodes = [N : Termo in Graph, {N, _} = Termo ] .   

/*
  
       1
      / \
     2   3  -------
    / \ / \        \
   4   5   6       ------> 12  
  / \ /     \
 7   8       9
 |           |
 10         11


*/

main ?=>
    % Definindo um grafo simples
    Graph = [
        {1, [2, 3]},
        {2, [4, 5]},
        {3, [5, 6, 12]},
        {4, [5, 7]},
        {5, [8]},
        {6, [9]},
        {7, [10]},
        {8, []},
        {9, [11]},
        {10, []},
        {11, []},
        {12, []}
        ],
 
    % Testando o BFS funcional
    InitNode = 1,
    /*
     %%% INDIVIDUAL TESTS
    EndNode = 11,
    Sol = bfs_iterative(Graph , InitNode, EndNode),
    printf("\n InitNode:%w  EndNode:%w  ", InitNode, EndNode),
    printf("\n Visiting sequence: %w \n", Sol),
    */    
    Nodes = all_nodes(Graph),
    %Nodes_Sorted = sort(T),
    foreach(EndNode in Nodes)
        Sol = bfs_iterative(Graph , InitNode, EndNode),
        printf("\n\n INPUT DAT:"), 
        printf("\n Init Node:%w  End Node:%w  ", InitNode, EndNode),
        printf("\n Visiting sequence: %w \n", Sol)
    end,
   
        printf("\n End of main: OK\n").   

main => printf("\n End of main with fail ... NO SOLUTION"). 

/************************* OLD PIECES ********************/
  /*
        if(NextNodes == [] && Front == EndNode) then %%% for a leave node and an end node
           %% Case 1
                Visited := [Front] ++ Visited,
                Queue := [] %%% END if a leave was a END NODE
            elseif (NextNodes == [] && Front != EndNode) then
            %% Case 2    
                Visited := [Front] ++ Visited,
                Queue := dequeue(Queue) %% departure ... remove front of queue
                
            else
            %% Case 3
                foreach (Next in NextNodes )
                    if (not membchk(Next, Visited) )  then
                       Queue := enqueue(Next, Queue),
                       Visited := [Next] ++ Visited
                       
        %                printf("\n NEXT: %w  Visited: %w Temp: %w Queue: %w", Next, Visited, New_Queue, Queue )
                    end
                end            
        end

    % && (not membchk(EndNode, Visited))
        % || get_front(Queue) != EndNode  || (not membchk(Next, Visited)) 
    */    