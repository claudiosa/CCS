bfs_iterative(Graph, InitNode, EndNode) = Sol =>
    Queue := {InitNode},  %%%% ARRAY
    Visited := [InitNode], %%% List
    printf("\n Queue:%w , Visited:%w", Queue, Visited),
    while (Queue != {} || get_top(Queue) != EndNode ) do
        %
        {Front, Temp_Queue} =  dequeue(Queue),
        %Queue := New_Queue,
        printf("\n Temp_Queue: %w , Top: %w", Temp_Queue, Front),
        if (Front == 11) then
            exit()
        end,
        next_nodes(Graph, Front, NextNodes),
        %% ERRO AQUI ....
        %not membchk(NextNodes, Queue), 
        foreach (Next in NextNodes)
            not membchk(Next, Visited),
            Queue := enqueue(Next, Temp_Queue),
            Visited := [Next] ++ Visited , 
            printf("\n Visited: %w Queue: %w", Visited, Queue )
        end
    end,
    %Sol = remove_dups(Visited).
    Sol = reverse(Visited).


/******************* AUX PREDICATES **********/
membchk_array(Element, Array) => 
    List = to_list(Array),
    membchk(Element,List).


get_top(Queue) = R =>
    R = last(Queue).

enqueue(V,Queue) = R => 
    to_list(Queue) = L1,
    append([V], L1, L2),
    R = L2.to_array().

dequeue(Queue) = R =>
    if (length(Queue) > 0) then
        L1 = Queue.to_list(),
        reverse(L1) = [Front|ResList],
        reverse(ResList) = L2,
        New_Queue = L2.to_array(),
        R = {Front, New_Queue}
    else
        printf("\n The queue is empty"),
        %exit()
        R = {9999,{}}
    end.


next_nodes([ {Node, Neighbours} | _], N, R) ?=> 
    %printf("\n N:%w , N:%w", Node, Neighbours),
    N == Node, 
    R = Neighbours.
    
next_nodes([ _ | Graph], Node, Neighbours) => 
        next_nodes(Graph, Node, Neighbours).

/*
  
       1
      / \
     2   3
    / \ / \
   4   5   6
  / \ /     \
 7   8       9
 |           |
 10         11


*/

main =>
    % Definindo um grafo simples
    Graph = [
        {1, [2, 3]},
        {2, [4, 5]},
        {3, [4, 6]},
        {4, [5, 7]},
        {5, [8]},
        {6, [9]},
        {7, [10]},
        {8, []},
        {9, [11]},
        {10, []},
        {11, []}
        ],
 
    % Testando o BFS funcional
    InitNode = 1,
    EndNode = 6,
    Sol = bfs_iterative(Graph , InitNode, EndNode),
    printf("\n NÃ³s Visitados: %w \n", Sol).
