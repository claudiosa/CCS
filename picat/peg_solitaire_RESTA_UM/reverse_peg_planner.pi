%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/*
REVERSE of 
PEG SOLITAIRE USING THE PICAT PLANNER -- CCS feb/2018
The improvements and my mistakes are corrected by Hakan

Goal: to generate valid scenarios for the peg solitaire

*/
import os. %%% for OS command
import util. %%% some functions
%mport math.
import datetime.  %%% cpu time
import planner.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
main ?=>
   Status = command("clear") ,
   printf("====================================== %d OK", Status),
   %% change here according your MAP or BOARD
   
   %read_Map("empty_3x6_peg.txt", Lines, Cols, Map ), %% OK
   %read_Map("empty_9x9_peg.txt", Lines, Cols, Map ), 
   %%read_Map("empty_5x5_peg.txt", Lines, Cols, Map ), %% NO OK
   %read_Map("empty_7x7_peg.txt", Lines, Cols, Map ), %% OK
   read_Map("empty_another_7x7_37_peg.txt", Lines, Cols, Map ), %% OK
   %Map = read_Map_1("9x9_peg.txt", Lines, Cols, Map ),
   %Map = read_Map_1("another_7x7_37_peg.txt"), 
   %Map = read_Map_1("7x7_peg.txt"),
   %Map = read_Map_1("MAP_03.txt") ,
    printf("\n Matrix (%w,%w): \n%w " ,  Lines, Cols, Map ),
   /* 
   or
    Map = {
     "1##100",
     "1##1##",
     "0010##"
   },
   */
       
    T1 = current_time(),
    printf("\n The Initial Grid or Map"),            
    print_map(Map), nl,
    Bound = get_bound(Map), %%% a bound of the tree search
   
   % time(plan(Map,Bound,Plan)),   %%%% NO BOUND FOR REVERSE
    time(best_plan_unbounded( Map , Plan)), %%% CPU TIME
 
    T2 = current_time(), 
    
    show_solution( Map , Plan), %%% from HAKAN
    printf("\n A boundary (estimating a deep): %w  " , Bound ),
    printf("\n PLAN: %w", Plan), 
    Total := length(Plan) ,
    Num_Movts := (Total - 1) ,
  
    printf("\n Total of states: %d", Total), 
    printf("\n Total of moviments: %w", Num_Movts),
    printf("\n CPU TIME Initial: %w  end: %w ", T1, T2),
    printf("\n =========================================\n ")
    .
    
main =>  printf("\n None options from main !!!").

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Auxiliary functions
% a deep or bound  estimated for the search tree
get_bound(Grid) = sum([1 : I in array_matrix_to_list(Grid), I=='1'])-1.   
%% good heuristic
%%% from HAKAN
/*********** <<ACTION >> *************/
%%% IN FUNCTIONS: no backtrackable rules are allowed 
%%% Backtrackable rules only in predicates

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/*** check the 1 at the end ****/
final( Grid ) =>
          %print_map( Grid ), 
          %%read_Map(File_NAME, Lines, Cols, _ ),
          array_matrix_to_list(Grid) = List,
          
          %printf("final list: %w", List),
          %% CONDITIONS to the finish
          N_elem = comp_L(List),
          N_cerquilha = count_X_in_L( '#' , List ),
          N_1 = count_X_in_L( '1' , List ),
          %% condition to stop
          %(N_elem - N_cerquilha - N_1) <= 2, %% two or LESS free cells
          (N_elem - N_cerquilha - N_1) < 2, %% two or LESS free cells
%         Grid[5,5] == '1', %%% CHANGE IT if necessary 9x9
%         Grid[4,4] == '1', %%% CHANGE IT if necessary 7x7
%         Grid[3,3] == '1', %%% CHANGE IT if necessary 5x5
          %% Printing
          println("End state:"),
          print_map(Grid).  

%%%final(_) => printf("\n There are 1 in the map!\n").
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/* Describing the possible actions ==> for the planner */
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% FROM HAKAN ... 1 ACTION instead 4 action as I had proposed
%%% MUCH .... MUCH MORE EFICIENT
action(Grid,New_Grid, Action, Action_Cost) ?=>
  Grid_TEMP = copy_term(Grid),
  Action_Cost = 1,
  %% only once time is calculated ... all the movements in the board
  L_all_mov =  f_feasible_moves( Grid ), %% the heuristics can be handled HERE
  member( (Action1, X, Y) , L_all_mov),  %% the heuristics can be handled HERE chosing a good movement
  %% take one feasible movement/action in current moment
  %% a tuple (Action1, X, Y) from L_all_mov)
  if (Action1 == jump_right)   then
     Grid_TEMP[X, Y]   := '1',
     Grid_TEMP[X ,Y+1] := '1',     
     Grid_TEMP[X, Y+2] := '0'
  elseif (Action1 == jump_left) then
     Grid_TEMP[X, Y]   := '1',
     Grid_TEMP[X, Y-1] := '1',     
     Grid_TEMP[X, Y-2] := '0'
  elseif (Action1 == jump_up)   then
     Grid_TEMP[X,   Y] := '1',      
     Grid_TEMP[X-1, Y] := '1',     
     Grid_TEMP[X-2, Y] := '0'
  elseif (Action1 == jump_down) then
     Grid_TEMP[X,   Y] := '1',      
     Grid_TEMP[X+1, Y] := '1',     
     Grid_TEMP[X+2, Y] := '0'
  end,
  Action = (Action1, X, Y) ,
  New_Grid = Grid_TEMP.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/* Get all feasible_movement in XY  grid from a cell with  VALID MOVEMENT */
f_feasible_moves( Map ) = L_mov  =>
  L = (Map.length),
  C = (Map[1].length),
  %%printf(" MAX DIM: %d x %d ", L, C),
  Aux := [],
  foreach(I in 1 .. L , J in 1 .. C) %%% MANY WILL CHOOSEN
   (
      %%% VERTICAL  
     if ((I+2 =<L) , Map[I,J] == '0' , Map[I+1,J] == '0', Map[I+2,J] == '1' ) then  %110
        Aux := f_insert(( jump_down ,I,J), Aux)
        % ,
        % printf("\n VERTICAL 110")
       
       elseif ((I-2 >= 1), Map[I,J] == '0' , Map[I-1,J] == '0',  Map[I-2,J] == '1' ) then  %011
       Aux := f_insert(( jump_up , I,J), Aux)
        %,
        %printf("\n VERTICAL 011")
       
       elseif ((J+2 =<C) , Map[I,J] == '0', Map[I,J+1] == '0',  Map[I,J+2] == '1') then  %down
        Aux := f_insert(( jump_right ,I,J), Aux)
        %,
        %printf("\n HORIZONTAL 110 --> 001")
       
       elseif ((J-2 >= 1) , Map[I,J] == '0', Map[I,J-1] == '0',  Map[I,J-2] == '1') then  %down
       Aux := f_insert(( jump_left , I,J), Aux)
        %,
        %printf("\n HORIZONTAL 011 --> 100")
         
    %   else
    %       printf(" . ")
    %    printf("\n None feasible  moviment in:"),
    %    printf("\t(%d,%d): %w " , I, J, Map[I,J] )
      end %%%% END do if ...
      % ,
      % printf("\t foreach END")
     ) 
   end , %% END  FOREACH
    %%printf("\n After the foerach : %w ", Aux),
    %%% finally
    L_mov = Aux .

f_feasible_moves( _ ) = R => 
      printf("\n Problem in position function f_feasible_moves \n"),
      R := [].
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% READING A FILE  with a MAP or Grid....
%read_Map_1(File_NAME) = Arr_2D  
read_Map(File_NAME, Lines, Cols, Arr_2D  )
    =>
    Reader = open(File_NAME), 
    Lines = read_int(Reader), %% dimentions of Grids
    Cols = read_int(Reader),
    new_array(Lines , Cols ) = Arr_2D, %% creating an array 2D
    I = 1, 
    while (not at_end_of_stream(Reader)) %% continuando a leitura
        L_read := read_line(Reader),
        delete_all( L_read, ' ') = L_aux, %% exclui ' ' do mapa
        Arr_AUX = to_array(L_aux),   %% converte lista para array
    %    printf("\n By Line: %w",  L_aux ),
    %    printf("\n  By Array %d: %w", I, Arr_AUX ),
        Arr_2D[I] := Arr_AUX ,  %% array recebe uma linha -- teste
        I := I+1
       end,
    close(Reader)  .
    %% printf("\n The Final Array: %w\n\n", Arr_2D )
%read_Map(File_NAME, _ , _, _  ) => printf("\n Problem to read: %w\n\n", File_NAME ).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% printing the GRID ....
print_map( M ) =>
 L = M.length,
 C = M[1].length,
  nl,
   foreach(I in 1  .. L)
     foreach(J in 1  ..  C)
      printf("%w " , M[I,J] )
     %% printf("(%d,%d): %w " , I, J, M[I,J] ) -- FINE
     end,
     nl
   end.   

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

comp_L( [] ) = 0.
comp_L( [_|L] ) = comp_L( L ) + 1 .
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

count_X_in_L( _ , [] )  = 0.
count_X_in_L( X , [X|L] ) = count_X_in_L( X , L ) + 1 .
count_X_in_L( X , [H|L] ) = Res => X !== H, 
                            Res = count_X_in_L( X , L ) .
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

f_insert( X, L ) = R, L == []  => R=[ X ].
f_insert( X, L ) = R, L != []  => R=[ X | L ].
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% FROM HAKAN  ... for pretty printing 
show_solution(InitGrid, Plan) => 
  Grid = copy_term(InitGrid),
  println("\nInit:"),                        
  print_map(Grid), %% once time
  foreach((Action,X,Y) in Plan)
    printf("\n => Action %w from (%d,%d)", Action,X,Y),
    %%println((Action,X,Y)),
    if (Action == jump_right) then
       Grid[X, Y]   := '1',
       Grid[X ,Y+1] := '1',     
       Grid[X, Y+2] := '0'
    elseif (Action == jump_left) then
       Grid[X, Y]   := '1',
       Grid[X, Y-1] := '1',     
       Grid[X, Y-2] := '0'
    elseif (Action == jump_up) then
       Grid[X,   Y] := '1',      
       Grid[X-1, Y] := '1',     
       Grid[X-2, Y] := '0'
    elseif (Action == jump_down) then
       Grid[X,   Y] := '1',      
       Grid[X+1, Y] := '1',     
       Grid[X+2, Y] := '0'
    end,
    print_map(Grid) %%%  call each good movement
  end,
  nl.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
