%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/*
PEG SOLITAIRE USING THE PICAT PLANNER -- CCS feb/2018
The improvements and my mistakes are corrected by Hakan

In the future .... explore heuristics such from a internet comment:
They propose 3 heuristics:

1 - The number of nodes are available for the next step, considering which more available next's steps, better the node.
2 - Number of isolated peg's - as few isolated peg's better the node.
3 - Less peg's in the board better the node.

This may be not the better heuristics for this problem, but seems to be a simple approach.

*/
import os. %%% for OS command
import util. %%% some functions
%mport math.
import datetime.  %%% cpu time

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
main ?=>
   Status = command("clear") ,
   printf("====================================== %d OK", Status),
   %% change here according your MAP or BOARD
   %Map = read_Map("3x6_peg.txt") ,
   %Map = read_Map("5x5_peg.txt") , % no solution
   %Map = read_Map("9x9_peg.txt") ,
   %Map = read_Map("another_7x7_37_peg.txt"), 
   %Map = read_Map("7x7_peg.txt"),
   Map = read_Map("3x6_peg.txt") ,
   /* 
   or
    Map = {
     "1##100",
     "1##1##",
     "0010##"
   },
   */
       
    %T1 = current_time(),
    printf("\n The Initial Grid or Map"),            
    print_map(Map), nl,
   % printf("\n ......."), 
    Upper = get_bound(Map),
    search_DFS( [ Map ], Plan , Upper ),
    %T2 = current_time(), 
    
    % show_solution( Map , Plan), %%% from HAKAN
    print_Plan( Plan ), 
    Total := length(Plan) ,
    Num_Movts := (Total - 1) ,
  
    printf("\n Total of states: %d", Total), 
    printf("\n Total of moviments: %w", Num_Movts),
    %printf("\n CPU TIME Initial: %w  end: %w ", T1, T2),
    printf("\n =========================================\n ")
    %,  fail
    .
    
main =>  printf("\n None options from main !!!").
/*************************************************************/
%% the generic DFS 
search_DFS( [ Current_NODE | Partial_SOL] , L, Upper) ?=>
    
   %    the halting conditions
   %    printf(" \n  == TESTE de PARADA   ==  "),
        final_check(  Current_NODE  ), %% check if in L exist only a single 1
 	      L = [ Current_NODE | Partial_SOL ],
        printf(" \n >>> HALTING CONDITION by DFS :  %w:%d", L, Upper). 

/* aqui é o cerne do processo de busca */
search_DFS( [Node | Partial_SOL], Solution , Upper) =>
    Upper >= 1,
    move( Node , New_NODE, New_Action ), %% Action: Wich movement
   % printf("\n Novo NO ou estado: %w" , Novo_nodo), 
   % good_action_move(New_NODE),  %%% Nao funciona ainda 
    
    /* Verifique se já não esteve em uma tentativa anteriores */
   % not( member( New_NODE , [ Node | Caminho ]  ) ),
    %%printf(" \n NOVO NOH: %w %w %w", Novo_nodo, Nodo, Caminho),
    New_Upper := (Upper-1),
    search_DFS([New_NODE, Node | Partial_SOL], Solution, New_Upper).

/*************************************************************/

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Auxiliary functions
% a deep or bound  estimated for the search tree
get_bound(Grid) = sum([1 : I in array_matrix_to_list(Grid), I=='1']) - 1 .   
%% good heuristic
%%% from HAKAN
%%% IN FUNCTIONS: no backtrackable rules are allowed 
%%% Backtrackable rules only in predicates

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/*** check exist only 1 at the end ****/
final_check( Grid ) =>
          %print_map( Grid ), 
          array_matrix_to_list(Grid) = List,
          %printf("final list: %w", List),
          %% CONDITIONS to the finish
          1 == count_X_in_L( '1' , List ), 
%         Grid[5,5] == '1', %%% CHANGE IT if necessary 9x9
%         Grid[4,4] == '1', %%% CHANGE IT if necessary 7x7
%         Grid[3,3] == '1', %%% CHANGE IT if necessary 5x5
          %% Printing
          println("\n vvvvv ONE end state was REACHED vvvvv")
          %print_map(Grid)
          .  
%%%final(_) => printf("\n There are 1 in the map!\n").
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/* Describing the possible actions ==> for the planner */
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% FROM HAKAN ... 1 ACTION instead 4 action as I had proposed
%%% MUCH .... MUCH MORE EFICIENT
%move( Nodo , New_NODE), 
move(Grid, New_Grid, Action ) ?=>
  % print_map( Grid ), 
  Grid_TEMP = copy_term(Grid),
  L_all_mov = f_feasible_moves( Grid ),   %%
  member( (Action1 , X, Y) , L_all_mov) ,  %% THE HEURISTICS CAN BE HANDLED HERE CHOSING A GOOD MOVEMENT
  
  %% only once time is calculated ... all the movements in the board
  %% take one feasible movement/action in current moment
  %% a tuple (Action1, X, Y) from L_all_mov)
  if (Action1 == jump_right)   then
     Grid_TEMP[X, Y]   := '0' ,
     Grid_TEMP[X ,Y+1] := '0' ,     
     Grid_TEMP[X, Y+2] := '1'
  
  elseif (Action1 == jump_left) then
     Grid_TEMP[X, Y]   := '0' ,
     Grid_TEMP[X, Y-1] := '0' ,     
     Grid_TEMP[X, Y-2] := '1'
  
  elseif (Action1 == jump_up)   then
     Grid_TEMP[X,   Y] := '0' ,      
     Grid_TEMP[X-1, Y] := '0' ,     
     Grid_TEMP[X-2, Y] := '1'
  
  elseif (Action1 == jump_down) then
     Grid_TEMP[X,   Y] := '0' ,      
     Grid_TEMP[X+1, Y] := '0' ,     
     Grid_TEMP[X+2, Y] := '1'
  
  end,
  Action = (Action1, X, Y)  ,
  New_Grid = Grid_TEMP.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/* Get all feasible_movement in XY  grid from a cell with  VALID MOVEMENT */
f_feasible_moves( Map ) = L_mov  =>
  L = (Map.length),
  C = (Map[1].length),
  %%printf(" MAX DIM: %d x %d ", L, C),
  Aux := [],
  foreach(I in 1 .. L , J in 1 .. C) %%% MANY WILL CHOOSEN
   (
      %%% VERTICAL  
     if ((I+2 =<L) , Map[I,J] == '1' , Map[I+1,J] == '1', Map[I+2,J] == '0' ) then  %110
        %% FAZER UMA HEURISTICA DE PROIBICAO AQUI .....
        Aux := f_insert(( jump_down ,I,J), Aux)
        % ,
        % printf("\n VERTICAL 110")
       
       elseif ((I-2 >= 1), Map[I,J] == '1' , Map[I-1,J] == '1',  Map[I-2,J] == '0' ) then  %011
       Aux := f_insert(( jump_up , I,J), Aux)
        %,
        %printf("\n VERTICAL 011")
       
       elseif ((J+2 =<C) , Map[I,J] == '1', Map[I,J+1] == '1',  Map[I,J+2] == '0') then  %down
        Aux := f_insert(( jump_right ,I,J), Aux)
        %,
        %printf("\n HORIZONTAL 110 --> 001")
       
       elseif ((J-2 >= 1) , Map[I,J] == '1', Map[I,J-1] == '1',  Map[I,J-2] == '0') then  %down
       Aux := f_insert(( jump_left , I,J), Aux)
        %,
        %printf("\n HORIZONTAL 011 --> 100")
         
    %   else
    %       printf(" . ")
    %    printf("\n None feasible  moviment in:"),
    %    printf("\t(%d,%d): %w " , I, J, Map[I,J] )
      end %%%% END do if ...
      % ,
      % printf("\t foreach END")
     ) 
   end , %% END  FOREACH
    %% printf("\n After the foerach "),
    %%% finally
    L_mov = Aux .

f_feasible_moves( _ ) = R => 
      printf("\n Problem in position function f_feasible_moves \n"),
      R := [].
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/*
good_action_move( Map ) ?=>
     
  L = (Map.length),
  C = (Map[1].length),
  %%printf(" MAX DIM: %d x %d ", L, C),
  Aux := [],
  foreach(I in 1 .. L , J in 1 .. C) %%% MANY WILL CHOOSEN
   (
     Fazer a verificacao de movimento invalidos aqui....

good_action_move( _ ) =>
    printf("\n good_action_move \n"),
      .
*/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% READING A FILE  with a MAP or Grid....
read_Map(File_NAME) = Arr_2D  
    =>
    Reader = open(File_NAME), 
    Lines = read_int(Reader), %% dimentions of Grids
    Cols = read_int(Reader),
    new_array(Lines , Cols ) = Arr_2D, %% creating an array 2D
    I = 1, 
    while (not at_end_of_stream(Reader)) %% continuando a leitura
        L_read := read_line(Reader),
        delete_all( L_read, ' ') = L_aux, %% exclui ' ' do mapa
        Arr_AUX = to_array(L_aux),   %% converte lista para array
    %    printf("\n By Line: %w",  L_aux ),
    %    printf("\n  By Array %d: %w", I, Arr_AUX ),
        Arr_2D[I] := Arr_AUX ,  %% array recebe uma linha -- teste
        I := I+1
       end,
    close(Reader)  .
    %% printf("\n The Final Array: %w\n\n", Arr_2D )
%% a study for ready a file in Picat is availble in reading_files.pi
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
print_Plan( Inv_Solucao ) =>
  Plan = reverse(  Inv_Solucao ),
  println("\n ONE SOLUTION: "),                        
  foreach( State in Plan)
  print_map( State ).

%% printing the GRID ....
print_map( M ) =>
 L = M.length,
 C = M[1].length,
  nl,
   foreach(I in 1  .. L)
     foreach(J in 1  ..  C)
      printf("%w " , M[I,J] )
     %% printf("(%d,%d): %w " , I, J, M[I,J] ) -- FINE
     end,
     nl
   end.   

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
count_X_in_L( _ , [] )  = 0.
count_X_in_L( X , [X|L] ) = count_X_in_L( X , L ) + 1 .
count_X_in_L( X , [H|L] ) = Res => X !== H, 
                            Res = count_X_in_L( X , L ) .
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
f_insert( X, L ) = R, L == []  => R=[ X ].
f_insert( X, L ) = R, L != []  => R=[ X | L ].
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% FROM HAKAN  ... for pretty printing --- LATER
show_solution(InitGrid, Plan) => 
  Grid = copy_term(InitGrid),
  println("\nInit:"),                        
  print_map(Grid), %% once time
  foreach((Action,X,Y) in Plan)
    printf("\n => Action %w from (%d,%d)", Action,X,Y),
    %%println((Action,X,Y)),
    if (Action == jump_right) then
       Grid[X, Y]   := '0',
       Grid[X ,Y+1] := '0',     
       Grid[X, Y+2] := '1'
    elseif (Action == jump_left) then
       Grid[X, Y]   := '0',
       Grid[X, Y-1] := '0',     
       Grid[X, Y-2] := '1'
    elseif (Action == jump_up) then
       Grid[X,   Y] := '0',      
       Grid[X-1, Y] := '0',     
       Grid[X-2, Y] := '1'
    elseif (Action == jump_down) then
       Grid[X,   Y] := '0',      
       Grid[X+1, Y] := '0',     
       Grid[X+2, Y] := '1'
    end,
    print_map(Grid) %%%  call each good movement
  end,
  nl.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
