%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

import os. %%% for OS command
import util. %%% some functions
/* 
SOME tricks to read ANY files in PICAT
in this case a matrix where the first line has
its dimension (row and collun)

please, comment all the printing lines in the code
by CCS
*/

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
main ?=>
   Status = command("clear") ,
   printf("====================================== %d OK", Status),
   /* 
   or
    Map = {
     "1##100",
     "1##1##",
     "0010##"
   },
   */
    Map1 = read_Map_1("peg_solitaire_RESTA_UM/MAP_01.txt") , 
    print_map( Map1 )  ,
    printf("\n =========================================\n "),
    Map2 = read_Map_2("peg_solitaire_RESTA_UM/MAP_01.txt") , 
    print_map( Map2 )  ,
   
    printf("\n =========================================\n ")
    .
    
main =>  printf("\n None options from main !!!").

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% READING A FILE  with a MAP or Grid....
read_Map_1(File_NAME) = Arr_2D  
    =>
    Reader = open(File_NAME), 
    Lines = read_int(Reader), %% dimentions of Grids
    Cols = read_int(Reader),
    new_array(Lines , Cols ) = Arr_2D, %% creating an array 2D
    I = 1, 
    while (not at_end_of_stream(Reader)) %% continuando a leitura
        L_read := read_line(Reader),
        delete_all( L_read, ' ') = L_aux, %% exclui ' ' do mapa
        Arr_AUX = to_array(L_aux),   %% converte lista para array
    %    printf("\n By Line: %w",  L_aux ),
    %    printf("\n  By Array %d: %w", I, Arr_AUX ),
        Arr_2D[I] := Arr_AUX ,  %% array recebe uma linha -- teste
        I := I+1
       end,
    close(Reader)  .
    %% printf("\n The Final Array: %w\n\n", Arr_2D )


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% READING A MAP  .... equivalent 
read_Map_2(File_NAME) = Arr_2D  
    =>
      L_read = read_file_lines(File_NAME), %% the file here
      writeln(list_read=L_read), %% all file in a list unique
      L_flatten = flatten(L_read), %% flatten all lists in a only list
      L_aux= delete_all( L_flatten, ' '),  %% excluding ' ' do mapa
      writeln(l_aux = L_aux),
      
      [Lines, Cols | List] = L_aux, %%% to obtain LIST of contents
      N_rows = to_int(Lines), %% matrix dimensions 
      N_cols = to_int(Cols),
      println([N_rows , N_cols]),
  
      Arr_2D = new_array(N_rows , N_cols ) , %% cria um array 2D
      %writeln( l_Final = List ),
      %writeln(a_array = Arr_2D ),
      
      printf("\n Size: %d\n List:%w \n", length(List), List ),
    %%%% the kernel of reading is here
    I := 1, 
    while (I =< N_rows)
        J := 1,
        while (J =< N_cols)
          %% to get the k term from the list and put in array
          n_esimo_lista((I-1)*N_cols + J , List , Arr_2D[I,J] ),
          %% OR the following line
          %%%Arr_2D[I,J] := elementAt( List , (I-1)*N_cols + J ) , 
          %%printf("\t :%w ", Arr_2D[I,J] ),
           %% array recebe uma linha -- teste
          J := J+1 
         end,    
         I := I+1
     end,
     printf("\n Array: %w\n List:%w \n", Arr_2D, List ).
     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
/*

INSTEAD OF while
foreach(I in 1  .. L)
     foreach(J in 1  ..  C)
    
*/

n_esimo_lista(1,[X|_], R) ?=> R = X. 
n_esimo_lista(N,[_|L], R ) => N > 1, n_esimo_lista((N-1), L , R ).

% elementAt(L,K) = L[K].
elementAt([X|_],1) = X.
elementAt([_|Xs],K) = Kth, K > 1 => Kth = elementAt(Xs,K-1).


%% printing the GRID ....
print_map( M ) =>
 L = M.length,
 C = M[1].length,
  nl,
   foreach(I in 1  .. L)
     foreach(J in 1  ..  C)
      printf("%w " , M[I,J] )
     %% printf("(%d,%d): %w " , I, J, M[I,J] ) -- FINE
     end,
     nl
   end.   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
