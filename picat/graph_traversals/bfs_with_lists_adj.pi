% BFS recursivo com funções
import util.
/*
Sample of BFS
  
       1
      / \
     2   3  -------
    / \ / \        \
   4   5   6       ------> 12  
  / \ /     \
 7   8       9
 |           |
 10         11

Expected Starting from 1: [1,2,3,4,5,6,12,7,8,9,10,11]

*/

graph(0) = [
    [1, [2, 3]],
    [2, [4, 5]],
    [3, [5, 6, 12]],
    [4, [5, 7]],
    [5, [8]],
    [6, [9]],
    [7, [10]],
    [8, []],
    [9, [11]],
    [10, []],
    [11, []],
    [12, []]
    ].

graph(1) = 
[
    [17,[18,32]],[18,[19,17]],[19,[20,18,34]],[20,[21,19]],
    [21,[22,20]],[22,[23,21]],[23,[22,38]],[25,[26,40]],[26,[27,25]],
    [27,[28,26]],[28,[29,27]],[29,[28,44]],[32,[47,17]],[34,[49,19]],
    [38,[53,23]],[40,[55,25]],[44,[59,29]],[47,[48,62,32]],[48,[49,47]],
    [49,[50,48,34]],[50,[51,49]],[51,[50,66]],[53,[38]],[55,[56,40]],[56,[57,55]],
    [57,[56,72]],[59,[74,44]],[62,[77,47]],[66,[81,51]],[72,[87,57]],[74,[89,59]],
    [77,[92,62]],[79,[94]],[81,[82,66]],[82,[83,81]],[83,[84,82]],[84,[85,83]],
    [85,[86,84,100]],[86,[87,85]],[87,[86,72]],[89,[104,74]],[92,[107,77]],
    [94,[109,79]],[100,[115,85]],[104,[119,89]],[107,[108,92]],[108,[109,107]],
    [109,[110,108,124,94]],[110,[111,109]],[111,[112,110,126]],[112,[113,111]],
    [113,[114,112]],[114,[115,113]],[115,[116,114,100]],[116,[117,115]],
    [117,[116,132]],[119,[134,104]],[124,[139,109]],[126,[141,111]],[132,[147,117]],
    [134,[149,119]],[137,[138,152]],[138,[139,137]],[139,[138,154,124]],[141,[142,156,126]],
    [142,[143,141]],[143,[144,142]],[144,[145,143]],[145,[144,160]],[147,[162,132]],
    [149,[164,134]],[152,[167,137]],[154,[169,139]],[156,[171,141]],[160,[175,145]],
    [162,[177,147]],[164,[179,149]],[167,[168,182,152]],[168,[169,167]],
    [169,[170,168,154]],[170,[171,169]],[171,[170,186,156]],[173,[174,188]],
    [174,[175,173]],[175,[174,190,160]],[177,[192,162]],[179,[194,164]],
    [182,[197,167]],[186,[201,171]],[188,[203,173]],[190,[205,175]],[192,[207,177]],
    [194,[209,179]],[197,[198,182]],[198,[199,197]],[199,[198]],[201,[202,186]],
    [202,[203,201]],[203,[204,202,188]],[204,[205,203]],[205,[204,190]],[207,[208,192]],
    [208,[209,207]],[209,[208,194]]
].

graph(3) = [
        [1, [2, 3, 4]],
        [2, [5, 6]],
        [3, [7, 8, 9]],
        [4, [10, 11]],
        [5, [12]],
        [6, [13, 14]],
        [7, []],
        [8, [15]],
        [9, [16, 17]],
        [10, []],
        [11, [18]],
        [12, [19]],
        [13, [20]],
        [14, []],
        [15, []],
        [16, []],
        [17, []],
        [18, [21]],
        [19, []],
        [20, []],
        [21, []]
    ].


maze(1) = [
        "###############",
        "#.......#....E#",
        "#.#.###.#.###.#",
        "#.....#.#...#.#",
        "#.###.#####.#.#",
        "#.#.#.......#.#",
        "#.#.#####.###.#",
        "#...........#.#",
        "###.#.#####.#.#",
        "#...#.....#.#.#",
        "#.#.#.###.#.#.#",
        "#.....#...#.#.#",
        "#.###.#.#.#.#.#",
        "#S..#.....#...#",
        "###############"
    ].

maze(2) = [
        "###############",
        "#.......#....E#",
        "#.....#...#.#.#",
        "#.###.#.#.#.#.#",
        "#S..#.....#...#",
        "###############"
    ].
                            
main =>
        %%% example with  a GRID or MAZE
        /*
        Grid = graph(4), %%% 
        
        Graph = build_adjacency_list(Grid), %Adjacency_List 
        print_map(Grid),
        list(Graph),

        Start = find_symbol(Grid,'S'), %% STARTING IN THIS NODE.
        %(Start) == (14,2),
        End = find_symbol(Grid,'E'),
        printf("\n Start: %w \t End: %w ", Start, End),
        %trace,
        Node = (Start),
        %get_neighbors(Node, Adjacency_List) = Neighbors,
        %notrace,
        get_neighbors(Node,  Graph, Neighbors),
        println(Neighbors),
        */
        Graph = graph(3), 
        Start = 1, 
        End = 21,
        
% Teste 1: Caminho do nó 1 para o nó 21
% Caminho esperado: [1, 4, 11, 18, 21]

% Teste 2: Caminho do nó 1 para o nó 19
% Caminho esperado: [1, 2, 5, 12, 19]

% Teste 3: Caminho do nó 1 para o nó 15
% Caminho esperado: [1, 3, 8, 15]



    /*** Example with  MAZE */
    /*
        Graph = graph(1),
        Maze = maze(1),
        [M, N] = [length(Maze), length(first(Maze))],
        Start_XY = find_symbol(Maze,'S'), %% STARTING IN THIS NODE.
      
        End_XY = find_symbol(Maze,'E'),
        printf("\n Format in List: %w\n %w", Graph, len(Graph)),
        Start = xy_to_node(Start_XY, N), 
        End = xy_to_node(End_XY, N),
        %debug,
    */               
        bfs_search(Graph, [Start], [Start], End, Result),  
        %Result = bfs(Graph, [Start], End, []),
        %Path = bfs(Graph, [Start], End, [[Start, []]]).
        %nodebug,
        printf("\n Start: %w \t End: %w \n Visiting order %w\n", Start, End, Result),
        printf("\n Size: %w", len(Result)).
       /*
        if nonvar(Grid) then
            shortest_path(Result, Shortest),
            print_path(Grid, Shortest),
            printf("\n Shortest: %w", Shortest)
        end.
        */

/*
Picat>  M = new_map(), M.put(one,1), One = M.get(one).   
M = (map)[one = 1]
One = 1
yes
*/

% Converte coordenadas (X, Y) em um número de nó
xy_to_node((X, Y), N) = (X - 1) * N + Y.

find_symbol(M, Symbol) = R =>
    [N_Rows, N_Cols] = [M.length, M[1].length],
    X := 0, 
    Y := 0,
    foreach(I in 1..N_Rows, J in 1..N_Cols)
        if member(M[I,J], [Symbol]) then
            X := I,
            Y := J
        end
    end,
    if (var(X) || var(Y)|| (X == 0 && Y == 0) ) then
        printf("The symbol  %w  was not found .... ", [Symbol])
    end,
    R = (X,Y).   %%% returning as a functor ... n=node

/*
% Constrói a lista de adjacências
build_adjacency_list(Matrix) = AdjacencyList =>
    AdjacencyList = 
        [ [(X, Y), Neighbors] : 
            X in 1..Matrix.length, 
            Y in 1..Matrix[1].length, 
            Matrix[X,Y] \= '#', 
            Neighbors = find_neighbors(X, Y, Matrix)
        ].

% Encontra os vizinhos válidos para uma célula
find_neighbors(X, Y, Matrix) = Neighbors =>
    Deltas = [(-1, 0), (1, 0), (0, -1), (0, 1)], % Movimentos ortogonais
    Neighbors = 
        [(NX, NY) : 
            (DX, DY) in Deltas, 
            NX = X + DX, 
            NY = Y + DY, 
            NX > 0, NX =< Matrix.length, 
            NY > 0, NY =< Matrix[1].length, 
            Matrix[NX,NY] \= '#'
        ].
*/

%%% FUNCTIONAL
%get_neighbors(Node, Graph) = Neighbors =>
    %Neighbors = {Second : [First, Second] in Graph, First == Node}.
%    [Neighbors] = [Second : [First, Second] in Graph, First == Node].

%%% take the NEIGHBOURS from NODE in Graph
get_neighbors(_,[]) = [].
get_neighbors(Node, [[Node, Neighbours] | _] ) = Neighbours.
get_neighbors(Node, [_ | Rest]) = get_neighbors(Node, Rest).

%%% PREDICATIVE    
get_neighbors(_Node, [], R) ?=> R = [].
get_neighbors(Node, [[First, Second]|Rest], R), First == Node ?=>
    R = Second, !.

get_neighbors(Node, [[First, Second]|Rest], R), First != Node =>
    get_neighbors(Node, Rest, R).


/* 
Picat> Node = (14,2),G=[[(14,2),[(13,2),(14,3)]],[(14,3),[(14,2),(14,4)]]], get_neighbors(Node, G, X), print(X).  
[(13,2),(14,3)]Node = (14,2)
G = [[(14,2),[(13,2),(14,3)]],[(14,3),[(14,2),(14,4)]]]
X = [(13,2),(14,3)]
yes

yes
Picat> Node = (14,2),G=[[(14,2),[(13,2),(14,3)]],[(14,3),[(14,2),(14,4)]]], get_neighbors(Node, G) =  X, print(X).
[(13,2),(14,3)]Node = (14,2)
G = [[(14,2),[(13,2),(14,3)]],[(14,3),[(14,2),(14,4)]]]
X = [(13,2),(14,3)]
yes


*/


print_map( M ) =>
    L = M.length,
    C = M[1].length,
        nl,
        foreach(I in 1  .. L)
        foreach(J in 1  ..  C)
            printf("%w " , M[I,J] )
        end,
        nl
    end.   

print_path( M, Path ) =>
    L = M.length,
    C = M[1].length,
        nl,
        foreach(I in 1  .. L)
        foreach(J in 1  ..  C)
            if (membchk((I,J), Path)) then
            printf("* ")
            else
            printf("%w " , M[I,J] )
            end
        end,
        nl
    end.   



%%% BFS FUNCTIONAL ....
/*
bfs(Graph, [Node|Queue], End, Visited) = Result,  Node == End =>
    printf("\n Node: %w \t End: %w ", Node, End),
    Result =  reverse(Visited)++[End].

bfs(Graph, [Node|Queue], End, Visited) = Result,   membchk(Node, Visited) =>
    Result = bfs(Graph, Queue, End, Visited). % Nó já visitado, continue

bfs(Graph, [Node|Queue], End, Visited) = Result,  not( membchk(Node, Visited)) =>
        Neighbors = get_neighbors(Node, Graph),
        %get_neighbors(Node, Graph, Neighbors), 
        %printf("\n Node: %w Neighbors %w", Node, Neighbors),
        NewNodes = [N : N in Neighbors, not membchk(N, Visited), not membchk(N, Queue) ], % Filtra os já visitados
        %NewNodes = [N : member(N, Neighbors), not member(N, Visited),  not membchk(N, Queue) ], % Filtra os já visitados
        NewQueue = Queue ++ NewNodes, % Atualiza a fila
        Path = [Node|Visited],
        printf("\n Top or Curr: %w \t Queue: %w\t Path: %w ", Node, Queue, Path),
        Result = bfs(Graph, NewQueue, End, Path). % Adicione à lista visitada
*/

bfs_search(Graph, [], _, _, []) ?=> true.
bfs_search(Graph, [EndNode | _], _, EndNode, Path) ?=> Path = [EndNode].
bfs_search(Graph, [Node | Rest], Visited, EndNode, Path) =>
        Neighbours = [N : N in get_neighbors( Node, Graph ), not membchk(N, Visited)],
        NewVisited = Visited ++ Neighbours,
        NewQueue = Rest ++ Neighbours,
        printf("\n Top or Curr: %w \t Queue: %w\t NewVisited: %w ", Node, NewQueue, NewVisited),
        bfs_search(Graph, NewQueue, NewVisited, EndNode, TempPath),
        printf("\n Back the right path: %w", TempPath),
        Path = [Node | TempPath].


/*
OK
bfs(Graph, [Node|Queue], End, Visited) = Result =>
    printf("...\n"),
    printf("Node: %w \t Queue: %w \t End: %w\n  ", Node, Queue, End),

    %%%if Node in Visited then  PICAT has not in yet in if ...
    %% I would keep in separeted function clause
    %trace,
    if ( Node == End ) then
        printf("STOP: Node: %w  \t End: %w\n  ", Node, End),
        Result =  reverse(Visited)++[End]
    elseif  membchk(Node, Visited) then %%% Node already visited
       %printf("\n Node: %w Visited %w", Node, Visited),
        Result = bfs(Graph, Queue, End, Visited) % Nó já visitado, continue
    else
        %Neighbors = get_neighbors(Node, Graph),
        get_neighbors(Node, Graph, Neighbors), 
        %printf("\n Node: %w Neighbors %w", Node, Neighbors),
        NewNodes = [N : N in Neighbors, not membchk(N, Visited)], % Filtra os já visitados
        %NewNodes = [N : member(N, Neighbors), not member(N, Visited)], % Filtra os já visitados
        NewQueue = Queue ++ NewNodes, % Atualiza a fila
        Result = bfs(Graph, NewQueue, End, [Node|Visited]) % Adicione à lista visitada
    end.
*/
