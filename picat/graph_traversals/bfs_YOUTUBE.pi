% BFS developed by CCS
import util.
/*
Sample of BFS
  
       1
      / \
     2   3  -------
    / \ / \        \
   4   5   6       ------> 12  
  / \ /     \
 7   8       9
 |           |
 10         11

Expected Starting from 1: [1,2,3,4,5,6,12,7,8,9,10,11]

*/

graph(2) = [
        [1, [2, 3, 4]],
        [2, [4, 5]],
        [3, [4]],
        [4, []],
        [5, []]
        ].

graph(3) = [
        [1, [2, 3, 4]],
        [2, [5, 6]],
        [3, [7, 8, 9]],
        [4, [10, 11]],
        [5, [12]],
        [6, [13, 14]],
        [7, []],
        [8, [15]],
        [9, [16, 17]],
        [10, []],
        [11, [18]],
        [12, [19]],
        [13, [20]],
        [14, []],
        [15, []],
        [16, []],
        [17, []],
        [18, [21]],
        [19, []],
        [20, []],
        [21, []]
    ].
                            
main =>
        Graph = graph(3), 
        Start = 1, 
        %End = 21,
     
% Teste 1: Caminho do nó 1 para o nó 21
% Caminho esperado: [1, 4, 11, 18, 21]

% Teste 2: Caminho do nó 1 para o nó 19
% Caminho esperado: [1, 2, 5, 12, 19]

% Teste 3: Caminho do nó 1 para o nó 15
% Caminho esperado: [1, 3, 8, 15]

        print(Graph),
        Temp = [2,21,19,15,22],
        foreach( End in Temp)
            printf("\n Start: %w \t End: %w ", Start, End),
            % bfs(Graph, [Start], End, Result),  %%% PREDICATIVE version
            Result = bfs_F(Graph, [Start], End), %%% Functional version
            printf("\n => OUTPUT: %w", Result),  
            
            (Result != []) ->
                (printf("\n Visiting order: %w", Result),
                 printf("\n Size/Steps: %w\n", len(Result))
                );
                (printf("\n >>> The End Node: %w was not found!!!\n", End)
            ) 
            
        end.
       
bfs(_, [], _End, Result) ?=> Result = [], !.                 
bfs(Graph, All_Paths, End, Result) ?=> 
    % Procurando:  Node == End  
    L = [One_Path : One_Path in All_Paths, membchk( End, One_Path) ], 
    L != [],
    Result = reverse(flatten(L)),
    !.

bfs(Graph, [Path | Rest], End, Result) => 
    
    expansion(Graph, [Path], Paths_Expanded),
    New_Paths = Rest ++ Paths_Expanded, % Atualiza a fila
    printf("\n Node or Curr Path: %w \t Paths Expanded: %w ", Path, Paths_Expanded),
    printf("\n Rest: %w \t New_Rest(Paths): %w", Rest, New_Paths ),
    bfs(Graph, New_Paths, End ,Result).

%
%expansion(Graph, P , Paths_Expanded),   (P==[];P==[[]]) ?=> 
%     Paths_Expanded = [], !.
% (X == [[]] ;  Picat> G = [[1,[2,3,4]],[2,[4,5]],[3,[4]],[4,[]],[5,[]]], expansion(G, [2], X), write(X).
%
expansion(Graph, [], Paths_Expanded) => 
    Paths_Expanded = [], !.
expansion(Graph, [[]], Paths_Expanded) => 
    Paths_Expanded = [], !.
expansion(Graph, [First_Path|Paths], Paths_Expanded) =>
    First = first(flatten(First_Path)),
    Neighbors = get_neighbors(First, Graph),
    %%%%printf("\n Node: %w Neighbors: %w", Node, Neighbors ),
    %%% varias ramificacoes em Node .... branches
    NewPaths = [[N, First_Path |Paths] : N in Neighbors, not membchk(N, [First_Path|Paths])],
    expansion(Graph, Paths,  TempPath),
    Paths_Expanded = NewPaths ++ TempPath.

/*
A construção [[N, Node|Path] : N in Neighbors] desempenha papel semelhante ao findall ao gerar todas as novas combinações de caminhos. Com essa abordagem, você deve obter o caminho mais curto corretamente, preservando o comportamento típico do BFS. 
*/

%%% BFS FUNCTIONAL version by CCS ....

bfs_F(_, [], _End ) = Result => Result = [].                 
bfs_F(Graph, [Path | Rest], End) = Result => 
   
/*
    membchk(End,flatten([Path | Rest])),
    All_Paths = [Path | Rest],
    L = [One_Path : One_Path in All_Paths, membchk(End, One_Path) ], 
    Result = reverse(flatten(L)).
*/
    All_Paths = [Path | Rest],
    if (membchk(End,flatten(All_Paths))) then
        %All_Paths = [Path | Rest],
        %%% FILTRAR em qual caminho o nó End está presente
        Sol = [One_Path : One_Path in All_Paths,  membchk(End, One_Path) ], 
        %%% por isto que precisa passar o Flatten na resposta final
        Result = reverse(flatten(Sol))
    else

%bfs_F(Graph, [Path | Rest], End) = Result => 
    
        expansion(Graph, [Path], Paths_Expanded),
        New_Paths = Rest ++ Paths_Expanded, % Atualiza a fila
        printf("\n Node or Curr Path: %w \t Paths Expanded: %w ", Path, Paths_Expanded),
        printf("\n Rest: %w \t New_Rest(Paths): %w", Rest, New_Paths ),
        Result = bfs_F(Graph, New_Paths, End),
    end.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Functional BFS - END
%%% FUNCTIONAL
%%% take the NEIGHBOURS from NODE in Graph
get_neighbors(_,[]) = [].
get_neighbors(Node, [[Node, Neighbours] | _] ) = Neighbours.
get_neighbors(Node, [_ | Rest]) = get_neighbors(Node, Rest).

%%% PREDICATIVE    
get_neighbors(_Node, [], R) ?=> R = [].
get_neighbors(Node, [[First, Second]|Rest], R), First == Node ?=>
    R = Second, !.

get_neighbors(Node, [[First, Second]|Rest], R), First != Node =>
    get_neighbors(Node, Rest, R).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%