/*-------------------------------------------------*/
import util.
import ordset.
import sys.

%%% a DFS -- original idea from HAKAN -- adapted by myself
%%% some changings
dfs(Graph, InitNode, EndNode, L_Nodes) =>
    S := InitNode,
    Path_Temp := [InitNode],
    while (S != EndNode ) do
        % select( (S,To,Info), Graph, GraphRest),
         % Graph := GraphRest  SE USAR SELECT PARA MEXER NO GRAFO
        next_node(Graph, S , Next, EndNode, Graph),
        not membchk(Next, Path_Temp),
        Path_Temp := Path_Temp ++ [Next],
        S := Next
    end,
    L_Nodes = Path_Temp.
%% if a path is not found it ... could be here modified 
%dfs(Graph, InitNode, EndNode, L_Nodes) => L_Nodes = [].
/*--------------------NOT USED EITHER TESTED -----------------------------*/
dfs_functional(Graph, InitNode, EndNode) = Sol =>
        S := InitNode,
        Path_Temp := [InitNode],
        while (S != EndNode) do
            next_node(Graph, S , Next, EndNode, Graph),
            not membchk(Next, Path_Temp),
            Path_Temp := Path_Temp ++ [Next],
            S := Next
        end,
        Sol = Path_Temp.
%%% a list is returned -- not tested
/*--------------------------------------------------------------------*/
%
% next_node([], Node, Next, End_Node, G_Static) ?=>
%    printf("\n None sucessor in this graph for the node: %w", [Node]).
%
% Suggestions  from Hakan

next_node([ {Node,Neighbours} | Graph], Node, Next, End_Node, G_Static) ?=>
    %Term[1] == Node,
    %Term[2] = Neighbours
    member(Next, Neighbours), %% to force a backtracking over list adjacencies
    neighbours(Next,G_Static) != []. %%% to avoid a  leaf node ... due the while in main loop
  
next_node([ {Node,Neighbours}  | Graph], Node, Next, End_Node, G_Static) ?=>
    member(Next, Neighbours), %% to force a backtracking over list adjacencies
    Next == End_Node. %%% COMPARING AND FINISHING 

%% to avance or search in the graph for next node 
next_node([ _ | Graph], Node, Next, End_Node, G_Static) =>
    next_node( Graph, Node, Next, End_Node, G_Static).        

/*-------------------------------------------------*/
% 
% Função de ordenação tpopológica
topological_sort(Graph) = R =>
    All_Nodes = all_nodes(Graph),
    Stack_Sol := [],
   
    foreach(Node in All_Nodes)
        if not(membchk(Node, Stack_Sol)) then
            if dfs(Graph, Node, Node, Sol) then
                Stack_Sol := Stack_Sol ++ Sol
            end
        end
    end,
    R = {Stack_Sol, reverse(Stack_Sol)}.
/* Returning an array with 2 lists ... the STACK and  reversed */
  
/*-------------------------------------------------*/
% Original Graph
/*
graph() = G => 
    G = [
        {'5',  ['11']},
        %%{'8', ['9']}, 
        {'7',  ['11', '8']},
        {'3',  ['8', '10']},
        {'11', ['2', '19', '10']},
        {'8',  ['19']},
        {'2',  []},
        {'19', []},
        {'10', []}
   ]. 
*/
graph() = G => 
    G = [
        {5,  [11]},
        {7,  [11, 8]},
        {3,  [8, 10]},
        {11, [2, 9, 10]},
        {8,  [9,10]},
        {2,  []},
        {9,  []},
        {10, []}
   ]. 
/*-------------------------------------------------*/
%   all_edges(L) = Edges =>
%    Edges = sort_remove_dups( [N : T in L, (N1, N2, N) = T ] ) . 
    
all_nodes( Graph ) = Nodes =>
    %Nodes = sort( [N : Termo in Graph, {N, _} = Termo ]) . 
    Nodes = [N : Termo in Graph, {N, _} = Termo ] . 
%%% take care with the format or layout of input graph 

neighbours(Node, Graph) = Viz =>
    Viz = flatten([ Neighbours : Term in Graph, Term = {Node,Neighbours}]).
%%    Viz = flatten([ Term[2] : Term in Graph, Term = {Node, Viz}]) . 
%%% take care with the input graph here

/*
AUX functions  not used but OK
get_second_elements(L) = Result =>
        Result = [Array[2] : Array in L]. 
   
neighbour(Node, Graph) = Viz =>
        Viz = flatten([Neighbours : {N, Neighbours} in Graph, N = Node]).
*/
/*-------------------------------------------------*/
main =>
    G = graph(),
   
    println(graph= G),
    % printf("\n%w\n", G),
    println(all_Nodes= all_nodes(G)),
    T = all_nodes(G),
    Nodes_Sorted = sort(T),
    println(all_Sorted= Nodes_Sorted),
    
  %% A simple TEST 
    Init = 7,                    
    foreach(End_Node in Nodes_Sorted)
        printf("\n Start: %w\t  End: %w", Init, End_Node),
        %dfs(Graph, InitNode, EndNode, L_Nodes)
        if ( dfs(G, Init, End_Node, Sol) ) then
            printf("\t  Path: %w",   Sol)
        else
            if var(Sol) then
                Sol = []
            end,
            printf("\t ==> NO reachable from: %w to: %w  Empty: %w\n", Init, End_Node, Sol)
        end
    end,

    printf("\n ==>......Individual case to test the findall ..... "),
    Init=7, End_Node=10,
    Sol2 = findall(S1, (dfs(G, Init, End_Node, S1 ), nonvar(S1))),
    printf("\n Start: %w\t  End: %w \t", Init, End_Node),
    println(sol_7_to_10 = Sol2),       

    TopologicalOrder = topological_sort(G),        
    println(top=TopologicalOrder),
    printf("Topologic Ordering: %w", TopologicalOrder),      

    printf("\n End of main: OK\n").

main => printf("\n End of main with fail ... NO SOLUTION"). 
 
/*-------------------------------------------------*/
/* 
   TAKE CARE ...

                    Picat> X = ['2','12'], Y = sort(X).
                    X = ['2','12']
                    Y = ['12','2']
                    yes

                    Picat> X = [22,12], Y = sort(X).     
                    X = [22,12]
                    Y = [12,22]
                    yes

*/
