%% https://github.com/alviano/lpcp-contest-2020/tree/master/problem-4
%% usage: picat masyu instance.in

import sat, util.

main([File_Name]) =>
    
    FD = open(File_Name),  %% FILE DESCRIPTOR
    reading_the_FILE(FD, Size , White, Black, Grid),   
    print_matrix( Grid, Size, Size ),
    %%% TOMORROW
    print("\n THE END ...").
       

reading_the_FILE(FD, N, White, Black, Grid) =>
    % FD : File Descriptor
    [Size, White, Black] = [to_int(W) : W in read_line(FD).split()],
    %writef("\n %w %w %w", Size, White, Black),
    N = Size + 1,
    Grid = new_array(N,N),
    %% filling the Grid with '.'
    foreach (I in 1..N)
        foreach (J in 1..N)
        Grid[I,J] := '.'
        end
    end,
    % writef("\n %w", Grid),
    % Now ... put 'w' and 'b'
    foreach (I in 1..White)  %% reading a line 
       [X , Y] = [to_int(W) : W in read_line(FD).split()],
       %writef("\t (%w %w)", X,Y),
       Grid[(X+1),(Y+1)] := 'w'
    end ,
 
    %writef("\n\n Where is  w ==> %w",Grid),
    foreach (I in 1..Black)  %% reading a line 
       [X,Y] = [to_int(W) : W in read_line(FD).split()],
       %writef("\t (%w %w)", X,Y),
       Grid[(X+1),(Y+1)] := 'b'
    end ,
    %writef("\n\n Map read ==> %w", Grid),

    print("\n End of Reading").   
    

/******************************* AUX predicates **********************/
print_matrix( M, L, C ) =>
    %L = M.length,
    %C = M[1].length,
     nl,
      foreach(I in 1  .. L)
        foreach(J in 1  ..  C)
         printf("%w " , M[I,J] )
        %% printf("(%d,%d): %w " , I, J, M[I,J] ) -- FINE
        end,
        nl
      end.   