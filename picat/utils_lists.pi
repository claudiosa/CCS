import io.

main ?=> Status = command("clear") ,
		printf("====================================== %d", Status),
        comprimento_01([a,b,c,d], X), 
        printf("\n comprimento_01: %d " , X), 
        printf("\n comprimento_02: %d " , comprimento_02([a,b,c,d]) ),
        %pertence_01(a,[a,b,c,d]), 
       % pertence_01(e,[a,b,c,d]), 
        printf("\n pertence_02: %w " , pertence_02(a,[a,b,c,d])  ),   
        printf("\n pertence_02: %w " , pertence_02(e,[a,b,c,d])  ),
        uniao_01( [a,b,c,d], [x,y,w,z], U1 ), 
%        uniao_01( U2, [x,y,w,z], [a,b,c,d, x,y,w,z] ), 
        printf("\n a. uniao_01: %w " , U1), 
%        printf("\n b. uniao_01: %w " , U2), 
        printf("\n uniao_02: %w " , uniao_02( [a,b,c,d], [x,y,w,z])), 
        
        add_X_lista_01( e, [a,b,c,d], Z1),
        
        printf("\n a. add_X_01: %w " , Z1), 
        printf("\n a. add_X_02: %w " , add_X_lista_02( e, [a,b,c,d] )),
        printf("\n b. add_X_02: %w " , add_X_lista_02( d, [a,b,c,d] )),
        printf("\n a. Geração de listas: %w " , [I :  I in 1..20] ), 
        printf("\n b. Geração de listas: %w " , [I :  I in 1..20, I>10, I<20] ), 
        printf("\n a. Geração de vetor 1D: %w " , {I :  I in 1 .. 7}), 
        printf("\n a. Geração de vetor 2D: %w " , {(I,J) :  I in 1 .. 2, J in 11 .. 12}), 
        printf("\n====================================== \n")
        .
main =>  printf("\n Something Wrong !!!").

% -- visao lógica
comprimento_01([],N) ?=> N = 0. 
%%% em PROLOG, apenas comprimento_01([],0). PORQUÊ?
comprimento_01([_|L],N)  => 
             comprimento_01( L , Parcial ), 
             N = 1 + Parcial.

% -- visao funcional
%comprimento_02([]) = S => S = 0.
comprimento_02( [ ] ) = 0.
comprimento_02([ _ | L ]) = N  => 
             N = 1 + comprimento_02( L ).

% -- visao lógica
pertence_01( A, [A|_]) ?=> true. 
% Novamente, backtracking CONTROLADO ... diferente do Prolog
pertence_01(A,[B|L])  => 
             A != B,
             pertence_01(A,L).

% -- visao funcional
%pertence_02( _ , [ ]) = X =>  X = false. 
%pertence_02( A, [A|_]) = X =>  X = true. 
pertence_02( _ , [ ]) = false. 
pertence_02( A, [A|_]) = true. 
% CUIDAR ... em funcoes nao hah ? em ?=> ... 
% sem backtracking em funcoes
pertence_02(A, [B|L]) = X => 
             A != B,
             X = pertence_02(A,L).

% -- visao lógica
uniao_01( [] , X, Y ) ?=> Y = X, !. 
uniao_01( A , L2, R  ) =>  A = [X|L1] , 
                           R = [X|L3] , 
                           uniao_01( L1, L2, L3 ).

%uniao_02( [], X ) = Y => Y = X. 
uniao_02( [], X ) = X. 
uniao_02( [X|L1], L2 ) = L3 => L3 = [X | uniao_02( L1, L2 )].



%% adiciona X no inicio da lista se este não estiver na lista
add_X_lista_01(X, [ ], Z )  ?=> Z = [X]. 
add_X_lista_01(X, Y, Z) ?=>
          pertence_01(X, Y),
          Z = Y.
add_X_lista_01(X, Y, Z) =>
          Z = [ X | Y ].



add_X_lista_02(X, [ ]) = [X]. 
add_X_lista_02(X, Y) = Z =>
          pertence_02(X, Y) = true,
          Z = Y ;
          Z = [ X | Y ].
          
%%add_X_lista_02(X, Y) = Z => Z = X ++ Y.
          %%Z = [ X | Y ].

app(Xs, Ys, Zs) , 
        (Xs == [])
        ?=>  
        Zs = Ys, !.  
app(L1, Ys, L3),
        (L1 = [X|Xs]),  %% Unification
        (L3 = [X|Zs])   %% Unification
        => 
        app(Xs,Ys,Zs). 
%% The return value always MUST be EXPLICITED         
%%BUT "app([X|Xs], Ys, [X|Zs]) => app(Xs,Ys,Zs)." ONLY FOR PROLOG 

%%% horn clause is acceptable
my_app([], Y, Y).  
my_app([X|Xs],Ys,[X|Zs]) 
       :- my_app(Xs,Ys,Zs).

%%% from NENG-FA
append(Xs,Ys,Zs),var(Xs) =>
        append_aux(Xs,Ys,Zs).
append([],Ys,Zs) =>  
        Ys = Zs.
append([X|Xs],Ys,Zs) =>
        Zs = [X|Zs1],
        append(Xs,Ys,Zs1).
    
append_aux(Xs,Ys,Zs) ?=>
        Xs = [],
        Ys = Zs.
append_aux(Xs,Ys,Zs) =>
        Xs = [X|Xs1],
        Zs = [X|Zs1],
        append(Xs1,Ys,Zs1).

%% Functional View
my_take([],0) = [].
my_take(_,0)   = [].
my_take([],_)  = [].
%my_take([],X)  = [] =  X < 0, printf("\n Negative Input").
my_take( [A|B], N ) = [ A |  my_take(B , (N-1) ) ].

%% Logical View
my_take_L([] , 0 , X ) => X = [].
my_take_L( _ , 0 , X ) => X = [].
my_take_L([] , _ , X ) => X = [].
my_take_L(_,X,_ ) , X < 0 =>  
        printf("\n ERROR: Negative Input").        
%%% take care with the Pattern-Matching ...
my_take_L( [A|B], N, Sol ) , N >= 0 =>
        my_take_L(B , (N-1) , C ),
        Sol =  [A|C].

example_partitions(X) => 
    X = [[4,5], [2,4,5], [2,4,5], [2,5], [1,4], [1,2,4], 
        [1,2,4], [1,2], [1,4,5], [1,2,5], [1,4], [1,2]].


%disjunctive logic predicate
are_disjunct([],_) ?=> true, !. 
        are_disjunct([A | L1], L2) =>
        not membchk(A, L2),
        are_disjunct(L1, L2).      

/*
  It is not working ...


build_some_disjunct([],[]) ?=> true, !.
build_some_disjunct([A],[A]) ?=> true, !.
build_some_disjunct( Xs, Ys) ?=>
        Xs = [A, B | L1 ],
        Ys = [A, B | L2 ],
        are_disjunct(A,B),
        
build_some_disjunct( [ B | L1 ],[ B | L2]). 

build_some_disjunct( Xs, Ys ) =>
                Xs = [A, B | L1 ],
                Ys = [B | L2 ],
                % not are_disjunct(A,B),
              build_some_disjunct( [ B | L1 ],[ B | L2] ). 
*/        
%                uniao_02( [], X ) = X. 
%        uniao_02( [X|L1], L2 ) = L3 => L3 = [X | uniao_02( L1, L2 )].
        
%%% NO BACTRACKING IN FUNCTIONS .... DO not forget        
build_some_disjunct( [] ) = [].
%build_some_disjunct([X]) = [X].
build_some_disjunct( [A] ) = X => X = A.
build_some_disjunct( [A, B | Xs ] ) =  Ys =>
        are_disjunct(A,B),
        Ys = [A , B | build_some_disjunct(Xs)].

build_some_disjunct( [A, B |Xs] ) =  Ys =>
        not are_disjunct(A,B),
        Ys = [ A | build_some_disjunct(Xs)].
        

%        build_tuple([A],[]) = throw $error("\n L1 > L2 (%w)",build_tuple,A).
%        build_tuple([],[B]) = throw $error("\n L1 < L2 (%w)",build_tuple,B).

build_tuple([],[])  = [].
%build_tuple([A],[]) => print("\n L1 > L2 (%w)", A).
%build_tuple([],[B]) => print("\n L1 < L2 (%w)", B).
build_tuple([A|L1], [B|L2]) = Ys =>
        Ys = [ (A,B) | build_tuple(L1,L2)]. 
/*
X = ['159-008', '159-002', '159-219', '159-010'], Y=['ahroo', 'bwur', 'bwur', 'bwur'], Z = build_tuple(X,Y).
X = ['159-008','159-002','159-219','159-010']
Y = [ahroo,bwur,bwur,bwur]
Z = [('159-008',ahroo),('159-002',bwur),('159-219',bwur),('159-010',bwur)]

*/
/*
find_a_locomotive(Start, [(Loc,Where_is)|Rest]) |  Where_is == Start = Loc.
find_a_locomotive(Start, [ (Loc,Where_is) |Rest] )  |  Where_is \= Start
 = find_a_locomotive(Start, Rest).
*/


%%%% FUNCTIONAL VERSION .....
ascendent_order(L) = R =>
        L1 = sort(L),
        if L == L1 then 
                R = true 
        else
                R = false
        end.

descendent_order(L) = R =>
                L1 = sort(L),
                L2 = reverse(L1),
               % ((L == L2), R = true ; R= false).    %%%% admit backtracking
                if (L == L2) then 
                        R = true 
                else
                        R = false
                end.
        
/* versao declarativa */
diff_A_B(A,[], R) ?=> R = A.
diff_A_B(A,[H|B], Temp_2) ?=>
        membchk(H,A),
        Temp_1 = delete(A, H),
        diff_A_B(Temp_1, B, Temp_2).

diff_A_B(A,[H|B], Temp) =>
        not membchk(H,A),
        diff_A_B(A, B, Temp).


/* versao declarativa */
/*
OU ...
diff_A_B(A, [], R) ?=> R = A.
diff_A_B(A, [H|B], R) ?=>
    (membchk(H, A) ->
        Temp = delete(A, H),
        diff_A_B(Temp, B, R)
    ;
        diff_A_B(A, B, R)
    ).

*/

% Função funcional melhorada
diff1_A_B(A,[]) = R => R = A.
diff1_A_B(A, [H|B]) = R =>
        (membchk(H, A) ->
            Temp = delete(A, H),
            R = diff1_A_B(Temp, [H|B])
        ;
            R = diff1_A_B(A, B)
        ).

% list comppreenhsion
diff2_A_B(A, B) = [X : X in A, not membchk(X, B)].   
%   R = [Y | Y in A,  (not member(Y,B))].

%% 100% funcional
diff3_A_B(A, []) = A.
diff3_A_B(A, [H|B]) = R =>
    Temp = delete_all(A, H),
    R = diff3_A_B(Temp, B).
 


    