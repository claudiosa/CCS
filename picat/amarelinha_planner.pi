/*
By ccs and Roger

Busca em Profundidade com Prolog
	Onde a posicao inicial era: b,a,c,_,_,_,_ 
	 A posicao final era: _,_,_,_,c,a,b
	 Total de estados: 29
	 Total de movimentos: 28
	 T1: 24.480552 	 T2: 24.481631  msec
	 Tempo total: 0.0010792490  msec
	true.


	Busca em Largura OTIMO com Prolog
	 A posicao final era: _,_,_,_,c,a,b
	 Total de estados: 9
	 Total de movimentos: 8
	 T1: 2.290018 	 T2: 24.449603  msec
	 Tempo total: 22.1595845060  msec

em PICAT
 Posicao inicial (estado): bacoooo 
 Posicao final (estado): oooocba
 Total de estados: 81
 Total de movimentos: 80 
 ======================
 
real	0m0.032s
user	0m0.024s
sys	0m0.004s

*/

import datetime.
import planner.

/* pontos iniciais e finais do problema */
index(-)
pt_origem(  [  b ,  a ,  c , o , o , o , o ]  ).

index(-)
pt_final( [o,o,o,o,c,a,b] ).

final( [o,o,o,o,c,a,b] ) => true .


/* movimentos permitidos  ===> veja o diagrama*/
%ccs@goedel:/home/ccs/Dropbox/CCS/picat$ picat amarelinha_planner.pi 
%['X4 <-> X2','X1 <-> X2','X4 <-> X6','X4 <-> X2','X6 <-> X7','X4 <-> X6','X4 <-> X3','X4 <-> X5']
/*
   X2    X5
X1    X4    X7
   X3    X6
*/

action([ X1,X2,X3,X4,X5,X6,X7 ], S1, Action, Action_Cost ) ?=>
    Action_Cost = 1,
    Action = 'X4 <-> X2',
	((X2 == o, X4 !=o) ;  (X4 == o, X2 != o)), 
	S1 = [ X1,X4,X3,X2,X5,X6,X7 ]. 
	
action( [ X1,X2,X3,X4,X5,X6,X7 ] , S1, Action, Action_Cost ) ?=>
    Action_Cost = 1,
    Action = 'X4 <-> X3',
	((X3 == o, X4 !=o) ;  (X4 == o, X3 != o)), 
	S1 =  [ X1,X2,X4,X3,X5,X6,X7 ] .
	
action( [ X1,X2,X3,X4,X5,X6,X7 ] , S1, Action, Action_Cost ) ?=>
    Action_Cost = 1,
    Action = 'X1 <-> X2',
       	(X2 == o, X1 !=o),
	%%%  (X1 == o, X2 != o)), 
       S1 = [ X2,X1,X3,X4,X5,X6,X7 ] .
       
action( [ X1,X2,X3,X4,X5,X6,X7 ], S1, Action, Action_Cost ) ?=>
    Action_Cost = 1,
    Action = 'X3 <-> X1',
       X3 == o, (X1 != o),
       S1 = [ X3,X2,X1,X4,X5,X6,X7 ].

action( [ X1,X2,X3,X4,X5,X6,X7 ],  S1, Action, Action_Cost ) ?=>
    Action_Cost = 1,
    Action = 'X4 <-> X6',
	((X6 == o, X4 !=o) ;  (X4 == o, X6 != o)), 
	S1 =  [ X1,X2,X3,X6,X5,X4,X7 ] .

action( [ X1,X2,X3,X4,X5,X6,X7 ] , S1, Action, Action_Cost ) ?=>
    Action_Cost = 1,
    Action = 'X4 <-> X5',
	((X5 == o, X4 !=o) ;  (X4 == o, X5 != o)), 
        S1 =  [ X1,X2,X3,X5,X4,X6,X7 ].
			
action( [ X1,X2,X3,X4,X5,X6,X7 ], S1, Action, Action_Cost ) ?=>
    Action_Cost = 1,
    Action = 'X5 <-> X7',
	((X5 == o, X7 !=o) ;  (X7 == o, X5 != o)), 
	S1 =  [ X1,X2,X3,X4,X7,X6,X5] .
 
action( [ X1,X2,X3,X4,X5,X6,X7 ]  , S1, Action, Action_Cost ) =>
    Action_Cost = 1,
    Action = 'X6 <-> X7',
      	((X6 == o, X7 !=o) ;  (X7 == o, X6 != o)), 
         S1 =  [X1,X2,X3,X4,X5,X7,X6].

/* move( _ , _) => 
         printf("\n NONE RULES WERE MATCHED  -- Houston problem").*/
/*
Picat> [[b,a,c,o,o,o,o]] = X 
X = [[b,a,c,o,o,o,o]]
yes
Picat> [[b,a,c,o,o,o,o]] = [FX]  
FX = [b,a,c,o,o,o,o]
yes
Picat> [[b,a,c,o,o,o,o]] = [[FX]]
NO
*/

main  ?=>  
    pt_origem(X),    %%%write([X]),
    pt_final(Y),
    % printf("\n Posicao inicial: %w ", X),
    T1 = current_time(),
    time(best_plan_unbounded( X , Solucao)), %%% CPU TIME
      T2 = current_time(), 
    /* X  é o nó inicial, logo entra na lista inicial */
 
    write(Solucao), 
  
    Total := length(Solucao) ,
    Num_Movts := (Total -1) ,
   % T_CPU :=T2-T1,
    printf("\n Posicao inicial (estado): %w ", X),
    printf("\n Posicao final (estado): %w", Y),
    printf("\n Total de estados: %d", Total), 
    printf("\n Total de movimentos: %w", Num_Movts),
    printf("\n Tempo corrente de CPU INIC: %w  FIM %w",     T1, T2),
    printf(" \n ======================\n ")
    .
   
main => nl, write('Sem solução ... caminho não encontrado!' ) .

/*************************************************************/

%% cond. de parada.... o nó corrente é o desejado
busca_DFS( [ No_corrente | Caminho] , L) ?=>
           pt_destino(No_final),
% 	   write(No_final),   write(No_corrente), 
	   No_corrente == No_final,
 %       printf(" \n  == TESTE de PARADA passou   ==  "),
	   L = [ No_corrente | Caminho ],
	   printf(" \n PARADA ....: OK"),
	   write(L). 

busca_DFS(  [Nodo | Caminho], Solucao) =>
            move(Nodo , Novo_nodo), 
            not( member(Novo_nodo, [Nodo|Caminho]) ),
	  %printf(" \n novo %w %w %w", Novo_nodo, Nodo, Caminho),
           busca_DFS(  [Novo_nodo , Nodo | Caminho ] , Solucao).

/*************************************************************/
/*
   X2    X5
X1    X4    X7
   X3    X6
*/
/************************************************************/
w_amarelinha( [ X1,X2,X3,X4,X5,X6,X7 ] ) ?=>
       write(' ') , write(X2), write('   ' ) , write(X5), nl,
       write(X1), write('   ' ) , write(X4),  write('  ') , write(X7) , nl, 
       write(' ' ), write(X3), write('   ' ) , write(X6).

w_amarelinha(  _ )   => printf("\n  ===================\n").   
 
 write_L([])  ?=> true.
 write_L([X|L]) =>  w_amarelinha( X ), nl, nl, write_L(L).
/***REVER reverse******************************************************/
reverse([],R) ?=>  R=[].
reverse([A|B], Inverted) => reverse(B, X),
                             append(X, [A], Inverted) . 

/*
From Neng-Fa:
 I think you messed up input and output arguments. 
 Only input arguments can be written in head patterns;
  outputs must be explicitly written using unification. 
  For example, reverse/2 should be defined as follows:

reverse([],R) => R=[].
reverse([A|B], Inverted) => reverse(B, X),
                               append(X, [A], Inverted).
					  					  
***********************************************************/