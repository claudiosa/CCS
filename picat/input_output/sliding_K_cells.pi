%%% picat sliding_K_cells.pi < sliding_K_cells.txt   

import util. % use split
import cp.

main =>
  %%Num_casos = to_int(read_line()),   %%%OU
  Num_casos = read_line().to_int(),
  foreach (TC in 1..Num_casos)
    [N_Valores, W_Janela] = [to_int(W) : W in read_line().split()],
    % foreach (Caso in 1..N_Valores) %%% DESNECESSARIO
    L = [to_int(W) : W in read_line().split()],
    do_case(TC, N_Valores, W_Janela, L )
    end.

do_case(TC,  N_Valores,  W_Janela, L ) =>
    %% printf("\nCaso #%w: \nQuantos:%w : Janela:%w ==> Lista: %w \n", TC,  N_Valores,  W_Janela, L ),
     model(TC, N_Valores,  W_Janela, L ) 
     .
   
model(Caso, N_Valores,  W_Janela, L ) =>
    
    N_valores = to_array( L ), %% array de N_valores
    Xs = new_array( N_Valores ), %% L tem N valores em um array
    Xs :: 0..1 ,
   
    [Begin, End] :: 1 .. N_Valores,
    End - Begin #= W_Janela - 1 ,
    End #>= Begin,
   
    sum([ Xs[J] : J in 1..N_Valores] ) #= W_Janela ,
        Sum #= sum([ (N_valores[J] * Xs[J]) : J in 1..N_Valores] ),
    
   %% from HAKAN's idea ... this line
   /* WORKS FINE
    foreach (I in 1 .. N_Valores)
         (I #>= Begin #/\ I #=< End) #<=> Xs[I] #= 1
    end,    
       
    */
   %%% by CCS and works fine also 
     foreach ( I in 2 .. (N_Valores-1) )
        (Xs[I] #= 1) #=> (Xs[I-1] #= 1 #\/ Xs[I+1] #= 1)
     end,  
   
   %% garante a continuidade se o tamanho da janela for igual o 
   %% tamanho do vetor
   ( ((Xs[1] #= 1) #/\ (Xs[N_Valores] #= 1))#<=>(W_Janela #= N_Valores)),
   
    solve( [$max(Sum)] , Xs ),
    %printf("\nCaso:%w | Janela:%w  | Xs: %w | SOMA: %w\n", Caso,  W_Janela, Xs, Sum )
    printf("\nCaso:%w | SOMA: %w | Escolhas: ", Caso,  Sum ),
    print_index_array(Xs,N_Valores), nl
    .

print_index_array(Xs,N_Valores) =>
       foreach (I in 1 .. N_Valores)
        if (Xs[I] == 1) then
          printf("%w ", I)
         end
        end.  
      


    
    /**********************************************
    TO BE STUDY in the FUTURE
         
   
     foreach (I in 1 .. N_Valores)
    %  foreach (I in 2 .. N_Valores-1) 
      if (I == 1) then
        (Xs[I] #= 1) #=> (Xs[I+1] #= 1)
      
      elseif  (I == N_Valores) then
        (Xs[I] #= 1) #=> (Xs[I-1] #= 1)
      
      elseif ( (I > 1)  || (I < N_Valores) ) then
        (Xs[I] #= 1) #=> (Xs[I-1] #= 1 #\/ Xs[I+1] #= 1)
      else
      printf("\n .........")
         
     end,     
   
   
   %% the beginning ... some bugs
   % (((Xs[1] #= 1) #/\ W_Janela #> 1)  #<=> (Xs[2] #= 1)),
   % ((Xs[1] #= 1) #/\ W_Janela #= 1)  #<=> (Xs[2] #= 0)),
   
   %% the ending
    %(((Xs[N_Valores] #= 1) #/\  W_Janela #> 1)  #<=> (Xs[N_Valores-1] #= 1);
    % ((Xs[N_Valores] #= 1) #/\  W_Janela #= 1)  #<=> (Xs[N_Valores-1] #= 0)),
       
    **********************************************/
          
    



