
import datetime.

main ?=>  
      model    
     ,fail %% to force all solutions 
     .

main => nl, 
   write('No more solution in the model  ... !!!!' ) .

model => 
    est_origem(X),    %%%write([X]),
    T1 = current_time(),
    /* X  é o nó inicial, logo entra na lista inicial */

    time( busca_DFS( [X] , Solucao) ), %%% CPU TIME
    % L = findall( Solucao, busca_DFS( [X] , Solucao) ) ,
    % printf(" \n ... TODAS SOLUCOES ....: OK : %w" , L)
    T2 = current_time(),

    %%Sol_invertida = reverse(  Solucao ), %% OR
    reverse_2(Solucao, Sol_invertida),
    %write_path(Sol_invertida),
    write_L(Sol_invertida),
    length(Solucao) = Total,
    Num_Movts := (Total -1),
    %T_CPU := T2-T1,
    est_destino(Y),
    printf("\n Initial Position (state): %w ", X),
    printf("\n Final  Position (state): %w", Y),
    printf("\n Total of states: %d", Total), 
    printf("\n Total of moviments: %w", Num_Movts),
    printf("\n CPU TIME INIC: %w  FIM %w",     T1, T2),
    printf(" \n =========================================\n ")
    . %%% there is a dot HERE    
/*************************************************************/
/* Initials states or start points */
index (-)
est_origem( [esq_1A, esq_1A, esq_1A, esq_1A ] ).

index (-)
est_destino( [dir_2B,dir_2B,dir_2B,dir_2B] ).
  
/*************************************************************/
%% the generic DFS 
busca_DFS( [ No_corrente | Caminho] , L) ?=>
%       the halting conditions
        est_destino(No_final),
	      No_corrente == No_final,
 %      printf(" \n  == TESTE de PARADA passou   ==  "),
	      L = [ No_corrente | Caminho ],
	      printf(" \n ... HALTING CONDITION ....: OK : %w" , L). 

/* aqui é o cerne do processo de busca */
busca_DFS(  [Nodo | Caminho], Solucao) =>
  
    /* Ache um movimento:: Find a move */
    %printf("\n corrente: %w" , Nodo), 
    move(Nodo , Novo_nodo), 
    % printf("\n novo: %w" , Novo_nodo), 
    /* Verificar se eh seguro  este estado */
    seguro(Novo_nodo),
    /* Verifique se já não esteve em uma tentativa anteriores */
    not( member(Novo_nodo, [Nodo|Caminho]) ),
    %printf(" \n novo %w %w %w", Novo_nodo, Nodo, Caminho),
    busca_DFS(  [Novo_nodo , Nodo | Caminho ] , Solucao).

/*************************************************************/
  /* Definindo os movimentos possiveis */
  
  /* Move Pastor + Lobo */
  move( [X,X,O,R ] , Novo ) ?=>  oposto(X,Y), 
                                 O \== R,
                                 Novo = [Y,Y,O,R].
  
  /*Move Pastor + Ovelha */
  move( [X,L,X,R] ,  Novo)  ?=> oposto(X,Y) , 
                                Novo = [Y,L,Y,R] . 
  
  /* Move Pastor + Repolho */
  move( [X,L,O,X] , Novo)  ?=>  oposto(X,Y), 
                                O \== L,
                                Novo = [Y,L,O,Y] .  
  
  /* Move Pastor sozinho */
  move( [X,L,O,R] , Novo)  =>  oposto(X,Y), 
                                %% muitas combinacoes aqui 
                                Novo = [Y,L,O,R]  .  
  
  %% para fins de depuracao
  %move( _ , _) => 
  %printf("\n NONE RULES WERE MATCHED  -- Houston problem").

index (+,-)  (-,+) 
      oposto(esq_1A , dir_2B).
      oposto(dir_2B , esq_1A).

 /* O lobo come a ovelha se pastor nao estiver junto */	
 seguro( [P,L,O,_ ] ) ?=> P == L, P == O.
 %% printf("\n 1xxx"), P == X, printf("\n 2xxx") .  
 
 /* A ovelha come o repolho  se pastor nao estiver junto*/
 seguro( [P,_,O,R] ) ?=>  P == O , P == R.
 %%printf("\n 3xxx"), P == X, printf("\n 4xxx") .  

 seguro( _ ) =>  true.
 % printf("\n SEGURO FALHOU").
 %
/********************** diversos *******************/  
 qt_move([], X)  ?=> X = 0.
 qt_move([_|L],N) => qt_move(L,N1), N is N1 + 1.

  write_path( X )  ?=>  X == []. 
  write_path( [H1,H2|T] ) =>
        write_move(H1,H2),
        write_path([H2|T]).
 
 /* *********************************************** */
  write_L( X )  ?=>  X == [], printf("\n ...."). 
  write_L( [H|T] ) =>
        printf("\n => %w", H),
        write_L( T ).
 
/* as travessias */
%% Casamento de padrao OK aqui 
  write_move(  [X,W,G,C ] , [Y,W,G,C ] )?=> 
        X \== Y, 
        write('The Pastor atravessa o rio  from '), 
      	write(X), write(' to '),write(Y), nl.
 
  write_move(  [X,X,G,C ] , [Y,Y,G,C ] )?=> 
     X \== Y, 
     write('The Pastor leva the Lobo from '),
     write(X),  write(' of the river to '), write(Y),nl.
 
  write_move(  [X,W,X,C ] , [Y,W,Y,C ] )?=> 
   X \== Y, 
   write('The Pastor leva the Ovelha from '),
   write(X), write(' of the river to '), write(Y),nl.
 
  write_move(  [X,W,G,X ] , [Y,W,G,Y ] ) => 
    X \== Y, 
    write('The Pastor leva the Repolho from '), 
	  write(X), write(' of the river to '), write(Y), nl.

   %write_move( _ , _ ) => printf("\n write_move FALHOU").

   %%true.
/***********************************************************/
reverse_2([],R) => R=[].
reverse_2([A|B], Inverted) => reverse_2(B, X),
                              append(X, [A], Inverted).
/***********************************************************/                                                 
/* Farmer's Problem -
 ===> quanto a correspondencia dos functores...

Cabbage -------------------|
Goat   ---------------|    |
Wolf   ----------|    |    |  
Farmer -----|    |    |    | 
            V    V    V    V
move( [esq_1A,esq_1A,esq_1A,esq_1A ] , [dir_2B,dir_2B,dir_2B,dir_2B) ).
                        ^                           ^
                        |                           |
                        |                           |
                   Current State                 New State
                      
****************************************** */

