
% module dist_vertex.
import util.
import cp.
% import sat.
main => go.

go =>
  % nolog,
   K_com =  160 , %%% Number of Community or CLASSES or Groups
   % K_com =  17 , %%% Number of Community or CLASSES or Groups
   % K_com =  6 , %%% Number of Community or CLASSES or Groups
   
   Size_K = 5 , %% Size Community of CLASSES--Groups
   printf("\n Next Vector: %w", dist_vertex(K_com, Size_K)).

%%% FUNCTIONS VECTOR 
dist_vertex(K_com, Size_K) = Res =>
   
   Size =  K_com * Size_K ,
   X_Nodes = new_array(Size),
   X_Nodes :: 1..Size,
     
   % Which group does a node belong to?
   All_Groups = [[ I : _ in 1..Size_K] : I in 1..K_com ],
   printf("\nAll_Groups -- a LIST of lists %w", All_Groups),
   
   Groups = flatten(All_Groups),
   println(groups_and_positions=Groups),
      
   % Anchor nodes -- OK
   L_anchor = [(I*Size_K)+1 : I in 0..(K_com-1)],
   println(l_anchor = L_anchor),

   %% Assign the "anchor" nodes (first in each class)
   foreach(I in L_anchor)
     X_Nodes[I] #= I
   end,

   % Ensure that two node links to each other.
   % Only an anchor node links to itself.
   assignment(X_Nodes, X_Nodes),
   
   %%% very  very SLOW ... 
   %% I REMOVE it --- takes a lot of time
   %%% NO DIFFERENCE at the end result in small values
   %%
   %% hakank: I rewrote this a little:
   %%  - added if( K_com >= Size_K )
   %%  - replaced nvalue/2 with all_different
   %% Now it does make a difference for small values, e.g. K_com = 6, and Size_K = 5
   %% And it's quite fast: 2.7s for K_com = 160 and Size_K = 5
   %% Also, note that I moved this from the last place in the program to this place.
   %% This is the "balance" constraint.
   %%
   foreach(G in 1..K_com)
      if( K_com >= Size_K ) then
        % The nodes in group G
        ThisGroup = [I : I in 1..Size, Groups[I] == G],
        println(node_group=ThisGroup),
        % The group that a node link to
        LinkGroups = [T : I in ThisGroup, element(X_Nodes[I], Groups,T)],
        all_different(LinkGroups)
        %% nvalue(K_com , LinkGroups)
      end
   end,
   
   %%% 
   all_different(X_Nodes),

   
   % The non anchor nodes:
   % - cannot link to a node in the same group --- it is ENOUGH
   % - cannot link to itself
   foreach(I in 1..Size , not(member(I,L_anchor) ))
      % Cannot link to a node in the same group
      element(X_Nodes[I], Groups, Value_G ), % the group that X_Nodes[I] link to
      Value_G #!= Groups[I]
      %,X_Nodes[I] #!= I % Only the L_anchor nodes can link to themselves. Not needed.
   end,
   
   % For each group there must be K_com different values of links to groups, i.e.
   % some node in the group must link to each of the other groups.
 
   %%% this constraint has not any effects  ...
   %%% the previous constraint it is enough
   %% I am not sure if necessary because any
   %% VAR constraint is related or connected
   %%
   %% hakank:
   %% This constraint don't have any effect at all.
   %% It just states that the index of every member in this group
   %% is different,which is - of course - true, since we
   %% generated the list that way.
   %% So I comment this.
   /*
   foreach(G in 1..K_com)
      % The nodes in group G
      ThisGroup = [I : I in 1..Size, Groups[I] == G],
      println(thisGroup=ThisGroup),
      if( K_com >= Size_K ) then
      (
        all_different(ThisGroup)
        %, printf("\t x-")
      )	
      end

    end,   
   */
   
   %% hakank:
   %% TESTING: This shows that it's possible that
   %% two nodes in the same group links to the same group, i.e.
   %% that can be unbalanced. This is why I wrote the constraint
   %% below, which is - I admit - very slow.
   %% X_Nodes[2] #= 7, X_Nodes[3] #= 8,

   %Vars = X_Nodes.to_list,
   Vars = to_list( X_Nodes ),
 
   %println(solve_X_Nodes = X_Nodes),
   %%% All_SOL = solve_all([], Vars),
   % solve($[ff], Vars),
   solve($[], Vars),   

   /*
   by HAKAN
   println(x_nodes=X_Nodes),
   foreach(I in 1 .. Size)
      println([i=I,group=Groups[I], xI=X_Nodes[I],link_to_group=Groups[X_Nodes[I]] ])
   end,
   nl,
   */
   
   foreach(I in 1 .. Size)
      if ( member(X_Nodes[I] , L_anchor) ) then
         print_n(30)
      end,		
      printf("X[%d]: %d->G:%d ", I, X_Nodes[I], Groups[X_Nodes[I]] )
   end,
   nl,

   %% hakank: show how many nodes in a group links to the same (other) group.
   %% I.e. "balance checking".
   println("\n\nChecking linking to other groups. "),
   foreach(G in 1..K_com)
      ThisGroup = [I : I in 1..Size, Groups[I] == G],
      % The group that a node link to
      LinkGroups = [T : I in ThisGroup, element(X_Nodes[I], Groups,T)],
      nvalue(NumDiffValues , LinkGroups),
      if NumDiffValues != Size_K then
        printf("Number of different groups assigned to (%d) != number of nodes in a group (%d)\n", NumDiffValues,Size_K),
        printf("This group (%d) has some nodes linking to the same (other) group:\n", G),
        println(this_group_node_ids=ThisGroup),
        println(link_groups=LinkGroups),
        nl
      end  
   end,
   nl,

   Res = X_Nodes.
   

%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PRINT
print_n(N) =>
   nl,
   foreach(I in 1 .. N)
      printf("=")
   end,
   nl.   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PRINT