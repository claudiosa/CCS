
/*
DCG's


*/

as --> [].  
as --> [a], as.
/*
Uma GLC do tipo: { S --> vazio,  S --> aS }  
*/

aSb --> [].  
aSb --> [a], aSb , [b].
/*
Uma GLC do tipo: { S --> vazio,  S --> aSb }  
*/




%%% a DCG ... arity=3
like(What) --> "I like", list(What), ".", "#", list(_).
like([]) --> [].

%%% take from @@
get_rest(Rest) --> list(_), "@@", get_rest( Rest ).
get_rest([]) --> [].

%%% 
list([]) --> [].
list([L|Ls]) --> [L], list(Ls).


t_aa => L_inp = "aa",
        as( L2, L_inp, L3),
        printf("\nL_inp: ==>%w" , L_inp),
        printf("\nL2: ==>%w" , L2),
        printf("\nL3: ==>%w\n" , L3).

main =>
    L_inp = "I like THIS YEAR.#The rest is ignored ##",
    like(L2, L_inp, L3),
    printf("\nL_inp: ==>%w" , L_inp),
    printf("\nL2: ==>%w" , L2),
    printf("\nL3: ==>%w\n" , L3),
    rest.
rest =>
    L_inp = "I like THIS YEAR. @@   The rest is NOT ignored ##",
    get_rest(L4, L_inp, L5),
    printf("\nL_inp: ==>%w" , L_inp),
    printf("\nL4: ==>%w" , L4),
    printf("\nL5: ==>%w\n" , L5).

