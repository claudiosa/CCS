/* uma frase */
carro --> pneus, cambio, combustivel.

/* Marca de Pneus */
pneus --> [good_YEAR].
pneus --> [mICHELIN].

/* Tipo de cambio */
cambio --> [manual].
cambio --> [automatico].

/* Tipo de combustivel */
combustivel --> [gasolina].
combustivel --> [diesel].
combustivel --> [eletrico].

%%% eh diferente disto
%% combustivel --> [gasolina, diesel, eletrico].

/*
O operador --> traduz para seguintes clausulas:

carro(A, B) :-
    pneus(A, C),
    cambio(C, D),
    combustivel(D, B).

pneus([good_YEAR|A], A).
pneus([mICHELIN|A], A).

cambio([manual|A], A).
cambio([automatico|A], A).

combustivel([gasolina|A], A).
combustivel([diesel|A], A).
combustivel([eletrico|A], A).

TESTAR:
?- carro(X,Y), write(X), write(' <---> '), write(Y), nl.
equivalente a
?- phrase(carro,X,Y), write(X), write(' <---> '), write(Y), nl.

?carro(X,[]), write(X), write(' <---> '),  nl.

?- carro(X,[]), member(manual, X), write(X),write(' <---> '),  nl.

adiciona uma palavra a frase na saida
?- carro(X,[automatico]), write(X), write(' <---> '),  nl.


Jah estas frases são invalidas:
?- carro([X |eletrico],[]), write(X), write(' <---> '),  nl.
false.
?- carro([eletrico|X],[]), write(X), write(' <---> '),  nl.
false.

Contudo esta é bem diferente e acha os carros eletricos
?- carro(X ,[]), member(eletrico, X),  write(X), write(' <---> '),  nl.


UM TRACE para entender:

[trace]  ?- carro(X,[]), write(X), write(' <---> '),  nl.
   Call: (11) carro(_4080, []) ? creep
   Call: (12) pneus(_4080, _5758) ? creep
   Exit: (12) pneus([good_YEAR|_5758], _5758) ? creep
   Call: (12) cambio(_5758, _7386) ? creep
   Exit: (12) cambio([manual|_7386], _7386) ? creep
   Call: (12) combustivel(_7386, []) ? creep
   Exit: (12) combustivel([gasolina], []) ? creep
   Exit: (11) carro([good_YEAR, manual, gasolina], []) ? creep
   Call: (11) write([good_YEAR, manual, gasolina]) ? creep
[good_YEAR,manual,gasolina]


TENHA EM MENTE:
1a. 
?- phrase(carro, X, Y).
X: é uma INPUT - frase
Y: um resto a ser anexado a INPUT, "em
   geral []". 

2a.
?- phrase(carro, [good_YEAR, automatico], []).
false
Basta ver a árvore sintática ... frase incorreta

3a.
Toda DCG acresceta 2 argumentos:
?- listing(carro).
veja a console
carro --> pneus, cambio, combustivel.

4a.
Se árvore percorrida for OK, 
um resto pode ser adicionado a frase
?- phrase(carro, [good_YEAR, manual, gasolina, 'bmw 328'] , ['bmw 328']).
true.
um resto pode ser adicionado a entrada
?- phrase(carro, X , ['bmw 328']).
X = [good_YEAR, manual, gasolina, 'bmw 328'] ;
X = [good_YEAR, manual, diesel, 'bmw 328'] ;

5a. Regras de listas em Prolog 
DEVEM SER OBEDECIDAS ....
isto OK
?- phrase(carro, [good_YEAR | L] , ['bmw 328']).
L = [manual, gasolina, 'bmw 328'] ;
L = [manual, diesel, 'bmw 328'] ;

idem
?- phrase(carro, [X | L] , ['bmw 328']).
X = good_YEAR,
L = [manual, gasolina, 'bmw 328'] ;

MAS:
?- phrase(carro, [X | gasolina, L ] , ['bmw 328']).
e
?- phrase(carro, [X | [gasolina, L] ] , ['bmw 328']).
*/