import os.
import util.
import math.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


main ?=> Status = command("clear") ,
		printf("====================================== %d OK", Status),
        Map = read_Map_1("MAP_02.txt") , 
             
        %writeln(map=Map),
        print_map( Map ),
        N = 2, %% dois agentes
        % INICIO do LOOP 
        J = 1,
        %while( (not final( Map )) || J < 10   )
        while(  J < 20   )
			foreach(I in 1 .. N) %% one action per time 
			Map = agent(I, Map) %% New_Map 
			end,
			J := J+1 
         end, 


 %       position_XY( N, [X,Y], Map ), 
 %       printf("\n MAP: %w \n [X:%w....Y:%w] \n", Map, X, Y),
        %New_Map = update_MAP(3,[X,Y], Map ),
        %final( Map ),
      	%%test_Array_1,
        print_map( Map ),
        %% FIM
        printf("\n====================================== \n")
        .
main =>  printf("\n Something Wrong !!!").

/*********** << AGENTES + ACOES *************/
%%% IN FUNCTIONS: no backtrackable rules are allowed 
%%% Backtrackable rules only in predicates

agent(N, Grid) = New_Grid => 
				position_XY(N, [X,Y], Grid ), %% take the position
				printf("AGENT %d IS IN: [%w , %w]", N, X,Y), 
				New_Grid = move(N, [X,Y], Grid ),  % action
				printf("\n\n==> New Grid: "),
				print_map( New_Grid ).
				
 				
/** possible movements */
move(N, [X,Y], Grid ) =	 New_Grid =>
     
     %writeln(grid_ANTES = Grid),
     %%printf("\n%d: %w.....%w ....", N, X,Y),
	
     [Row, Col] = [Grid.length , Grid[1].length ],
  %   Row = Grid.length ,
  %   Col =  Grid[1].length ,
     
     /** UP **/
     if (X > 1 && (Grid[X-1,Y]=='*' || Grid[X-1,Y]=='$') && f_bool_RAND()== true) then
        Grid[X,Y] := '*',			
		Grid[X-1,Y] := N		
    
     /** DONW **/
    elseif (X < Row && (Grid[X+1,Y]=='*' || Grid[X+1,Y]=='$') && f_bool_RAND()== true  ) then
        Grid[X , Y] := '*',			
		Grid[X+1 ,Y] := N
		 		
    /* LEFT */
     elseif(Y > 1 && (Grid[X,Y-1]=='*' || Grid[X,Y-1]=='$') && f_bool_RAND()== true ) then
        Grid[X,Y] := '*',			
		Grid[X,Y-1] := N		
     
     /** RIGHT **/
     elseif(Y < Col && (Grid[X,Y+1]=='*' || Grid[X,Y+1]=='$') && f_bool_RAND()== true ) then
        Grid[X,Y] := '*',			
		Grid[X,Y+1] := N
	
	/**** CORNERS cols and lines ******/
	/** upper line **/	
	elseif(X == 1 && (Grid[X+1,Y]=='*' || Grid[X+1,Y]=='$') && f_bool_RAND()== true  ) then
        Grid[X,Y] := '*',			
		Grid[X+1,Y] := N
				
    /** lower line **/	
	elseif(X == Row && (Grid[X-1,Y]=='*' || Grid[X-1,Y]=='$') && f_bool_RAND()== true ) then
        Grid[X,Y] := '*',			
		Grid[X-1,Y] := N		
    
    elseif(Y == 1 && (Grid[X,Y+1]=='*' || Grid[X,Y+1]=='$') && f_bool_RAND()== true ) then
        Grid[X,Y] := '*',			
		Grid[X,Y+1] := N
				
    /** upper col **/	
	elseif(Y == Col && (Grid[X,Y-1]=='*' || Grid[X,Y-1]=='$') && f_bool_RAND()== true  ) then
        Grid[X,Y] := '*',			
		Grid[X,Y-1] := N		
    
    else
       printf("\n Any movement was possible in this step --- call HOUSTON")
	end, %% END IF
    
    New_Grid = Grid
    %writeln(grid_DEPOIS = New_Grid)
    %print_map( New_Grid )
    .
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
f_bool_RAND() = X_RAND => 
      if (random() >  (round( rand_max()/2) ) )
       then X_RAND = true %1
       else X_RAND = false % 0
       end.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/* Get position XY in a grid from a cell with N */
position_XY(N, [X,Y], Map ) ?=>
  L = Map.length,
  C = Map[1].length,
   
   foreach(I in 1..L, J in 1..C)
	  % printf(":%w" , Map[I,J]),
		if ( digit(Map[I,J]) || number(Map[I,J]) ) then %% test only if a digit such '3'
		   if  (to_int(Map[I,J]) == N) then  
		   %% convert digit, ex '3'  to  3 compare with N
			 X = I,
			 Y = J
			end   %% END  IF INNER
		  end  
	   end %% END  FOREACH
	 ,
	% printf("\n ALL: "),
	% println([  N, L, C, Map, X, Y] ),
	
	 if( var(X) || var(Y) ) then
	 printf("The N was not found: %d" , N )
	 end	%% END  IF
	 .
	  
position_XY(_,_,_) => printf("\n Problem in XY position function \n").

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/*** check the '$' absent ****/
final( Map ) =>
          array_matrix_to_list(Map) = List,
          not member('$',List). 

%final(_) => printf("\n There are some $ in the map!\n").

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% UPDATING THE GRID=MAP
update_MAP(N,[X,Y], Map ) = Res =>  Map[X,Y] := N,
                                    Res := Map.

 
%% READING A FILE  ....
read_Map_1(File_NAME) = Arr_2D  
    =>
    Reader = open(File_NAME), 
    Lines = read_int(Reader), %% dimensoes do MAPA
    Cols = read_int(Reader),
    new_array(Lines , Cols ) = Arr_2D, %% cria um array 2D
    I = 1, 
    while (not at_end_of_stream(Reader)) %% continuando a leitura
        L_read := read_line(Reader),
        delete_all( L_read, ' ') = L_aux, %% exclui ' ' do mapa
        Arr_AUX = to_array(L_aux),   %% converte lista para array
    %    printf("\n By Line: %w",  L_aux ),
    %    printf("\n  By Array %d: %w", I, Arr_AUX ),
        Arr_2D[I] := Arr_AUX ,  %% array recebe uma linha -- teste
        I := I+1
       end,
    close(Reader)  .
    %% printf("\n The Final Array: %w\n\n", Arr_2D )


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% READING A MAP  ....
read_Map_2(File_NAME) = Arr_2D  
    =>
    L_read = read_file_lines(File_NAME),
    writeln(list_read=L_read),
    L_flatten = flatten(L_read),
    L_aux= delete_all( L_flatten, ' ') ,  %% exclui ' ' do mapa
    writeln(l_aux = L_aux),
    [Lines, Cols | List] = L_aux,
    N_rows = to_int(Lines),
    N_cols = to_int(Cols),
    println([N_rows , N_cols]),
%%% CONFERIR SE LIST estah OK
    Arr_2D = new_array(N_rows , N_cols ) , %% cria um array 2D
    writeln( l_Final = List ),
    writeln(a_array = Arr_2D ),
    
    printf("\n Size: %d\n List:%w \n", length(List), List ),
%%%% PROBLEM HERE   >>> to be rewrite it  
     Arr_2D = to_array(List)  ,   %% converte lista para array
     writeln(a_array = Arr_2D ),
        
    printf("\n Array: %w\n List:%w \n", Arr_2D, List ).
   

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
 

%% printing mapa ....
print_map( M ) =>
 L = M.length,
 C = M[1].length,
  nl,
   foreach(I in 1  .. L)
     foreach(J in 1  ..  C)
      printf("%w " , M[I,J] )
     end,
     nl
   end.   
	   
	   
	   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/*  
WORKS FINE
   %printf("\n The Number of Bytes: %w",  read_byte(Reader) ),
    %L_aux  :=  read_line(Reader) ,
     %%flush(stdout)

Picat> X ={2,1,3}, N = 1, write(X[N+2]).

Picat> if(3>2 && 2<1) then X = 1 end.

yes

Picat> if(3>2 && 2<1) then X = 1 else X = 3 end.
X = 3
yes

Picat> X = 2, if (X == (1 || 2)) then X := 3 end.
X = 2
yes

Picat> X = 2, if ((X == 1) ||(X== 2)) then X := 3 end.
X = 3
yes

 X = {'$','*'}, if (X[1] == '$') then Y=1 else Y=2 end, write(Y).
1X = {$,*}
Y = 1


test_Array_2D =>
		new_array(3,2) = Arr_2D, nl,
		Arr_2D[1,1] = 3,
		%%write(Arr_2D),
		printf("\n The First Line: %w", first(Arr_2D) ),
		printf("\n The Last Line: %w",  last(Arr_2D) ),
		printf("\n The Number of Lines: %w",  length(Arr_2D) ).
		
         
           
              if atom(Map[I,J])  
              then
                 printf("\t ATOM  ")
              else
               printf(" - " )
              end
                   
  Picat> new_array(2,2) = X, X = {{3,4},{5,6}}, X[2,2] = 6, write(X).
{{3,4},{5,6}}X = {{3,4},{5,6}}



agent_fake(N, Grid) = New_Grid => 
				position_XY(N, [X,Y], Grid ),
				%printf("\n%d: %w.....%w", N, X,Y),
			    writeln( x=X), writeln( y=Y),
				 
				%New_Grid = Grid.
				New_Grid = move_fake(N, [X,Y], Grid ).
	
move_fake(N, [X,Y], Grid ) = New_Grid =>
		Grid[X,Y] := '*',			
		Grid[X+1,Y] := N,		
        New_Grid = Grid,
        writeln(minusculo_ALLWAYS = New_Grid)
        .

yes        
*/

test_Array_1 =>
		new_array(2,2) = X,
		X = {{3,4},{5,6}},
		printf(" \n X : %w", X ),
		new_array(2,2) = Y,
		Y = X,
		printf(" \n Y : %w", Y ),
		if(X == Y)
		then
		printf("YES")
		else
        printf("NO")
		end.
        
/*
         printf("\n N: %w",N),
          if attr_var(N)  
              then
                 printf("\t yes N  ")
              else
               printf(" N is var " )
              end ,
         */     
        
