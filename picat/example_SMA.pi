import os.
import util.

main ?=> Status = command("clear") ,
		printf("====================================== %d OK", Status),
        Map = read_Map_1("MAP_02.txt") , 
      
        % INICIO do LOOP 
        %writeln(map=Map),
        position_XY( 2, [X,Y], Map ), 
        printf("\n MAP: %w \n [X:%w....Y:%w] \n", Map, X, Y),
    
        %final( Map ),
      	%%test_Array_1,

        print_map( Map ),
        %% FIM
        printf("\n====================================== \n")
        .
main =>  printf("\n Something Wrong !!!").

/***********  AGENTES + ACOES *************/






/* Get position XY in a grid from a cell with N */
position_XY(N, [X,Y], Map ) ?=>
  L = Map.length,
  C = Map[1].length,
  %% println([Map,N, L,C, Map.length, Map[1].length] ),
	foreach(I in 1..L, J in 1..C)
	  % printf(":%w" , Map[I,J]),
		if (digit(Map[I,J])) then %% test only if a digit such '3'
		   if  (to_int(Map[I,J]) == N) then  
		   %% convert digit, ex '3'  to  3 compare with N
			 X = I,
			 Y = J
			end   %% END  IF INNER
		  end  
	   end %% END  FOREACH
	 ,
	 if( var(X) || var(Y) ) then
	 printf("The N was not found: %w" , N )
	 end	%% END  IF
	 .
	  
position_XY(_,_,_) => printf("\n Problem in XY position function \n").


/*** check the '$' absent ****/
final( Map ) ?=>
          array_matrix_to_list(Map) = List,
          not member('$',List). 

final(_) => printf("\n There are some $ in the map!\n").
 
%% READING A FILE  ....
read_Map_1(File_NAME) = Arr_2D  
    =>
    Reader = open(File_NAME), 
    Lines = read_int(Reader), %% dimensoes do MAPA
    Cols = read_int(Reader),
    new_array(Lines , Cols ) = Arr_2D, %% cria um array 2D
    I = 1, 
    while (not at_end_of_stream(Reader)) %% continuando a leitura
        L_read := read_line(Reader),
        delete_all( L_read, ' ') = L_aux, %% exclui ' ' do mapa
        Arr_AUX = to_array(L_aux),   %% converte lista para array
    %    printf("\n By Line: %w",  L_aux ),
    %    printf("\n  By Array %d: %w", I, Arr_AUX ),
        Arr_2D[I] := Arr_AUX ,  %% array recebe uma linha -- teste
        I := I+1
       end,
    close(Reader)  .
    %% printf("\n The Final Array: %w\n\n", Arr_2D )

        
read_Map_1(_) = {{-999999},{-999999}}
    => printf("\n Any problem in reading map!\n").

%% READING A MAP  ....
read_Map_2(File_NAME) = Arr_2D  
    =>
    L_read = read_file_lines(File_NAME),
    writeln(list_read=L_read),
    L_flatten = flatten(L_read),
    L_aux= delete_all( L_flatten, ' ') ,  %% exclui ' ' do mapa
    writeln(l_aux = L_aux),
    [Lines, Cols | List] = L_aux,
    N_rows = to_int(Lines),
    N_cols = to_int(Cols),
    println([N_rows , N_cols]),
    Arr_2D = new_array(N_rows , N_cols ) , %% cria um array 2D
    writeln( l_Final = List ),
    writeln(a_array = Arr_2D ),
    
    printf("\n Size: %d\n List:%w \n", length(List), List ),
%%%% PROBLEM HERE     
     Arr_2D = to_array(List)  ,   %% converte lista para array
     writeln(a_array = Arr_2D ),
        
    printf("\n Array: %w\n List:%w \n", Arr_2D, List ).
   
  
read_Map_2(_) = {{-999999},{-999999}}
    => printf("\n Any problem in reading map!\n").
 

%% imprime mapa ....
print_map( M ) =>
 L = M.length,
 C = M[1].length,
  nl,
   foreach(I in 1  .. L)
     foreach(J in 1  ..  C)
      printf("%w " , M[I,J] )
     end,
     nl,
   end.   
	   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


my_list_to_array( M, L ) = New_M =>
 L = M.length,
 C = M[1].length,
  nl,
   foreach(I in 1  .. L)
     foreach(J in 1  ..  C)
      M[I,J] = head(L),
      Laux = del_head(L),
      L = Laux
     end,
     nl,
   end.   

head([A|B]) = Res => Res = A.
del_head([A|B]) = Res => Res = B.



/*  
WORKS FINE
   %printf("\n The Number of Bytes: %w",  read_byte(Reader) ),
    %L_aux  :=  read_line(Reader) ,
     %%flush(stdout)


test_Array_2D =>
		new_array(3,2) = Arr_2D, nl,
		Arr_2D[1,1] = 3,
		%%write(Arr_2D),
		printf("\n The First Line: %w", first(Arr_2D) ),
		printf("\n The Last Line: %w",  last(Arr_2D) ),
		printf("\n The Number of Lines: %w",  length(Arr_2D) ).
		
         
           
              if atom(Map[I,J])  
              then
                 printf("\t ATOM  ")
              else
               printf(" - " )
              end
                   
  Picat> new_array(2,2) = X, X = {{3,4},{5,6}}, X[2,2] = 6, write(X).
{{3,4},{5,6}}X = {{3,4},{5,6}}
yes        
*/

test_Array_1 =>
		new_array(2,2) = X,
		X = {{3,4},{5,6}},
		printf(" \n X : %w", X ),
		new_array(2,2) = Y,
		Y = X,
		printf(" \n Y : %w", Y ),
		if(X == Y)
		then
		printf("YES")
		else
        printf("NO")
		end.
        
/*
         printf("\n N: %w",N),
          if attr_var(N)  
              then
                 printf("\t yes N  ")
              else
               printf(" N is var " )
              end ,
         */     
        
