
arc('02', '22', 'none'). 
arc('12', '22', 'none'). 
arc('22', '31', 'a001'). 
arc('22', '72', 'none'). 
arc('31', '41', 'none'). 
arc('41', '52', 'a002'). 
arc('41', '61', 'none'). 
arc('52', '72', 'none'). 
arc('61', '71', 'none'). 
arc('61', '72', 'a003'). 
arc('71', '80', '#bno'). 
arc('72', '80', '#dro').

main =>
    Init_Node = '02',
    End_Node = '22',
    (dfs(Init_Node, End_Node, [Init_Node], Caminho, Arestas) ->
        println("Caminho: ", Caminho),
        println("Arestas: ", Arestas)
    ;
        println("Nenhum caminho encontrado.")
    ).

% Predicado para busca em profundidade
dfs(Node, End_Node, Visitados, [Node|Caminho], [Aresta|Arestas]) ?=>
    arc(Node, Prox, Aresta),
    (Prox == End_Node ->
        Caminho = [End_Node],
        Arestas = [Aresta]
    ;
        not member(Prox, Visitados),
        dfs(Prox, End_Node, [Prox|Visitados], Caminho, Arestas)
    ).

% Versão alternativa do predicado para buscar todas as opções de caminhos
dfs(Node, End_Node, Visitados, Caminho, Arestas) ?=>
    arc(Node, Prox, Aresta),
    not member(Prox, Visitados),
    dfs(Prox, End_Node, [Prox|Visitados], Caminho, Arestas).

% Caso base onde o caminho não é encontrado
dfs(_, _, _, _, _) =>
    fail.