%%picat
/* input data  */
%import data_26_services. -- OK

%import input_100. -- 100%

import input_173.
import util.
import datetime.
import planner.


main ?=>
    /* READ THE SPREADSHEETS */
    services(Services), %% from Excell
    locomotives(Locomotives),
    locomotive_classes(Locomotive_Classes),
    service_class_equivalence( Service_Class_Equivalence),
   % OTHERS WILL COME HERE ....

   % data for locomotives - without classes etc
    
    printf("\n Initial STATES \n"),
 %   printf("\n Services : %w\n", Services),
 %   printf("\n Locomotives : %w\n", Locomotives),

    printf("\n Num of services: %w\n", len(Services)),
    printf("\n Num of locomotives: %w\n", len(Locomotives)),
    printf("\n Num of Classes: %w\n", len(Locomotive_Classes)),
    printf("\n Num of Service_Class_Equivalence: %w\n", len(Service_Class_Equivalence)),
    S0 = {Services, Locomotives, Locomotive_Classes, Service_Class_Equivalence},
    %printf("\n S0: %w", S0),

    printf("\n Readings OK -- Starting the planner ... "),
    %printf("\n Locomotives, Stations, Times : %w\n", Loc_Place_Time),
   
    %plan(S0, Sol_Acoes),
    plan_unbounded(S0 , Sol_Acoes), 
    
    %best_plan_unbounded(S0 , Sol_Acoes), 
   %  println(sol_ACTIONS=Sol_Acoes),
    Total = len(Sol_Acoes),
   %% printf("\n Services Assigned X Locomotives: \n"),
    
    printf("\n Services Assigned in Jason:  %w\n", Total),
    print_list(Sol_Acoes),
    printf("\n Writing in Jason, file: output_planner_jason.txt"),
    write_to_file("output_planner_jason.txt", Sol_Acoes), 
    % print_services(Sol_Acoes),
    printf("\n Done: Total of Services: %w\n", Total).

 
main => printf("\n\n NO MORE SOLUTIONS").


/* initial and final points of the problem */
%% for the planner  
%%% ATTENTION in the ACTION ....
final( {[] , _, _, _ } ) => true .

/* Describing the possible actions ==> for the planner */
/* ONE LOCOMOTIVE */
action({Services, Locomotives, Loc_Classes, Service_Class_Equivalence}, S1, Action, Action_Cost ) ?=>
    
    [ S | Services_To_Do ] = Services,
     % S is a tuple: (a001,hgrd,37740,hesh,62700,ldual),
    S = (Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class),
    %printf("\n S:  %w", S),
    %% find a list of  locomotives that has this service class... otherwise it will fall into equivalences
    %
    %% A list here 
    L_Classes_of_Locomotive = get_classes_locomotives(Serv_Class, Loc_Classes ), 
    %member(Code_of_Class_Loc, L_Equiv_Loc),  
   %[295,246] -- nao esta no local de 295 ... mas está no de 246 ....

    %printf("\n %w", L_Classes_of_Locomotive ),  
    find_all_loc(S, Locomotives, L_Classes_of_Locomotive, Loc_Candidates ),
    %find_locomotives( S, Locomotives, Code_of_Class_Loc,  Loc_Candidates),
    %printf("\t How Many:%w  Which: %w", len(Loc_Candidates) , Loc_Candidates),
     %%% OK

    if ( len(Loc_Candidates) == 0) then
        %How we have locomotives adjusted for this service
        % go to lookup on table of equivalence:Service_Class_Equivalence
        % So, for Serv_Class of this service, can contain others with penality
        % For instance  ('sdiesel', 'mdiesel', 20), 
        % a service sdiesel can be interchanged by one mdiesel with penality of 20
        % the return is a list
        
        get_equivalent_service(Service_Class_Equivalence, Serv_Class, L_Options_Penalty),
        % Laux: [(dt_sdiesel,10),(ldiesel,10),(ldual,20)]
        L_aux := filter_from_options_existence(L_Options_Penalty, Loc_Classes),
     
        % L_aux := L_Option_Penalty,
        % OK printf("Laux: %w  L_options: %w", L_aux, L_Options_Penalty),

        do  %%% NOT USED YET and NOT TESTED  ... BUT READY TO USE ...%% NO SUBSTITUITON WAS REQUIRED
            printf("\n S:  %w", S),
            % if none locomotive was found for that Serv_Class in S
            member((New_Serv_Class, Penality), L_aux),
            printf("\t L_aux: %w  PAR: %w", L_aux , (New_Serv_Class, Penality)),  
            L_aux := delete(L_aux, (New_Serv_Class, Penality)),
           
            % (New_Serv_Class, Penality) = Item,
            %printf("\n Serv Class: %w <=> New SER Class: %w", Serv_Class, New_Serv_Class),
            % Got a alternative CODE Class in New Serv Class for  S
            %  ('203', 'sdiesel', 'dt_203', 'dt_sdiesel'),
            printf("\n %w After Delete %w",New_Serv_Class, L_aux),
            %% in the table Loc_Class
           
            L_Classes_of_Locomotive = get_classes_locomotives(New_Serv_Class, Loc_Classes ), 
            %printf("\t %w", Code_of_Class_Loc),    
            %% a  New_Serv_Class for S
            S = (Id_Serv, Start_P, Start_T, End_P, End_T, New_Serv_Class),
            find_all_loc(S, Locomotives, L_Classes_of_Locomotive, Loc_Candidates ),
            %find_locomotives( S, Locomotives, Code_of_Class_Loc, Loc_Candidates ),
            printf("Laux: %w | Candidates: %w ", L_aux, Loc_Candidates)
        while ( (len(Loc_Candidates) != 0) || L_aux != [] ) 

        end,
      
    
    %printf("\n Candidates: %w for S: %w \t %w", Loc_Candidates, S, Code_of_Class_Loc ),
    % example: ('159-001', 159, 'hgrd', 37740),
   % (len(Loc_Candidates) >= 1
   % ),  %% conditions

    %% several candidates come, take only one, for example
    % example: ('159-001', 159, 'hgrd', 37740),
    % A first candidate and ONE
    [ (A_Candidate, _, _  ) | _ ] =  Loc_Candidates ,
    
    %printf("\n One: %w " , A_Locomotive),
  
    %%%% UPDATE the chosen one in the list of locomotives
    %%% new positions of the locomotive, and time it is available there
    %%% update the 2 items that change position and time

    Loc_New = update_position((A_Candidate, End_P, End_T), Locomotives),

    %printf("\n :%w  %w", Id_Serv, A_Candidate),
    %%% OK here
    Action_Cost = 1,  
	Action = {(Id_Serv, A_Candidate)} , %%a description
	S1 = {Services_To_Do, Loc_New, Loc_Classes, Service_Class_Equivalence }.

/* TWO LOCOMOTIVES */
action({Services, Locomotives, Loc_Classes, Service_Class_Equivalence }, S1, Action, Action_Cost ) ?=>
       
    [ S | Services_To_Do ] = Services, % S is a tuple: (a001,hgrd,37740,hesh,62700,ldual),
    (Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class) = S,

    %% find a locomotive that has this service class... otherwise it will fall into equivalences
     %% A list here 
    L_Classes_of_Locomotive = get_classes_locomotives(Serv_Class, Loc_Classes ), 
    %[295,246] -- nao esta no local de 295 ... mas está no de 246 ....

    %printf("\n %w", L_Classes_of_Locomotive ),  
    find_all_loc(S, Locomotives, L_Classes_of_Locomotive, Loc_Candidates ),
 %   printf("\n 10 Candidates: %w \t IN S: %w", Loc_Candidates, S ),
    
    (len(Loc_Candidates) >= 2
    ),  %% conditions

    [(Locomotive_01, Station_01, T_01), (Locomotive_02, Station_02, T_02) | _ ] =  Loc_Candidates,
    % printf("\n Candidates: %w and %w", Locomotive_01, Locomotive_02 ),
    Loc_New_01 = update_position((Locomotive_01, End_P, End_T), Locomotives),
    Loc_New_02 = update_position((Locomotive_02, End_P, End_T), Loc_New_01),
  	
    %printf("\n ACTION: %w", Action ),
	 %%% OK here
     Action_Cost = 100,   
     Action = {(Id_Serv, Locomotive_01), (Id_Serv, Locomotive_02)} , %%a description
     S1 = { Services_To_Do, Loc_New, Loc_Classes, Service_Class_Equivalence }.

action({Services, Locomotives,  Loc_Classes, Service_Class_Equivalence}, S1, Action, Action_Cost ) =>
    
    [ S | Services_To_Do ] = Services, % S is a tuple: (a001,hgrd,37740,hesh,62700,ldual),
    (Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class) = S,
   
    %% find a locomotive that has this service class... otherwise it will fall into equivalences
      %% A list here 
    L_Classes_of_Locomotive = get_classes_locomotives(Serv_Class, Loc_Classes ), 
    %member(Code_of_Class_Loc, L_Equiv_Loc),  
   %[295,246] -- nao esta no local de 295 ... mas está no de 246 ....

    %printf("\n %w", L_Classes_of_Locomotive ),  
    find_all_loc(S, Locomotives, L_Classes_of_Locomotive, Loc_Candidates ),
    %printf("\n 100 Candidates: %w \t IN S: %w", Loc_Candidates, S ),
    ( len(Loc_Candidates) == 0
    ),  %% conditions
    
    Loc_New =  Locomotives,
    Action_Cost = 9999999,   
	Action = {(Id_Serv, "NO LOCOMOTIVES AVAILABLE")} , %%a description
    S1 = { Services_To_Do, Loc_New, Loc_Classes, Service_Class_Equivalence }.

/* END PLANNER */

%% id	locomotiveClass 	location	locationDatetime
%% find_a_locomotive(A_Candidate, Loc, New_Loc, Loc_Assigned )

%%% RECONSIDER HERE ....

/*
locomotives(Locomotives),  S = (a001,hgrd,37740,hesh,62700,ldual),  Class_of_Locomo7000,ldual),  Class_of_Locomotive = 159,find_locomotives(S, Locomotives, Class_of_Locomotive, Lout ).

1. Get the service class
2. Read in locomotive_classes the class corresponding to that service
3. Go to locomotives and choose one from that class.
*/


%L = Service_Class_Equivalence, Penality),
%% for a specific service class, which services of locomotives
%% are equivalent a has a penality
get_equivalent_service(L, Serv_Class, R) =>
    % sort([(B, C) : (A, B, C) in L, A == Serv_Class]). 
    R = [(B, C) : (A, B, C) in L, A == Serv_Class].
% Example: sdiesel
% R= [(mdiesel,20),(ldiesel,30),(ldual,30)]


%% many family os classes of a locomotive can do a service of this class
get_classes_locomotives(Serv_Class, L) = R =>
    % sort([(B, C) : (A, B, C) in L, A == Serv_Class]). 
    R = [ A : (A, B, C, D) in L,
    to_string(B) == to_string(Serv_Class)].

%%% in predicates...
get_classes_locomotives(Serv_Class, Loc_Classes, Code_Class) ?=>
    Loc_Classes == [],
    Code_Class = 0,
    printf("\n ===> The locomotive for this class was not found!!!\n").

get_classes_locomotives(Serv_Class, Loc_Classes, Code_Class) ?=>
    Loc_Classes = [(Loc, Loc_Class, _, _) | _],
    to_string(Loc_Class) == to_string(Serv_Class),
    Code_Class = Loc.

get_classes_locomotives(Serv_Class, Loc_Classes, Code_Class) =>
    Loc_Classes = [(Loc, Loc_Class, _, _) | L],
    %%% the service Class should be compatible with Locomotive Class
    %%% inside of this class it will choose one.
    %to_string(Loc_Class) != to_string(Serv_Class),
    get_classes_locomotives(Serv_Class, L, Code_Class).


%%%
filter_from_options_existence(L_Options_Penalty, Loc_Classes) = R =>
    R = [(Serv_Class_1, Penalty) : 
        (Serv_Class_1, Penalty) in L_Options_Penalty,
        (Loc, Serv_Class_2, _, _) in Loc_Classes,
        to_string(Serv_Class_1) == to_string(Serv_Class_2)].

%%% 

%% MANY LOCOMOTIVES CLASSES    for one Sevice class
find_all_loc(S, _,  [], R  ) ?=> R = [].
find_all_loc(S, Locomotives,  L_Class_of_Locomotive, L  ) ?=>
    L_Class_of_Locomotive =  [A_Class | Rest_Of_Class] ,
    
    find_locomotives(S, Locomotives, A_Class, Candidate),
    L = Candidate ++ Lout,
    find_all_loc(S, Locomotives, Rest_Of_Class, Lout).

%%% HERE IF EXIST ONLY ONE LOCOMOTIVE CLASS FOR ONLY A CLASS SERVICE 
find_locomotives(_, [], _, R ) ?=>  R = [].
find_locomotives(S, Loc, Class_of_Locomotive, Lout ) ?=>
    %printf("\n S: %w \t %w ", S , Linp),	
    %% Locomotives
    Loc =  [ (Loc_ID, Loc_Class, Position, Time ) | L1],  
    %%% available locomotives
    % EXAMPLE: ('159-001', 159, 'hgrd', 37740),

    (Id_Serv, Start_P, Start_T, End_P, End_T, _ ) = S,
    (   Position == Start_P,        
        Time =< Start_T,
        to_string(Loc_Class) == to_string(Class_of_Locomotive)
    ),

    %B = (Id_Loc, End_P, End_T),
    Lout = [ B | Rest ],
    B = (Loc_ID, Position, Time), %%% selected
    find_locomotives(S, L1,  Class_of_Locomotive, Rest ).

%%% proceed in recursion
find_locomotives(S, Loc, Class_of_Locomotive, Lout ) =>
   
    Loc =  [ (Loc_ID, Loc_Class, Position, Time ) | L1],  %%% available locomotives
    
    S = (Id_Serv, Start_P, Start_T, End_P, End_T, _ ) ,
    (   Position != Start_P ;
        Time > Start_T;
        to_string(Loc_Class) != to_string(Class_of_Locomotive) 
    ), 
    %%% if the locomotive class is not of the class that accepts the service
    %% the service has a class ... this class is attended by a class of locomotives
    %% and the candidate locomotive must be in this class!

    find_locomotives(S, L1, Class_of_Locomotive, Lout ).   
        
%%%%%%update_position((A_Candidate, E_Next, T2_Next), Loc_Place_Time),
update_position((A_Loc, E_Next, T_Next), [] ) = R => R = [].
%%% found the locomotive then update       
update_position((A_Loc, E_Next, T_Next), [(Loc_ID, Class, Where_is, When) | Rest]) = New_Loc_Place
        , to_string(A_Loc) == to_string(Loc_ID) =>
        New_Loc_Place = [(Loc_ID, Class,  E_Next, T_Next) | Rest].
%% take the next from the list of Locomotives
update_position((A_Loc, E_Next, T_Next), [(Loc_ID,  Class, Where_is, When) |Rest]) = New_Loc_Place
    , to_string(A_Loc) != to_string(Loc_ID) => 
    
    New_Loc_Place = [(Loc_ID,  Class, Where_is, When)  | update_position((A_Loc, E_Next, T_Next), Rest) ].
    %%% proceed in the list    

/*
x => L=  [('159-008',ahroo,0),('159-002',bwur,0),('159-219',bwur,0),('159-010',bwur,0),('159-004',lqb,0)],
    write(L),
    update_position(('159-002',flor,0), L) = K,
    write(K).
*/

% Recursive - predicative

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% writing to a file ETC
write_to_file(FileName, List) =>
    File = open(FileName, write),
    print_json(File, List),
    close(File).

%%% writing a list  ... 
print_list([]) =>
    true.
print_list([ X | Xs]) =>
    printf("\t => %w", X),
    print_list(Xs).

%% only services
print_services([]) =>
    true.
print_services([ {(_,B)} | Xs]) =>
    printf("\n %w", B),
    print_services(Xs).

%% writing formatted in JSON
print_json(_, []) ?=> true.
print_json(FileName,[{(A,B)}| Rest ] ) =>
    %ServiceID = new_uppercase(A),
    %% OR
    ServiceID =  to_atom(to_uppercase(to_string(A))),
    LocomotiveID = to_atom(to_uppercase(to_string(B))),
    printf(FileName,"{\"service_id\": \"%w\", \"locomotiveId\": [\"%w\"]}\n", ServiceID, LocomotiveID),
    print_json(FileName, Rest).

new_uppercase(Atom) = UpperAtom =>
    %string_uppercase(Atom.to_string(), UpperStr),
    String = to_string(Atom),
    UpperStr = to_uppercase(String),
    %UpperAtom = UpperStr.to_atom().
    UpperAtom = to_atom(UpperStr).

/*
Picat> to_atom(['X','9']) = X.
X = 'X9'
yes

Picat> ['X','9'].to_atom()= X.
X = 'X9'
*/
%to_lowercase(String) = LString: This function converts all uppercase alphabetic characters into lowercase characters, returning the result in LString.
%to_uppercase(String) = UString: This function converts all lowercase alphabetic characters into uppercase characters, returning the result in UString.
