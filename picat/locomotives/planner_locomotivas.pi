%%picat
/* input data  */
%import data_26_services. -- OK  --- VELHO
import input_27.
%import input_100. 

%import input_173.    %%% OK
import util.
import datetime.
import planner.


main ?=>
    /* READ THE SPREADSHEETS */
    services(Services), %% from Excell
    locomotives(Locomotives),
    locomotive_classes(Locomotive_Classes),
    service_class_equivalence( Service_Class_Equivalence),
   % OTHERS WILL COME HERE ....

   % data for locomotives - without classes etc
    
    printf("\n Initial STATES \n"),
 %   printf("\n Services : %w\n", Services),
 %   printf("\n Locomotives : %w\n", Locomotives),

    printf("\n Num of services: %w\n", len(Services)),
    printf("\n Num of locomotives: %w\n", len(Locomotives)),
    printf("\n Num of Classes: %w\n", len(Locomotive_Classes)),
    printf("\n Num of Service_Class_Equivalence: %w\n", len(Service_Class_Equivalence)),
    S0 = {Services, Locomotives, Locomotive_Classes, Service_Class_Equivalence},
    %printf("\n S0: %w", S0),

    printf("\n Readings OK -- Starting the planner ... "),
    %printf("\n Locomotives, Stations, Times : %w\n", Loc_Place_Time),
   
   %plan(S0, Sol_Acoes),
    plan_unbounded(S0 , Sol_Acoes), 
    
    %best_plan_unbounded(S0 , Sol_Acoes), 
   %  println(sol_ACTIONS=Sol_Acoes),
    Total = len(Sol_Acoes),
   %% printf("\n Services Assigned X Locomotives: \n"),
    
    printf("\n Services Assigned in Jason:  %w\n", Total),
    print_list(Sol_Acoes),
    printf("\n Writing in Jason, file: output_planner_jason.txt"),
    write_to_file("output_planner_jason.txt", Sol_Acoes), 
    %print_services(Sol_Acoes),
    printf("\n Done: Total of Services: %w\n", Total).

 
main => printf("\n\n NO MORE SOLUTIONS").



%% id	locomotiveClass 	location	locationDatetime
%% find_a_locomotive(A_Candidate, Loc, New_Loc, Loc_Assigned )

%%% RECONSIDER HERE ....

/*
locomotives(Locomotives),  S = (a001,hgrd,37740,hesh,62700,ldual),  Class_of_Locomo7000,ldual),  Class_of_Locomotive = 159,find_locomotives(S, Locomotives, Class_of_Locomotive, Lout ).

1. Get the service class
2. Read in locomotive_classes the class corresponding to that service
3. Go to locomotives and choose one from that class.
*/

%% many family OR class of  locomotives can do a service of this class
%L = [('203', 'sdiesel', 'dt_203', 'dt_sdiesel'), .....]

%% table Locomotive Classes = L
get_classes_locomotives(Serv_Class, L) = R =>
    % sort([(B, C) : (A, B, C) in L, A == Serv_Class]). 
    R = [ A : (A, B, _, _) in L,
    to_string(B) == to_string(Serv_Class)].
%% R =  CODE or FAMILIY NUMBER of LOCOMOTIVES


%L = Service_Class_Equivalence, Penality),
%% for a specific service class, which services of locomotives
%% are equivalent a has a penality
get_equivalent_service(L, Serv_Class) =
    %% sort([(B, C) : (A, B, C) in L, A == Serv_Class]). 
    [(B, C) :
         (A, B, C) in L, 
        to_string(A) == to_string(Serv_Class)
    ].
% Example: sdiesel
% INPUT [(250,ldiesel,30),(263_264,ldiesel,30)],
% From this list, get codes from a class that exist availble

get_codes_loc_exist(Lista, Locomotives) = 
    remove_dups(
        [ Cod : 
            Item_1 in Lista,
            Item_1 =  (Cod, _, _),
            
            Item_2 in Locomotives,
            Item_2 =  (Id_Loc, Cod_Class, Location, Location_Time),
        
            to_string(Cod) == to_string(Cod_Class)
        ]
    ).

  

%% OUTPUT [250,263264] 
/*
%%% in predicates...
get_classes_locomotives(Serv_Class, Loc_Classes, Code_Class) ?=>
    Loc_Classes == [],
    Code_Class = 0,
    printf("\n ===> The locomotive for this class was not found!!!\n").

get_classes_locomotives(Serv_Class, Loc_Classes, Code_Class) ?=>
    Loc_Classes = [(Loc, Loc_Class, _, _) | _],
    to_string(Loc_Class) == to_string(Serv_Class),
    Code_Class = Loc.

get_classes_locomotives(Serv_Class, Loc_Classes, Code_Class) =>
    Loc_Classes = [(Loc, Loc_Class, _, _) | L],
    %%% the service Class should be compatible with Locomotive Class
    %%% inside of this class it will choose one.
    %to_string(Loc_Class) != to_string(Serv_Class),
    get_classes_locomotives(Serv_Class, L, Code_Class).
*/

%%%
%%% SERVICOS ALTERNATIVOS em L_EQUIVALENTES [(dt_mdiesel, 30), (ldiesel, 30)]
filter_from_options_existence(Cod_Class_Loc, L_Opt_Pen) = Filtered =>
    Filtered = [
        (ID, Class, Penalty) :
        Item_1 in Cod_Class_Loc,
        (ID, Class, _, _) = Item_1,

        Item_2 in L_Opt_Pen,
        (Desc, Penalty) =  Item_2,

        % Item_3 in Locomotives,
        % (_, Loc_Class, _, _ ) = Item_3,

        to_string(Class) == to_string(Desc)
        % to_string(Class) == to_string(Loc_Class)
    ].

%    ('159-001', 159, 'hgrd', 37740),

%%%% RETORNO [(250,ldiesel,30),(263_264,ldiesel,30)]
%%% [(NUM_CLASSE, SERV_EQUIVALENTE_NOVO, PENALIDADE)]

%%% 

%% MANY LOCOMOTIVES CLASSES  for one Sevice class
% find_all_loc(S, Current_Table_of_Locomotives,  L_Class_of_Locomotive, Output  )
find_all_loc(S, _,  [], R  ) ?=> R = [].  %% no more class
%find_all_loc(S, [],  _ , R  ) ?=> R = []. %% or no more locomotives
find_all_loc(S, Locomotives,  L_Class_of_Locomotive, L  ) =>
    
    L_Class_of_Locomotive = [ A_Class | Rest_Of_Classes],
    
    find_locomotives(S, Locomotives, A_Class, Candidate),
    L = Candidate ++ Lout,
    find_all_loc(S, Locomotives, Rest_Of_Classes, Lout).

%%% HERE IF EXIST ONLY ONE LOCOMOTIVE CLASS FOR ONLY A CLASS SERVICE 
find_locomotives(_, [], _, R ) ?=>  R = [].
%% Loc: Table of Locomotives in Loc ... dynamic     
find_locomotives(S, Loc, A_Class, Lout ) ?=>
  
    %% Locomotives

    Loc =  [ (Loc_ID, Loc_Class, Position, Time ) | L1],  
    %%% available locomotives
    % EXAMPLE: ('159-001', 159, 'hgrd', 37740),
 
    %(Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class ) = S,
    (Id_Serv, Start_P, Start_T, End_P, End_T, _ ) = S,
    %(Id_Loc, Position, Time) = A,
    (   to_string(Position) == to_string(Start_P),        
        Time =< Start_T,
        to_string(Loc_Class) == to_string(A_Class)
    ),

    %B = (Id_Loc, End_P, End_T),
    Lout = [ B | Rest ],
    B = (Loc_ID, Position, Time), %%% selected
    find_locomotives(S, L1,  A_Class, Rest ).

%%% proceed in recursion
find_locomotives(S, Loc, A_Class, Lout ) =>
   
    Loc =  [ (Loc_ID, Loc_Class, Position, Time ) | L1],  %%% available locomotives
    
    (Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class ) = S,
    (   Position != Start_P ;
        Time > Start_T;
        to_string(Loc_Class) != to_string(A_Class) 
    ), 
    %%% if the locomotive class is not of the class that accepts the service
    %% the service has a class ... this class is attended by a class of locomotives
    %% and the candidate locomotive must be in this class!

    find_locomotives(S, L1, A_Class, Lout ).   

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%find_loc_equivalents will not check the service class
%% 
/*
find_loc_equivalent(_, [], _, R ) ?=>  R = [].
%% Loc: Table of Locomotives in Loc ... dynamic     
find_loc_equivalent(S, Loc, A_Class, Lout ) ?=>
    %printf("\n S: %w \t %w ", S , Linp),	
    %% Locomotives

    Loc =  [ (Loc_ID, Loc_Class, Position, Time ) | L1],  
    %%% available locomotives
    % EXAMPLE: ('159-001', 159, 'hgrd', 37740),
 
    %(Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class ) = S,
    (Id_Serv, Start_P, Start_T, End_P, End_T, _ ) = S,
    %(Id_Loc, Position, Time) = A,
    (   to_string(Position) == to_string(Start_P),        
        Time =< Start_T,
        to_string(Loc_Class) == to_string(A_Class)
    ),

    %B = (Id_Loc, End_P, End_T),
    Lout = [ B | Rest ],
    B = (Loc_ID, Position, Time), %%% selected
    find_loc_equivalent(S, L1,  A_Class, Rest ).

%%% proceed in recursion
find_loc_equivalent(S, Loc, A_Class, Lout ) =>
   
    Loc =  [ (Loc_ID, Loc_Class, Position, Time ) | L1],  %%% available locomotives
    
    (Id_Serv, Start_P, Start_T, End_P, End_T, _ ) = S,
    (   Position != Start_P 
        ;
        Time > Start_T
        %;
        %to_string(Loc_Class) != to_string(A_Class) 
    ), 
    %%% if the locomotive class is not of the class that accepts the service
    %% the service has a class ... this class is attended by a class of locomotives
    %% and the candidate locomotive must be in this class!

    find_loc_equivalent(S, L1, A_Class, Lout ).   
*/
% EXAMPLE
%%%L_Equiva: [(246_285,mdiesel,20),(250,ldiesel,20),(263_264,ldiesel,20),(159,ldual,20)]
%%% Locomotives :[(250-1,250,dro,478800),(250-2,250,dro,0),(246-1,246_285,wme,417600),(246-2,246_285,dnm,50400),(203-1,203,bwur,450000),(203-2,203,bwur,50400),(203-3,203,bwur,50400),(203-4,203,bwur,50400)]
existence_real_of_equivalent(L_Equiv_Serv, Locomotives) =
    remove_dups([  (Cod_Item_Equiv, Serv_Item_Equiv, Penality) : 
   
        (Cod_Item_Equiv, Serv_Item_Equiv, Penality) in L_Equiv_Serv,
        (Loc_ID, Loc_Class, Position, Time ) in Locomotives,
        to_string(Cod_Item_Equiv) == to_string( Loc_Class)
   ]).


find_loc_equivalent(S, Locomotives, A_Class) = 
	[ (Loc_ID, Position, Time) 
        :
        (Loc_ID, Loc_Class, Position, Time) in Locomotives,
        ( _ID_Serv, Start_P, Start_T, _, _, _) = S,
        to_string(Position) == to_string(Start_P),
        Time =< Start_T,
        to_string(Loc_Class) == to_string(A_Class)
    ].



% find_all_loc(S, Current_Table_of_Locomotives,  L_Class_of_Locomotive, Output  )
find_all_equivalent(S, _,  [], R  ) ?=> R = [].  %% no more loc in this class
find_all_equivalent(S, Locomotives,  L_Equiv_Serv, Lout  ) =>
    
    L_Equiv_Serv = [(Cod_Item_Equiv, Serv_Item_Equiv, Penality)| L1],
    
    Candidate = find_loc_equivalent(S, Locomotives, Cod_Item_Equiv), 

    Lout = Candidate ++ L2,
    find_all_equivalent(S, Locomotives, L1, L2).

%%%%%%update_position((A_Candidate, E_Next, T2_Next), Loc_Place_Time),
update_position((A_Loc, E_Next, T_Next), [] ) = R => R = [].
%%% found the locomotive then update       
update_position((A_Loc, E_Next, T_Next), [(Loc_ID, Class, Where_is, When) | Rest]) = New_Loc_Place
        , (to_string(A_Loc) == to_string(Loc_ID)) 
        =>
        New_Loc_Place = [(Loc_ID, Class,  E_Next, T_Next) | Rest].
%% take the next from the list of Locomotives
update_position((A_Loc, E_Next, T_Next), [(Loc_ID,  Class, Where_is, When) |Rest]) = New_Loc_Place
    , (to_string(A_Loc) != to_string(Loc_ID))
     => 
    New_Loc_Place = [(Loc_ID,  Class, Where_is, When)  | update_position((A_Loc, E_Next, T_Next), Rest) ].
    %%% proceed in the list    

% Recursive - predicative

/* initial and final points of the problem */
%% for the planner  
%%% ATTENTION in the ACTION ....
final( {[] , _, _, _ } ) => true .

/* Describing the possible actions ==> for the planner */
/* ONE LOCOMOTIVE */
action({Services, Locomotives, Loc_Classes, Service_Class_Equivalence}, S1, Action, Action_Cost ) ?=>
    
    [ S | Services_To_Do ] = Services,
     % S is a tuple: (a001,hgrd,37740,hesh,62700,ldual),
    S = (Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class),
    %printf("\n S:  %w", S),
    %% find a list of  locomotives that has this service class... otherwise it will fall into equivalences
    %% A list here 
    Cod_Class_Locomotive = get_classes_locomotives(Serv_Class , Loc_Classes ), 
    %[295,246] -- Number or Family code, once 1 service class can be done by many
    %% classes of locomotives

    %printf("\n  L_Classes_of_Locomotive %w", Cod_Class_Locomotive ),  
    find_all_loc(S, Locomotives, Cod_Class_Locomotive, Loc_Candidates ),
    %find_locomotives( S, Locomotives, Code_of_Class_Loc,  Loc_Candidates),
    %printf("\n S:  %w", S),
    % printf("\t How Many:%w  Which: %w", len(Loc_Candidates) , Loc_Candidates),
    %%% OK ate aqui

    ( len(Loc_Candidates) != 0), %% simplesmente tem locomotiva

    %% several candidates come, take only one, for example
    % example: ('159-001', 159, 'hgrd', 37740),
    % A first candidate and ONE
    %[ (A_Candidate, _, _  ) | _ ] =  Loc_Candidates ,
    member((A_Candidate, _, _  ), Loc_Candidates),
   
    %%%% UPDATE the chosen one in the list of locomotives
    %%% new positions of the locomotive, and time it is available there
    %%% update the 2 items that change position and time

    Loc_New = update_position((A_Candidate, End_P, End_T), Locomotives),
    
    printf("\n 1. S :  %w -> Locom_Select: %w", S, A_Candidate),
    %exit(),
    %printf("\n :%w  %w", Id_Serv, A_Candidate),
    %%% OK here
    Action_Cost = 1,  
	Action = {(Id_Serv, A_Candidate), Action_Cost} , %%a description
	S1 = {Services_To_Do, Loc_New, Loc_Classes, Service_Class_Equivalence }.

/* TWO LOCOMOTIVES */
action({Services, Locomotives, Loc_Classes, Service_Class_Equivalence }, S1, Action, Action_Cost ) ?=>
       
    [ S | Services_To_Do ] = Services, % S is a tuple: (a001,hgrd,37740,hesh,62700,ldual),
    (Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class) = S,

    %% find a locomotive that has this service class... otherwise it will fall into equivalences
     %% A list here 
    L_Classes_of_Locomotive = get_classes_locomotives(Serv_Class, Loc_Classes ), 
    %[295,246] -- nao esta no local de 295 ... mas está no de 246 ....

    %printf("\n %w", L_Classes_of_Locomotive ),  
    find_all_loc( S, Locomotives, L_Classes_of_Locomotive, Loc_Candidates ),
 %   printf("\n 10 Candidates: %w \t IN S: %w", Loc_Candidates, S ),
    
    (len(Loc_Candidates) >= 2 ),  %% condição de escolher duas e ter duas
  
    member(Item_1, Loc_Candidates),
    member(Item_2, Loc_Candidates),
    Item_1 !== Item_2,
    Item_1 = (Locomotive_01, Station_01, T_01),
    Item_2 = (Locomotive_02, Station_02, T_02),
    % printf("\n Candidates: %w and %w", Locomotive_01, Locomotive_02 ),
    Loc_New_01 = update_position((Locomotive_01, End_P, End_T), Locomotives),
    Loc_New_02 = update_position((Locomotive_02, End_P, End_T), Loc_New_01),
    printf("\n 2. S :  %w -> Locos Select: %w || %w", S, Locomotive_01, Locomotive_02),
    %printf("\n ACTION: %w", Action ),
	 %%% OK here
     Action_Cost = 10,   
     Action = {(Id_Serv, Locomotive_01), (Id_Serv, Locomotive_02), Action_Cost} , %%a description
     S1 = { Services_To_Do, Loc_New_02, Loc_Classes, Service_Class_Equivalence }.

/* LOCOMOTIVE EQUIVALENT */
action({Services, Locomotives, Loc_Classes, Service_Class_Equivalence}, S1, Action, Action_Cost ) ?=>
    
    [ S | Services_To_Do ] = Services,
     % S is a tuple: (a001,hgrd,37740,hesh,62700,ldual),
    S = (Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class),
    %printf("\n S:  %w", S),
    %% find a list of  locomotives that has this service class... otherwise it will fall into equivalences
    %% A list here 
    Cod_Class_Locomotive = get_classes_locomotives(Serv_Class , Loc_Classes ), 
    printf("\n For this SERVICE: %w the correct Loc Class is (only one):  %w", Serv_Class, Cod_Class_Locomotive),
    %[295,246] -- Number or Family code, once 1 LOC class can be done by many
    %% classes of locomotives
    L_Options_Penalty = get_equivalent_service(Service_Class_Equivalence, Serv_Class),
    printf("\n L_Options_Penalty of ALL: %w ", L_Options_Penalty),
        % : [(dt_sdiesel,10),(ldiesel,10),(ldual,20)]
        %% to check if these Service Class has locomotives with these class
        %printf("\n Loc_Class table: %w ", Loc_Classes),
    %% Take only the  existents Classes 
    L_Equiv_Serv = filter_from_options_existence(Loc_Classes , L_Options_Penalty),
        %%%% RETORNO [(250,ldiesel,30),(263_264,ldiesel,30)]
        %%% [(NUM_CLASSE, SERV_EQUIVALENTE_NOVO, PENALIDADE)]
        % Got a alternative CODE Class in New Serv Class for  S
     printf("\n EXISTENT options for this service: %w and L Equiv Serv : %w ", Serv_Class, L_Equiv_Serv),
    
     L_Equiv_Real = existence_real_of_equivalent(L_Equiv_Serv, Locomotives),
     printf("\n Real or Valid: %w ",  L_Equiv_Real),

     %member() 
     [(_Num_Class, _New_Equiv_Serv, Aux_Penality) | _ ] = L_Equiv_Real,
      %  N_Class_Eqv := len(L_Equiv_Serv),
    
     %%%%PEGAR UMA DESSAS CATEGORIAS DE LOCOMOTIVAS: [(250,ldiesel,30),(263_264,ldiesel,30)]
    % Cod_Class_Equiv = get_codes_loc_exist( L_Equiv_Serv, Locomotives),
	%printf("\n L_Equiv_Serv: %w", L_Equiv_Serv),
	%printf("\n Cod_Class_Equiv: %w", Cod_Class_Equiv),

    %% ['250','263_264']
               
    % (Cod_Item_Equiv, Serv_Item_Equiv, Penality) = Item,
    find_all_equivalent(S, Locomotives,  L_Equiv_Real, Loc_Candidates),
    member((A_Candidate, _, _  ), Loc_Candidates), 
   
    %printf("\n== Cod_Item_Equiv, Serv_Item_Equiv, Penality ==> %w ", Item), 
            
        %    Aux_Penality := Aux_Penality + Penality,
            
        %printf("\n Serv Class: %w <=> New SER Class: %w", Serv_Class, New_Serv_Class),
            %% in the table Loc_Class
            %% nao deve precisar.... já tem em Cod_Class 
            %L_Classes_Eqv = get_classes_locomotives( Serv_Class_Equiv, Loc_Classes ), 
            %printf("\t Code_of_Class_Loc %w", Code_of_Class_Loc),    
            %% 
            %S = (Id_Serv, Start_P, Start_T, End_P, End_T, _),
            
            %%% pegar as locomotivas com este Cod_Class ... e testar.
            %find_loc_equivalent(S, Locomotives, Cod_Item_Equiv, Lout ),
	       % Lout :=  find_loc_equivalent(S, Locomotives, Cod_Item_Equiv),
          
            %Loc_Candidates_T := Loc_Candidates_T ++ Lout,
        /*   
            if  (len(Loc_Candidates_T)== 0 ) then
                printf("\n Candidatas %w = ", Loc_Candidates_T), 
                printf("\n Locomotives %w", Locomotives),
                printf("\n S EQUIVALENT: %w ", S),
       
                print("Abort...."),
                exit()
            end,
         */       
    
    %printf("\n Candidates: %w ", Loc_Candidates_T),
    %% several candidates come, take only one, for example
    % example: ('159-001', 159, 'hgrd', 37740),
    % A first candidate and ONE
    %[ (A_Candidate, _, _  ) | _ ] =  Loc_Candidates ,
  
    %printf("\n 2. S :  %w -> Locos Select: %w || %w", S, Locomotive_01, Locomotive_02),
    printf("\n 3. S: %w -> EQUIVALENTE Candidate: %w " , S, A_Candidate),
      
    %%%% UPDATE the chosen one in the list of locomotives
    %%% new positions of the locomotive, and time it is available there
    %%% update the 2 items that change position and time

    Loc_New = update_position( (A_Candidate, End_P, End_T), Locomotives),
    %printf("\n Loc NEw: %w", Loc_New),
    %exit(),
    %printf("\n :%w  %w", Id_Serv, A_Candidate),
    %%% OK here
    Action_Cost = max(1, Aux_Penality),  
	Action = {(Id_Serv, A_Candidate), Action_Cost} , %%a description
	S1 = {Services_To_Do, Loc_New, Loc_Classes, Service_Class_Equivalence }.

action({Services, Locomotives,  Loc_Classes, Service_Class_Equivalence}, S1, Action, Action_Cost ) =>
    
    [ S | Services_To_Do ] = Services, % S is a tuple: (a001,hgrd,37740,hesh,62700,ldual),
    (Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class) = S,
   
    %% find a locomotive that has this service class... otherwise it will fall into equivalences
      %% A list here 
    L_Classes_of_Locomotive = get_classes_locomotives(Serv_Class, Loc_Classes ), 
    %member(Code_of_Class_Loc, L_Equiv_Loc),  
   %[295,246] -- nao esta no local de 295 ... mas está no de 246 ....

    %printf("\n %w", L_Classes_of_Locomotive ),  
    find_all_loc(S, Locomotives, L_Classes_of_Locomotive, Loc_Candidates ),
    printf("\n 4. S %w Vazio Candidates: %w ", S, Loc_Candidates ),
    ( len(Loc_Candidates) == 0
    ),  %% conditions
    
    Loc_New =  Locomotives,
    Action_Cost = 9999999,   
	Action = {(Id_Serv, "NO LOCOMOTIVES AVAILABLE"), Action_Cost} , %%a description
    S1 = { Services_To_Do, Loc_New, Loc_Classes, Service_Class_Equivalence }.

/* END PLANNER */

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% writing to a file ETC
write_to_file(FileName, List) =>
    File = open(FileName, write),
    print_json(File, List),
    close(File).

%%% writing a list  ... 
print_list([]) =>
    true.
print_list([ X | Xs]) =>
    printf("\t => %w", X),
    print_list(Xs).

%% only services
print_services([]) =>
    true.
print_services([ {(_,B), Cost} | Xs]) =>
    printf("\t %w || %w ", B, Cost),
    print_services(Xs).

%% writing formatted in JSON
print_json(_, []) ?=> true.
print_json(FileName,[{(A,B), _}| Rest ] ) =>
    %ServiceID = new_uppercase(A),
    %% OR
    ServiceID =  to_atom(to_uppercase(to_string(A))),
    LocomotiveID = to_atom(to_uppercase(to_string(B))),
    printf(FileName,"{\"service_id\": \"%w\", \"locomotiveId\": [\"%w\"]}\n", ServiceID, LocomotiveID),
    print_json(FileName, Rest).

new_uppercase(Atom) = UpperAtom =>
    %string_uppercase(Atom.to_string(), UpperStr),
    String = to_string(Atom),
    UpperStr = to_uppercase(String),
    %UpperAtom = UpperStr.to_atom().
    UpperAtom = to_atom(UpperStr).

/*
Picat> to_atom(['X','9']) = X.
X = 'X9'
yes

Picat> ['X','9'].to_atom()= X.
X = 'X9'
*/
%to_lowercase(String) = LString: This function converts all uppercase alphabetic characters into lowercase characters, returning the result in LString.
%to_uppercase(String) = UString: This function converts all lowercase alphabetic characters into uppercase characters, returning the result in UString.
