%%picat
import input_conectividade_100.
import a_graph_100_nodes.
import util.

main ?=>
    init_location(Init_Locations), 
    % locomotives(Loc),
    services(S),
    Max_Nodes = len(S),
    printf("\n Number of nodes or services: %w", Max_Nodes),
    printf("\n Init Locations: %w ", Init_Locations),
    %printf("\n Locomotives: %w ", Loc ),
    %printf("\n ARCOS: ORIGEM -> DESTINO: "),
    %listar_arcos(S),
    %transform_S_G(S,G),
    %printf("\n Grafo: %w" , G),
    %Start = (a001,ahroo,dro),
    %Start = (_,_,dro), %%% OK
    Start = (_,_,bwur), %%% OK
    %End = (a0024,dro,brc),
    %End = (a006,dro,'am n'),
    %End = (a008, 'ahroo', 'dro'),
    End = (f012,'hsr o','hold'), %%% OK
    %End = (_,_,'hold'),
    printf("\n Init: %w \t End : %w " , Start, End),

    Depth := 1,%% tem um na lista... o nos Start
    %All_Sol = find_all(L_sol, connected_DFS(End, [Start] , L_sol, Depth, Max_Nodes)),
    %printf("\n SOL: %w " , All_Sol),\
    connected_DFS(End, [Start] , L_sol, Depth, Max_Nodes),
    printf("\n SOL: %w \n  Serv Number: %w" , reverse(L_sol), len(L_sol)),


/* %%% BLOCk

    foreach(I in Init_Locations )
        Start := (_,_,I),
        printf("\n Init: %w \t End : %w " , Start, End),
    
        Depth := 1,%% tem um na lista... o nos Start
      
        %printf("\n SOL: %w " , All_Sol),
        connected_DFS(End, [Start] , L_sol, Depth, Max_Nodes),
        printf("\n SOL: %w \n  Serv Num: %w" , reverse(L_sol), len(L_sol))
    end,   
*/
    printf("\n END MAIN OK\n").
    
main => true.

%%%%%%%%%%%%%%% CASAMENTO DE PADROES   %%%%%%%%%%%%  SURRA
%% Halt condition
connected_DFS(End, [ Current | Caminho] , L_sol, Depth, Max_Nodes) ?=>
     %%% condicao de parada 1
    (Arco_1, Origem_1, Destino_1 ) = End,
    (Arco_2, Origem_2, Destino_2 ) = Current,
    %printf(" \n  ==> End: %w  || Current: %w ", End, Current),
    %printf(" \n  ==> O1: %w  || D2: %w ",  Origem_1, Destino_2),
    End == Current ,
    Depth <= Max_Nodes,
   
    L_sol = [ Current | Caminho ],
      
    printf(" \n A SOLUTION:%w \n Depth %w \n ==>", L_sol, Depth). 

 connected_DFS(End, [ Current | Caminho] , L_sol, Depth, Max_Nodes) ?=>
    
       (Arco_2, Origem_2, Destino_2 ) = Current,
       ((Arco_2 == 'xxxx'; Origem_2 =='xxxx');
        ( Depth > Max_Nodes )),
        L_sol = [ Current | Caminho ],
        %%% condicao de parada 2
        printf(" \n SEM SOLUCAO .... <==>"),!. 
 
connected_DFS(End,  L_inp , L_sol, Depth, Max_Nodes) =>
 
    [ Current | Caminho] = L_inp ,
    %% explorar um novo movimento ou um novo noh
   new_node(Current , Novo_NoH),
    %printf("\n   Current: %w :: Novo_NOH: %w   Caminho: %w", Current,  Novo_NoH,  Caminho ), 
           %% testar se este novo noh nao foi visitado ainda
           %% ou novo_NOH eh permitido
    not( member(Novo_NoH, L_inp ) ),
           %OU  append([Novo_NoH], Linp, Lout),
           %%%%
    connected_DFS(End,  [Novo_NoH , Current | Caminho ] , L_sol, Depth+1, Max_Nodes).

/******************************************************************************************/

listar_arcos( [] ) ?=> true.
listar_arcos([ No | L]) =>
    (Arco, Origem, _, Destino,_ ) = No, %%%% CUIDAR # de argumentos...
    %printf("\n %w: %w -> %w", Arco, Origem, Destino ),
    printf("\n arc(%w, '%w', '%w').", Arco, to_string(Origem), to_string(Destino) ),
    listar_arcos( L ).

%%%%[{h007,uim,uei g},{h008,uei g,bwur},{a005,bss u,dro},{a006,dro,am n}]
/*
conectado(X,Y) ?=> 
    {X1,X2,X3} = X,
    {Y1,Y2,Y3} = Y,
     X3 == Y2,
    arco(X,Y).
conectado(X,Y) => arco(X,Z), 
                  conectado(Z,Y).
*/

new_node(X,Y) ?=> 
    X = (Arco_1, Origem_1, Destino_1 ),
    arc(Arco_1, Origem_1, Destino_1 ),

    arc(Arco_2, Origem_2, Destino_2 ),
    Y = (Arco_2, Origem_2, Destino_2 ),                 
    to_string(Destino_1) == to_string(Origem_2).

new_node(X,Y) => 
    X = (Arco_1, Origem_1, Destino_1 ),
    arc(Arco_1, Origem_1, Destino_1 ),
    arc(Arco_2, Origem_2, Destino_2 ),
    Z = (Arco_2, Origem_2, Destino_2 ),                 
    to_string(Destino_1) == to_string(Origem_2),
   new_node(Z,Y).
           
%novo_no(X,Y) => Y = ('xxxx','xxxx', 'xxxx').

/*    
novo_no(No_corrente , Novo_No, Graph) ?=>
     {Arco, Origem, Destino} = No_corrente,
     Graph == [],
     Novo_No = {'PAROU AQUI', Origem, Destino}.

    new_node(No_corrente , Novo_No, Graph) ?=>
        {Arco, Origem, Destino} = No_corrente,
        [Next | L ] = Graph,  
        {A2, O2, D2} = Next,
        to_string(Destino) == to_string(O2),
        Novo_No =  {A2, O2, D2},
        printf("\n Dest %w == O2 %w [Next %w]", Destino, O2, Next ). 
   
novo_no(No_corrente , Novo_No, Graph) =>
     {Arco, Origem, Destino} = No_corrente,
     [Next | L ] = Graph,  
     {A2, O2, D2} = Next,
     to_string(Destino) != to_string(O2),
     printf("\n Dest %w != %w (O2) [Next %w]", Destino, O2, Next ),
    new_node(No_corrente , Novo_No, L).

*/

     transform_S_G(S, R), S==[] ?=>  R=[].   
        transform_S_G( Linp, Lout ) ?=>  
            [Serv|L1] = Linp, 
            [No|L2] = Lout,
            (Arco, Origem, _, Destino,_ ) = Serv,
            to_string(Origem) = O2,
            to_string(Destino) = D2,
            {Arco, O2, D2} = No,
            transform_S_G(L1, L2).
        

