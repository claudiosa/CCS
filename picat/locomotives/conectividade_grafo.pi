%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

import util.
import ordset.
import sys.
%import set.
import a_graph_11_nodes.
%load("a_graph_11_nodes.pi").
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% commented by Hakan
main ?=>
    
    Graph = findall((X,Y,Z) , arc(X,Y,Z)),
    printf("\n Oriented Graph %w", Graph),
    L_Nodes = all_nodes(), %%%% to be used in the future
    
    Init_Node= min(L_Nodes),
   
    Set_Edges = new_ordset(all_edges()),
    printf("\n Start: %w", Init_Node),
    printf("\n All Nodes: %w", L_Nodes),
    printf("\n All Edges: %w\n", Set_Edges),
    
    %printf("\n Start: %w\t  End: %w\n All_Nodes: %w",Init_Node, End_Node, L_Nodes),
    delete(L_Nodes, Init_Node) = Rest,

    All_Edges =[],
    foreach(End_Node in Rest)
        printf("\n Start: %w\t  End: %w", Init_Node, End_Node),
    if ( dfs_connected(Init_Node, End_Node, [Init_Node], [], Sol) ) then
            printf("\n Path: %w",   reverse(Sol[1])),
            printf("\t Edges: %w\n", reverse(Sol[2])),
            All_Edges := All_Edges++Sol[2]
        else
            printf("\n ==> NO reachable from: %w to: %w\n", Init_Node, End_Node)
    end
    end,
    Edges_Not_Repeated = remove_dups(All_Edges),
    Set_Edges_Visited = new_ordset(Edges_Not_Repeated),
    printf("\n All Edges Visited: %w ", Set_Edges_Visited ),
    %subtract(OSet1,OSet2)=OSet3: This function returns an ordered set that contains all of the elements of OSet1 which are not in OSet2.
    Not_Visited = subtract(Set_Edges, Set_Edges_Visited),
    printf("\n NOT Visited Edges: %w ", Not_Visited ),

    %%% ARRAY usefull
    %%%% ESTUDO AQUI ....

    printf("\n\n PAUSA AQUI: UM ESTUDO "), 
    Estudo = findall(Sol,  (dfs_connected('02', '72', ['02'], [], Sol))  ),
    Temp1 = get_second_elements(Estudo),
    printf("\n Numero de Caminhos de  '02' -> '72': %w ", len(Temp1)), 
    printf("\n Caminhos Alternativos de  '02' -> '72': %w ", Temp1), 
    Temp2 =  remove_dups(flatten(Temp1)),
    printf("\n Estudo de  '02' atÃ© '72': %w ", Temp2),        

    printf("\n End of main: OK\n").
    %%%% 
    %spy($dfs_connected/5),
    %nospy,

main => printf("\n End of main with fail ... NO SOLUTION").   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/*

all_nodes() = Set =>  membchk(
        L1 = findall(X, arc(X,Y,_)),
        L2 = findall(Y, arc(X,Y,_)),
        new_ordset(L1) = Set_1,
        new_ordset(L2) = Set_2,
        Set = union(Set_1, Set_2).

all_edges() = Set => 
    L = findall(X, arc(_,_,X)),
    new_ordset(L) = Set.  %%% remove duplicates ...
*/

all_nodes() = findall([X,Y], arc(X,Y,_)).flatten.remove_dups.
all_edges() = findall(X, arc(_,_,X)).remove_dups.

get_second_elements(L) = Result =>
    Result = [Array[2] : Array in L]. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% KERNEL DFS
dfs_connected(Node, End_Node, L_Nodes_Visited, L_Edges, Sol) ?=>
    Node == End_Node,
    N = len(L_Edges),
    N>0,
    %%%printf("\n Theres is a path!").
    Sol = {L_Nodes_Visited, L_Edges}.
    
/*
dfs_connected(Node, End_Node, L_Nodes_Visited, L_Edges, Sol) ?=>
    Node == End_Node,
    N = len(L_Edges),
    N==0,
    Sol = 'NO'.
*/   
 
dfs_connected(Node, End_Node, Partial_Path, Partial_Edges, Sol) =>
   arc(Node, Next, Edge),
   not  membchk(Next, Partial_Path),
   append([Next], Partial_Path,  L_Nodes_Visited),
   append([Edge], Partial_Edges, L_Edges),
   dfs_connected(Next, End_Node, L_Nodes_Visited, L_Edges, Sol).
 
 /*
dfs_connected(_, _, _, _, Sol) =>
    Sol='NO'.
*/
%   {[],[]},!.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/*
Picat> L=[a,b,c], member(X,L).
L = [a,b,c]
X = a ?

Picat> L=[a,b,c], membchk(X,L).

no

Picat> L=[a,b,c], membchk(c,L).
L = [a,b,c]
yes



HAKAN 
Graph(Graph) => 
  Graph = 
       [[1, 2],
      import ordse....t
       [4, 8]].

data(edge,Graph,D) =>
  Graph = {{1,2},
           {1,3},
           {1,4},
           {2,3},
           {2,4},
           {3,4}},
  D = [3,2,1,0].

connect(a, [b, j, k]).
connect(b, [a, c, p]).
connect(c, [b, d, l]).
*/