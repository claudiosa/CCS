
import util.
import ordset.
import a_graph_11_nodes.

main ?=>
    
    Graph = findall((X,Y,Z) , arc(X,Y,Z)),
    printf("\n Oriented Graph %w", Graph),
    L_Nodes = all_nodes(), %%%% to be used in the future
    Init_Node= min(L_Nodes),
   
    L_Edges = all_edges(),
    printf("\n Start: %w", Init_Node),
    printf("\n All Nodes: %w", L_Nodes),
    printf("\n All Edges: %w", L_Edges),
    
    %printf("\n Start: %w\t  End: %w\n All_Nodes: %w",Init_Node, End_Node, L_Nodes),
    delete(L_Nodes, Init_Node) = Rest,

    foreach(End_Node in Rest)
        printf("\n Start: %w\t  End: %w", Init_Node, End_Node),
        dfs_connected(Init_Node, End_Node, [Init_Node], [], Sol),
        if (Sol == 'NO' )   then
            printf("\n ==> NO reachable from: %w to: %w\n", Init_Node, End_Node)
        else
            printf("\n Path: %w",   reverse(Sol[1])),
            printf("\t Edges: %w\n", reverse(Sol[2]))
        end
        
    end,
    %%%% TESTING A WRONG RESULT
    dfs_connected('41', '61', ['41'], [], Sol2),        
    print(Sol2),
    arc('41', '61',X), 
    print(X).

main => printf("\n End of main with fail ... NO SOLUTION").   

all_nodes() = Set => 
        L1 = findall(X, arc(X,Y,_)),
        L2 = findall(Y, arc(X,Y,_)),
        new_ordset(L1) = Set_1,
        new_ordset(L2) = Set_2,
        Set = union(Set_1, Set_2).

all_edges() = Set => 
    L = findall(X, arc(_,_,X)),
    new_ordset(L) = Set.  %%% remove duplicacoes ...

dfs_connected(Node, End_Node, L_Nodes_Visited, L_Edges, Sol) ?=>
    Node == End_Node,
    Sol = {L_Nodes_Visited, L_Edges}.
    %%%printf("\n Theres is a path!").

dfs_connected(Node, End_Node, Partial_Path, Partial_Edges, Sol) ?=>
    
   arc(Node, Next, Edge),
   not member(Next, Partial_Path),
   append([Next], Partial_Path,  L_Nodes_Visited),
   append([Edge], Partial_Edges, L_Edges),
   dfs_connected(Next, End_Node, L_Nodes_Visited, L_Edges, Sol).
 
dfs_connected(_, _, _, _, Sol) =>
    Sol='NO'.

%   {[],[]},!.

/*
    % Executa DFS para verificar conexidade
    dfs(StartNode, Edges, Visited),

    % Verifica se todos os nós foram visitados
    (Visited == Nodes ->
        println("O grafo é conexo");
        println("O grafo não é conexo")
    ).


graph(Graph) => 
  Graph = 
       [[1, 2],
      import ordse....t
       [4, 8]].

data(edge,Graph,D) =>
  Graph = {{1,2},
           {1,3},
           {1,4},
           {2,3},
           {2,4},
           {3,4}},
  D = [3,2,1,0].

connect(a, [b, j, k]).
connect(b, [a, c, p]).
connect(c, [b, d, l]).


*/