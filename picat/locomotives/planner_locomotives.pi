%%picat
/* input data  -- reading by  import */

import input_26.       % Import data from a specific spreadsheet
%import input_173.     % 2nd example easier than first ... but with problems 


import util.
import datetime.
import planner.
import math.

main ?=>
    /*   Step 1: READ THE SPREADSHEETS */
    services(Services), %% from Excell
    %Services = sort(Serv), %%% already sorted in input entry
    locomotives(Locomotives),
    locomotive_classes(Locomotive_Classes),
    service_class_equivalence( Service_Class_Equivalence),
  
    
    printf("\n Initial STATES -- uncomment if you wish to print some data \n"),
 %   printf("\n Services : %w\n", Services),
 %   printf("\n Locomotives : %w\n", Locomotives),
 % ................................................
    %% Step 2: Print summary of loaded data
    printf("\n Num of services: %w\n", len(Services)),
    printf("\n Num of locomotives: %w\n", len(Locomotives)),
    printf("\n Num of Classes: %w\n", len(Locomotive_Classes)),
    printf("\n Num of Service_Class_Equivalence: %w\n", len(Service_Class_Equivalence)),
    
    %% Step 3: Initialize state with loaded data
    S0 = {Services, Locomotives, Locomotive_Classes, Service_Class_Equivalence},
    %printf("\n S0: %w", S0),

    printf("\n Readings OK -- Starting the planner ... "),
    %printf("\n Locomotives, Stations, Times : %w\n", Loc_Place_Time),
    Estimated_Limit =  len(Services) * 50,
    % plan(S0, Sol_Acoes),
    % plan_unbounded(S0 , Sol_Acoes), 
 
    %% Step 4: The planner is called
   plan_unbounded(S0 , Estimated_Limit, Sol_Acoes, Cost), 
   %best_plan_unbounded(S0 , Estimated_Limit, Sol_Acoes, Cost), 
   %  println(sol_ACTIONS=Sol_Acoes),
    Total = len(Sol_Acoes),
    
    %% Step 5: The outputs from planner
    print_list(Sol_Acoes),
    printf("\n Writing in Jason #SORTED# file: output_planner_jason.txt"),
    Sorted = sort(Sol_Acoes),
    write_to_file("output_planner_jason.txt", Sorted ),
    printf("\n Services Assigned in Jason:  %w\n", Total),
    printf("\n Current Cost:  %w \t Estimated was: %w \n", Cost, Estimated_Limit),
    print_current_datetime().
 
main => printf("\n\n NO MORE SOLUTIONS").

/*
locomotives(Locomotives),  S = (a001,hgrd,37740,hesh,62700,ldual),  Class_of_Locomo7000,ldual),  Class_of_Locomotive = 159,find_locomotives(S, Locomotives, Class_of_Locomotive, Lout ).
%% id	locomotiveClass 	location	locationDatetime
1. Get the service class
2. Read in locomotive_classes the class corresponding to that service
3. Go to locomotives and choose one from that class.
*/

%%% printing TIME and DATE executions
print_current_datetime =>
    DT = current_datetime(),
    $date_time(Year, Month, Day, Hour, Minute, Second) = DT,
    printf("\n Time: %02d:%02d:%02d \t Date: %02d/%02d/%d\n", Hour, Minute, Second, Day, (Month+1), (Year+1900)).


%% many family OR class of  locomotives can do a service of this class
%L = [('203', 'sdiesel', 'dt_203', 'dt_sdiesel'), .....]

%% table Locomotive Classes = L
get_classes_locomotives(Serv_Class, L) = R =>
    % sort([(B, C) : (A, B, C) in L, A == Serv_Class]). 
    R = [ A : (A, B, _, _) in L,
    to_string(B) == to_string(Serv_Class)].
%% R =  CODE or FAMILIY NUMBER of LOCOMOTIVES
%L = Service_Class_Equivalence, Penality),
%% for a specific service class, which services of locomotives
%% are equivalent a h%random(1, N).,30),(263_264,ldiesel,30)], sdiesel
% From this list, get codes from a class that exist availble
get_equivalent_service(L, Serv_Class) =
    %% sort([(B, C) : (A, B, C) in L, A == Serv_Class]). 
    [(B, C) :
     (A, B, C) in L, 
     to_string(A) == to_string(Serv_Class)
    ].

get_codes_loc_exist(Lista, Locomotives) = 
    remove_dups(
        [ Cod : 
            Item_1 in Lista,
            Item_1 =  (Cod, _, _),
            
            Item_2 in Locomotives,
            Item_2 =  (Id_Loc, Cod_Class, Location, Location_Time),
        
            to_string(Cod) == to_string(Cod_Class)
        ]
    ).
 
%% OUTPUT [250,263264] 

%%%
%%% SERVICOS ALTERNATIVOS em L_EQUIVALENTES [(dt_mdiesel, 30), (ldiesel, 30)]
filter_from_options_existence(Cod_Class_Loc, L_Opt_Pen) = 
    [ (ID, Class, Penalty) :
        Item_1 in Cod_Class_Loc,
        (ID, Class, _, _) = Item_1,

        Item_2 in L_Opt_Pen,
        (Desc, Penalty) =  Item_2,

        % Item_3 in Locomotives,
        % (_, Loc_Class, _, _ ) = Item_3,

        to_string(Class) == to_string(Desc)
        % to_string(Class) == to_string(Loc_Class)
    ].

%    ('159-001', 159, 'hgrd', 37740),

%%%% RETORNO [(250,ldiesel,30),(263_264,ldiesel,30)]
%%% [(NUM_CLASSE, SERV_EQUIVALENTE_NOVO, PENALIDADE)]

%%% find_all_loc

%% MANY LOCOMOTIVES CLASSES  for one Sevice class
% find_all_loc(S, Current_Table_of_Locomotives,  L_Class_of_Locomotive, Output  )
%% Find_all_Loc COMPATIBLE -- Directly
find_all_loc(S, Locomotives,  Locomotive_Classes ) =
    [(Loc_ID, Position, Time) :

    (Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class ) = S,
    (Loc_ID, Loc_Class, Position, Time ) in  Locomotives,
    (Family_Class, Serv_Class_Loc, _, _) in  Locomotive_Classes,
        (   
        to_string(Position) == to_string(Start_P),        
        Time =< Start_T,
        to_string(Loc_Class) == to_string(Family_Class),
        to_string(Serv_Class_Loc) == to_string(Serv_Class)
        )
    ].

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% EXAMPLE
%%%L_Equivalent: [(246_285,mdiesel,20),(250,ldiesel,20),(263_264,ldiesel,20),(159,ldual,20)]
%%% Locomotives :[(250-1,250,dro,478800),(250-2,250,dro,0),(246-1,246_285,wme,417600),(246-2,246_285,dnm,50400),(203-1,203,bwur,450000),(203-2,203,bwur,50400),(203-3,203,bwur,50400),(203-4,203,bwur,50400)]
existence_real_of_equivalent(L_Equiv_Serv, Locomotives) =
    remove_dups([  (Cod_Item_Equiv, Serv_Item_Equiv, Penality) : 
   
        (Cod_Item_Equiv, Serv_Item_Equiv, Penality) in L_Equiv_Serv,
        (Loc_ID, Loc_Class, Position, Time ) in Locomotives,
        to_string(Cod_Item_Equiv) == to_string( Loc_Class)
   ]).


find_loc_equivalent(S, Locomotives, A_Class) = 
	[ (Loc_ID, Position, Time) 
        :
        (Loc_ID, Loc_Class, Position, Time) in Locomotives,
        ( _ID_Serv, Start_P, Start_T, _, _, _) = S,
        to_string(Position) == to_string(Start_P),
        Time =< Start_T,
        to_string(Loc_Class) == to_string(A_Class)
    ].

find_any_loc(S, Locomotives ) =
    [(Loc_ID, Position, Time) 
     :
        (Loc_ID, Loc_Class, Position, Time) in Locomotives,
        ( _ID_Serv, Start_P, Start_T, _, _, _) = S,
        to_string(Position) == to_string(Start_P),
        Time =< Start_T
    ].

% find_all_loc(S, Current_Table_of_Locomotives,  L_Class_of_Locomotive, Output  )
find_all_equivalent(S, _,  [], R  ) ?=> R = [].  %% no more loc in this class
find_all_equivalent(S, Locomotives,  L_Equiv_Serv, Lout  ) =>
    
    L_Equiv_Serv = [(Cod_Item_Equiv, Serv_Item_Equiv, Penality)| L1],
    
    Candidate = find_loc_equivalent(S, Locomotives, Cod_Item_Equiv), 

    Lout = Candidate ++ L2,
    find_all_equivalent(S, Locomotives, L1, L2).

%%%%%%update_position((A_Candidate, E_Next, T2_Next), Loc_Place_Time),
update_position((A_Loc, E_Next, T_Next), [] ) = R => R = [].
%%% found the locomotive then update       
update_position((A_Loc, E_Next, T_Next), [(Loc_ID, Class, Where_is, When) | Rest]) = New_Loc_Place
        , (to_string(A_Loc) == to_string(Loc_ID)) 
        =>
        New_Loc_Place = [(Loc_ID, Class,  E_Next, T_Next) | Rest].
%% take the next from the list of Locomotives
update_position((A_Loc, E_Next, T_Next), [(Loc_ID,  Class, Where_is, When) |Rest]) = New_Loc_Place
    , (to_string(A_Loc) != to_string(Loc_ID))
     => 
    New_Loc_Place = [(Loc_ID, Class, Where_is, When) | update_position((A_Loc, E_Next, T_Next), Rest) ].
    %%% proceed in the list    

% Recursive - predicative

/* initial and final points of the problem */
%% for the planner  
%%% ATTENTION in the ACTION ....
final( {Services , _, _, _ } ) => Services == [] .

/* Describing the possible actions ==> for the planner */
/* ONE LOCOMOTIVE */
action({Services, Locomotives, Loc_Classes, Service_Class_Equivalence}, S1, Action, Action_Cost ) ?=>
    Action_Cost = 1, 
    [ S | Services_To_Do ] = Services,
     % S is a tuple: (a001,hgrd,37740,hesh,62700,ldual),
    S = (Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class),
     %% find a list of  locomotives that has this service class... otherwise it will fall into equivalences
    %% A list here 
    %Cod_Class_Locomotive = get_classes_locomotives(Serv_Class , Loc_Classes ), 
    %[295,246] -- Number or Family code, once 1 service class can be done by many
    %% classes of locomotives

    %printf("\n  L_Classes_of_Locomotive %w", Cod_Class_Locomotive ),  
    Loc_Candidates  = find_all_loc(S, Locomotives, Loc_Classes ),
    %find_all_loc(S, Locomotives, Cod_Class_Locomotive , Loc_Candidates),
    %%% OK ate aqui
    Size = len(Loc_Candidates) ,
    ( Size >= 1), %% simplesmente tem locomotiva
    %( Size < 2),
    %% several candidates come, take only one, for example
    % example: ('159-001', 159, 'hgrd', 37740),
    % A first candidate and ONE
    %[ (A_Candidate, _, _  ) | _ ] =  Loc_Candidates ,
    %member((A_Candidate, _, _  ), Loc_Candidates),
    %nth(Index,List,Elem) 
    nth(random(1, Size),Loc_Candidates,Elem),
    (A_Candidate, _Position , _Time  ) = Elem  ,
    % %select((A_Candidate, _, _  ), Loc_Candidates,R_Loc_Candidates),
   
    %%%% UPDATE the chosen one in the list of locomotives
    %%% new positions of the locomotive, and time it is available there
    %%% update the 2 items that change position and time

    Loc_New = update_position((A_Candidate, End_P, End_T), Locomotives),
    
    printf("\n=> 1. S :  %w -> Locom_Select: %w", S, A_Candidate),
    printf("\n Status  Locomotives NEW: %w ", Loc_New ), 
    printf("\n Candidates were: %w || Choosen: %w\n", Loc_Candidates, A_Candidate),
      
    %%% OK here
    
	Action = {(Id_Serv, A_Candidate), Action_Cost} , %%a description
	S1 = {Services_To_Do, Loc_New, Loc_Classes, Service_Class_Equivalence }.


/* TWO LOCOMOTIVES */
action({Services, Locomotives, Loc_Classes, Service_Class_Equivalence }, S1, Action, Action_Cost ) ?=>
    
    Action_Cost = 40,   
    [ S | Services_To_Do ] = Services, % S is a tuple: (a001,hgrd,37740,hesh,62700,ldual),
    (Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class) = S,

    %% find a locomotive that has this service class... otherwise it will fall into equivalences
     %% A list here 
    L_Classes_of_Locomotive = get_classes_locomotives(Serv_Class, Loc_Classes ), 
    %[295,246] -- nao esta no local de 295 ... mas está no de 246 ....

    %printf("\n %w", L_Classes_of_Locomotive ),  
    %find_all_loc( S, Locomotives, L_Classes_of_Locomotive, Loc_Candidates ),
    Loc_Candidates  = find_all_loc(S, Locomotives, Loc_Classes ),
    Size = len(Loc_Candidates),
    ( Size >= 2 ),  %% condição de escolher duas e ter duas
    % Alternatives choices
    % member(Item_1, Loc_Candidates),
    % member(Item_2, Loc_Candidates),
    % Item_1 !== Item_2,
    % OR
    % select(Item_1, Loc_Candidates, R1_Loc_Candidates),
    % select(Item_2, R1_Loc_Candidates, R2_Loc_Candidates),
    nth(random(1, Size),Loc_Candidates,Item_1),
    nth(random(1, Size),Loc_Candidates,Item_2),
    
    Item_1 !== Item_2,
    Item_1 = (Locomotive_01, Station_01, T_01),
    Item_2 = (Locomotive_02, Station_02, T_02),
    to_string(Station_01) == to_string(Station_02), %%% redundant
    % printf("\n Candidates: %w and %w", Locomotive_01, Locomotive_02 ),
    Loc_Temp = update_position((Locomotive_01, End_P, End_T), Locomotives),
    Loc_New = update_position((Locomotive_02, End_P, End_T), Loc_Temp),
    printf("\n=>  2. S :  %w -> Locos Select: %w || %w", S, Locomotive_01, Locomotive_02),
    printf("\n Status  Locomotives NEW: %w ", Loc_New ), 
    printf("\n Candidates were: %w \n", Loc_Candidates),
    %printf("\n ACTION: %w", Action ),
	 %%% OK here
        
    Action = {(Id_Serv, Locomotive_01, Locomotive_02), Action_Cost} , %%a description
     S1 = { Services_To_Do, Loc_New, Loc_Classes, Service_Class_Equivalence }.

/* EQUIVALENT LOCOMOTIVE == a class substituion -- if a equivalence for this service */
action({Services, Locomotives, Loc_Classes, Service_Class_Equivalence}, S1, Action, Action_Cost ) ?=>
    
    Action_Cost = 30,
    [ S | Services_To_Do ] = Services,
     % S is a tuple: (a001,hgrd,37740,hesh,62700,ldual),
    S = (Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class),
    %printf("\n S:  %w", S),
    %% find a list of  locomotives that has this service class... otherwise it will fall into equivalences
    %% A list here 
    Cod_Class_Locomotive = get_classes_locomotives(Serv_Class , Loc_Classes ), 
    %printf("\n For this SERVICE: %w the correct Loc Class is (only one):  %w", Serv_Class, Cod_Class_Locomotive),
    %[295,246] -- Number or Family code, once 1 LOC class can be done by many
    %% classes of locomotives
    L_Options_Penalty = get_equivalent_service(Service_Class_Equivalence, Serv_Class),
    %printf("\n L_Options_Penalty of ALL: %w ", L_Options_Penalty),
        % : [(dt_sdiesel,10),(ldiesel,10),(ldual,20)]
        %% to check if these Service Class has locomotives with these class
        %printf("\n Loc_Class table: %w ", Loc_Classes),
    %% Take only the  existents Classes 
    L_Equiv_Serv = filter_from_options_existence(Loc_Classes , L_Options_Penalty),
        %%%% RETORNO [(250,ldiesel,30),(263_264,ldiesel,30)]
        %%% [(NUM_CLASSE, SERV_EQUIVALENTE_NOVO, PENALIDADE)]
        % Got a alternative CODE Class in New Serv Class for  S
     %printf("\n EXISTENT options for this service: %w and L Equiv Serv : %w ", Serv_Class, L_Equiv_Serv),
    
     L_Equiv_Real = existence_real_of_equivalent(L_Equiv_Serv, Locomotives),
     %printf("\n Real or Valid: %w ",  L_Equiv_Real),

    %member() 
    % [(_Num_Class, _New_Equiv_Serv, Aux_Penality) | _ ] = L_Equiv_Real,
      %  N_Class_Eqv := len(L_Equiv_Serv),
    
     %%%%PEGAR UMA DESSAS CATEGORIAS DE LOCOMOTIVAS: [(250,ldiesel,30),(263_264,ldiesel,30)]
    % Cod_Class_Equiv = get_codes_loc_exist( L_Equiv_Serv, Locomotives),
	%printf("\n L_Equiv_Serv: %w", L_Equiv_Serv),
	%printf("\n Cod_Class_Equiv: %w", Cod_Class_Equiv),

    %% ['250','263_264']
               
    % (Cod_Item_Equiv, Serv_Item_Equiv, Penality) = Item,
    find_all_equivalent(S, Locomotives,  L_Equiv_Real, Loc_Candidates),
    %
    Size = len(Loc_Candidates),
    ( Size > 0 ),
    nth(random(1, Size), Loc_Candidates, Item),
    Item = (A_Candidate, _Station, _Time),
    
    % % OPTIONS
    %select((A_Candidate, _, _  ), Loc_Candidates, R_Loc_Candidates),
    %member((A_Candidate, _, _  ), Loc_Candidates), 
    %printf("\n== Cod_Item_Equiv, Serv_Item_Equiv, Penality ==> %w ", Item), 
            
        %printf("\n Serv Class: %w <=> New SER Class: %w", Serv_Class, New_Serv_Class),
            %% in the table Loc_Class
            %% nao deve precisar.... já tem em Cod_Class 
    
            %printf("\t Code_of_Class_Loc %w", Code_of_Class_Loc),    
            %% 
            %S = (Id_Serv, Start_P, Start_T, End_P, End_T, _),
            
            %%% pegar as locomotivas com este Cod_Class ... e testar.
        /*   
            if  (len(Loc_Candidates_T)== 0 ) then
                printf("\n Candidatas %w = ", Loc_Candidates_T), 
                printf("\n Locomotives %w", Locomotives),
                printf("\n S EQUIVALENT: %w ", S),
       
                print("Abort...."),
                exit()
            end,
         */       
    
    %% several candidates come, take only one, for example
    % example: ('159-001', 159, 'hgrd', 37740),
    % A first candidate and ONE
    
    %%%% UPDATE the chosen one in the list of locomotives
    %%% new positions of the locomotive, and time it is available there
    %%% update the 2 items that change position and time

    Loc_New = update_position( (A_Candidate, End_P, End_T), Locomotives),
    %printf("\n Loc NEw: %w", Loc_New),
    %exit(),
    printf("\n =>  3. S: %w || \n Status  Locomotives NEW: %w ", S, Loc_New ), 
    printf("\n Candidates were: %w || Choosen: %w\n", Loc_Candidates, A_Candidate),
    %%% OK here
    %Action_Cost = max(1, Aux_Penality),  
	Action = {(Id_Serv, A_Candidate), Action_Cost} , %%a description
	S1 = {Services_To_Do, Loc_New, Loc_Classes, Service_Class_Equivalence }.

%% a substituition by place and time ... nothing is considered about services or equivalences
% %% ACTION 4
action({Services, Locomotives, Loc_Classes, Service_Class_Equivalence}, S1, Action, Action_Cost ) =>
   
    Action_Cost = 99,   
    [ S | Services_To_Do ] = Services, 
    % S is a tuple: (a001,hgrd,37740,hesh,62700,ldual),
    (Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class) = S,
   
% %     %% find a locomotive that has this service class... otherwise it will fall into equivalences

% %   %printf("\n %w", L_Classes_of_Locomotive ),  
%      %% find any availble in that Position in the previous time
     Loc_Candidates = find_any_loc(S, Locomotives ),
%     % if ( len(Loc_Candidates) == 0 ) then     
%     %       printf("\n 4. ABORT with S %w No Candidates: %w ", S, Loc_Candidates ),
%     %       printf("\n Status Locomotives Current: %w ", Locomotives ),
%     %       exit()
%     % end,
%     % Size = len(Loc_Candidates),
%     % nth(random(1, Size),Loc_Candidates,Item),
%     % Item = (A_Candidate, _Station, _Time),
     Size = len(Loc_Candidates),
     ( Size > 0 ),
     nth(random(1, Size), Loc_Candidates, A_Candidate),
%     %member(A_Candidate, Loc_Candidates),

%     %%% TAKE CARE HERE
     A_Candidate = (Loc_ID, _Place, _Time),
     Loc_New = update_position( (Loc_ID, End_P, End_T), Locomotives),

     printf("\n\n => 4. S: %w || \n Status Locomotives NEW: %w ", S, Loc_New ),
     printf("\n Candidates were: %w || Choosen: %w\n", Loc_Candidates, A_Candidate),
    
    
   	Action = {(Id_Serv, Loc_ID), Action_Cost} , %%a description
    S1 = { Services_To_Do, Loc_New, Loc_Classes, Service_Class_Equivalence }.

%%% Finnaly an otherwise ... NO ....
action({Services, Locomotives, Loc_Classes, Service_Class_Equivalence}, S1, Action, Action_Cost ) =>
    Action_Cost = 9999999,   
    [ S | Services_To_Do ] = Services, % S is a tuple: (a001,hgrd,37740,hesh,62700,ldual),
    (Id_Serv, Start_P, Start_T, End_P, End_T, Serv_Class) = S,

    % %     %% find a locomotive that has this service class... otherwise it will fall into equivalences
    % %       %% A list here 
    
    % %   %printf("\n %w", L_Classes_of_Locomotive ),  
    %      %% find any availble in that Position in the previous time
         Loc_Candidates = find_any_loc(S, Locomotives ),
        %  Size = len(Loc_Candidates),
        %  ( Size > 0 ),
        %  nth(random(1, Size),Loc_Candidates, A_Candidate),
         
    if ( len(Loc_Candidates) == 0 ) then     
        printf("\n 5. Candidate unsolved: %w ", S ),
        printf("\n Status Locomotives Current: %w ", Locomotives ),
        exit()
    end,
    
    printf("\n\n => 5. S: %w (SERVICE UNSOLVED) || \n Status Locomotives NEW: %w \n", S, Locomotives ),
    
         
    Action = {(Id_Serv, "NO LOCOMOTIVES AVAILABLE"), Action_Cost} ,
    S1 = { Services_To_Do, Locomotives, Loc_Classes, Service_Class_Equivalence }.       
    %     Action = {(Id_Serv, Loc_ID), Action_Cost} , %%a description
    
/* END PLANNER */

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Printing OUTPUTs
%%% writing to a file ETC
write_to_file(FileName, List) =>
    File = open(FileName, write),
    print_json(File, List),
    close(File).

%%% writing a list  ... 
print_list([]) =>
    true.
print_list([ X | Xs]) =>
    printf("\n %w", X),
    print_list(Xs).

%% only services
print_services([]) =>
    true.
print_services([ {(_,B), Cost} | Xs]) =>
    printf("\t %w || %w ", B, Cost),
    print_services(Xs).

%% writing formatted in JSON
print_json(_, []) ?=> true.
print_json(FileName,[{(A,B), _}| Rest ] ) =>
    %ServiceID = new_uppercase(A),
    %% OR
    ServiceID =  to_atom(to_uppercase(to_string(A))),
    LocomotiveID = to_atom(to_uppercase(to_string(B))),
    printf(FileName,"{'service_id': '%w', 'locomotiveId': [\'%w\']}\n", ServiceID, LocomotiveID),
    print_json(FileName, Rest).

new_uppercase(Atom) = UpperAtom =>
    %string_uppercase(Atom.to_string(), UpperStr),
    String = to_string(Atom),
    UpperStr = to_uppercase(String),
    %UpperAtom = UpperStr.to_atom().
    UpperAtom = to_atom(UpperStr).

/*
Picat> to_atom(['X','9']) = X.
X = 'X9'
yes

Picat> ['X','9'].to_atom()= X.
X = 'X9'
*/
%to_lowercase(String) = LString: This function converts all uppercase alphabetic characters into lowercase characters, returning the result in LString.
%to_uppercase(String) = UString: This function converts all lowercase alphabetic characters into uppercase characters, returning the result in UString.
